{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver
open import IdentityMonad
open import Pb
open import SigmaMonad
open import OpetopicType
open import MonadMap

module FreeAlg2 where

  postulate
    Œº-pos-typ-slc : (M : ùïÑ) {i : Idx (Slice M)} (c : Cns (Slice M) i)
      ‚Üí (Œ¥ : (p : Pos (Slice M) c) ‚Üí Cns (Slice M) (Typ (Slice M) c p))
      ‚Üí (p : Pos (Slice M) (Œº (Slice M) c Œ¥))
      ‚Üí Typ‚Çõ M (Œº (Slice M) c Œ¥) p ‚Ü¶ Typ (Slice M) (Œ¥ (Œº-pos-fst (Slice M) c Œ¥ p)) (Œº-pos-snd (Slice M) c Œ¥ p)
    {-# REWRITE Œº-pos-typ-slc #-}

  record is-fillable  {M : ùïÑ} (X : OpetopicType M) : Set where
    coinductive
    field
      base-fillable : (i : Idx M) (c : Cns M i) (ŒΩ : (p : Pos M c) ‚Üí Ob X (Typ M c p))
        ‚Üí Œ£ (Ob X i) Œª œÑ ‚Üí Ob (Hom X) ((i , œÑ) , c , ŒΩ)
      hom-fillable : is-fillable (Hom X)

  open is-fillable

  Z : (M : ùïÑ) (X : Idx M ‚Üí Set) (Y : Idx (Slice (Pb M X)) ‚Üí Set)
    ‚Üí Idx (Slice (Pb M (‚ü¶ M ‚üß X))) ‚Üí Set
  Z M X Y ((i , x) , c , ŒΩ) =
    let f = idx-map (Slice-map (Pb-map' (idmap M) {B = ‚ü¶ M ‚üß X} Œª {i} x ‚Üí Œ∑ M i , cst x))
        c' = Œº M c (fst ‚àò ŒΩ)
        ŒΩ' p = Œ∑ M (Typ M (Œº M c (fst ‚àò ŒΩ)) p) ,
               cst (snd (ŒΩ (Œº-pos-fst M c (fst ‚àò ŒΩ) p)) (Œº-pos-snd M c (fst ‚àò ŒΩ) p))
    in Œ£ (hfiber f ((i , x) , c' , ŒΩ')) (Y ‚àò fst)
       ‚äî (Œº M c (fst ‚àò ŒΩ) , (Œª p ‚Üí snd (ŒΩ (Œº-pos-fst M c (fst ‚àò ŒΩ) p)) (Œº-pos-snd M c (fst ‚àò ŒΩ) p)) == x) 

  free-slice : (M : ùïÑ) (X : Idx M ‚Üí Set)
    ‚Üí (Y : OpetopicType (Slice (Pb M X)))
    ‚Üí OpetopicType (Slice (Pb M (‚ü¶ M ‚üß X)))
  Ob (free-slice M X Y) = ‚ü¶ Slice (Pb M (‚ü¶ M ‚üß X)) ‚üß (Z M X (Ob Y))
  Hom (free-slice M X Y) =
    free-slice (Slice (Pb M (‚ü¶ M ‚üß X)))
               (Z M X (Ob Y))
               (OpType-map* (Slice-map (Pb-map'
                              (Slice-map (Pb-map' (idmap M) (Œª {i} x ‚Üí Œ∑ M i , cst x)))
                              (Œª {i} x ‚Üí inl ((_ , idp) , x))))
                            (Hom Y))
                            
  free : (M : ùïÑ) (X : OpetopicType M) ‚Üí OpetopicType M
  Ob (free M X) = ‚ü¶ M ‚üß (Ob X)
  Hom (free M X) = free-slice _ _ (Hom X)

  free-slice-is-fillable : (M : ùïÑ) (X : Idx M ‚Üí Set)
    ‚Üí (Y : OpetopicType (Slice (Pb M X)))
    ‚Üí is-fillable (free-slice M X Y)
  base-fillable (free-slice-is-fillable M X Y) i c ŒΩ =
    let c' = Œº (Slice (Pb M (‚ü¶ M ‚üß X))) c (fst ‚àò ŒΩ)
        ŒΩ' p = snd (ŒΩ (Œº-pos-fst (Slice (Pb M (‚ü¶ M ‚üß X))) c (fst ‚àò ŒΩ) p))
                   (Œº-pos-snd (Slice (Pb M (‚ü¶ M ‚üß X))) c (fst ‚àò ŒΩ) p)
        Œ∏ = Œ∑ (Slice ((Pb (Slice (Pb M (‚ü¶ M ‚üß X))) (‚ü¶ Slice (Pb M (‚ü¶ M ‚üß X)) ‚üß (Z M X (Ob Y)))))) _  ,
            Œª { true ‚Üí inr idp }
    in (c' , ŒΩ') , Œ∏
     
  hom-fillable (free-slice-is-fillable M X Y) =
    let f = Slice-map (Pb-map'
              (Slice-map (Pb-map' (idmap M)
                                  (Œª {i} x ‚Üí Œ∑ M i , cst x)))
              {B = Z M X (Ob Y)} (Œª {i} x ‚Üí inl ((_ , idp) , x)))
    in free-slice-is-fillable _ _ (OpType-map* {!f!} (Hom Y))

  free-is-fillable : (M : ùïÑ) (X : OpetopicType M)
    ‚Üí is-fillable (free M X)
  base-fillable (free-is-fillable M X) i c ŒΩ =
    let c' = Œº M c (fst ‚àò ŒΩ)
        ŒΩ' p = snd (ŒΩ (Œº-pos-fst M c (fst ‚àò ŒΩ) p)) (Œº-pos-snd M c (fst ‚àò ŒΩ) p)
        Œ∏ = Œ∑ (Slice (Pb M (‚ü¶ M ‚üß (Ob X)))) _ , Œª { true ‚Üí inr idp }
    in (c' , ŒΩ') , Œ∏
  hom-fillable (free-is-fillable M X) = free-slice-is-fillable M (Ob X) (Hom X)
