{-# OPTIONS --without-K --rewriting --type-in-type #-}

open import HoTT
open import Poly 
open import Inspect

module PolyMonads where

  data Mnd : Type‚ÇÄ where
    ùïå : Mnd

  record Prof (I : Type‚ÇÄ) : Type‚ÇÄ where
    constructor prof
    field
      P : Type‚ÇÄ
      œÑ : P ‚Üí I

  open Prof public

  Œ£Prof : {I : Type‚ÇÄ} (p : Prof I) (Œ¥ : P p ‚Üí Prof I) ‚Üí Prof I
  Œ£Prof p Œ¥ = prof (Œ£ (P p) (P ‚àò Œ¥)) (Œª pq ‚Üí œÑ (Œ¥ (fst pq)) (snd pq))
  
  postulate
  
    Idx : Mnd ‚Üí Type‚ÇÄ

    Œ≥ : (M : Mnd) ‚Üí Idx M ‚Üí Prof (Idx M) ‚Üí Type‚ÇÄ

    Œ∑ : (M : Mnd) (i : Idx M) ‚Üí Œ≥ M i (prof ‚ä§ (cst i))

    Œº : (M : Mnd) (i : Idx M) (p : Prof (Idx M)) (c : Œ≥ M i p)
      ‚Üí (Œ¥ : (q : P p) ‚Üí Œ£ (Prof (Idx M)) (Œ≥ M (œÑ p q)))
      ‚Üí Œ≥ M i (Œ£Prof p (fst ‚àò Œ¥))

  -- Okay, but I think I see what is going to happen here:  without strict associativity
  -- of Œ£, it seems that the monad laws will not be well typed.  Indeed, they will be
  -- constructors over two different profiles, linked by a sigma unit or associativity.

  module _ (M : Mnd) where

    I-slc : Type‚ÇÄ
    I-slc = Œ£ (Idx M) (Œª i ‚Üí Œ£ (Prof (Idx M)) (Œª p ‚Üí Œ≥ M i p))

    data SlcCons : I-slc ‚Üí Prof (I-slc) ‚Üí Type‚ÇÄ where
      dot : (i : Idx M) ‚Üí SlcCons (i , prof ‚ä§ (cst i) , Œ∑ M i) (prof ‚ä• ‚ä•-elim)
      box : (i : Idx M) (p : Prof (Idx M)) (c : Œ≥ M i p)
        ‚Üí (Œ¥ : (q : P p) ‚Üí Œ£ (Prof (Idx M)) (Œ≥ M (œÑ p q)))
        ‚Üí (Œµ : (q : P p) ‚Üí Œ£ (Prof (I-slc)) (SlcCons (œÑ p q , Œ¥ q)))
        ‚Üí SlcCons (i , Œ£Prof p (fst ‚àò Œ¥) , Œº M i p c Œ¥)
                  (prof (‚ä§ ‚äî Œ£ (P p) (Œª p ‚Üí P (fst (Œµ p))))
                        (Œª { (inl unit) ‚Üí i , p , c ;
                             (inr (a , b)) ‚Üí œÑ (fst (Œµ a)) b }))

    -- Okay.  So this is pretty interesting.  It essentially builds the place calculation
    -- into the indexing of the type.  Is there, like, some kind of hope that this has
    -- better calculational properties?  Dunno.  Probably not.

    -- But it's still pretty interesting.

    -- Uh, yeah, I'm not quite sure what will happen.  I mean, it certainly feels like the lack
    -- of boilerplate rewrites and so on for places should vastly simplify things.
