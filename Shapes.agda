{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import Pb

module Shapes (M : ùïÑ) (X‚ÇÄ : Idx M ‚Üí Set) where

  ShpSlc‚ÇÅ : ùïÑ
  ShpSlc‚ÇÅ = Slice (Pb M X‚ÇÄ)

  module Dim‚ÇÅ (X‚ÇÅ : Idx ShpSlc‚ÇÅ ‚Üí Set) where

    arrow : {i : Idx M} (j‚ÇÄ j‚ÇÅ : X‚ÇÄ i) ‚Üí Set
    arrow {i} j‚ÇÄ j‚ÇÅ = X‚ÇÅ ((i , j‚ÇÅ) , Œ∑ M i , cst j‚ÇÄ) 

    -- Oh.  These are *dotted* seqences.
    Seq : {i : Idx M} ‚Üí X‚ÇÄ i ‚Üí X‚ÇÄ i ‚Üí Set
    Seq {i} j‚ÇÄ j‚ÇÅ = Cns ShpSlc‚ÇÅ ((i , j‚ÇÅ) , Œ∑ M i , cst j‚ÇÄ)
    
    seq‚ÇÄ : {i : Idx M} (j : X‚ÇÄ i) ‚Üí Seq j j
    seq‚ÇÄ {i} j = lf (i , j)

    seq‚ÇÅ {i} {j‚ÇÄ j‚ÇÅ : X‚ÇÄ i}
      ‚Üí Seq j‚ÇÄ j‚ÇÅ
    seq‚ÇÅ {i} {j‚ÇÄ} {j‚ÇÅ}

    multiarrow : (i : Idx M) (c : Cns M i)
      ‚Üí (x : X‚ÇÄ i) (œá : (p : Pos M c) ‚Üí X‚ÇÄ (Typ M c p))
      ‚Üí Set
    multiarrow i c x œá = X‚ÇÅ ((i , x) , (c , œá)) 


    ShpSlc‚ÇÇ : ùïÑ
    ShpSlc‚ÇÇ = Slice (Pb ShpSlc‚ÇÅ X‚ÇÅ)
    
    module Dim‚ÇÇ (X‚ÇÇ : Idx ShpSlc‚ÇÇ ‚Üí Set) where

      simplex : {i : Idx M} {j‚ÇÄ j‚ÇÅ j‚ÇÇ : X‚ÇÄ i}
        ‚Üí (f : arrow j‚ÇÄ j‚ÇÅ) (g : arrow j‚ÇÅ j‚ÇÇ)
        ‚Üí (h : arrow j‚ÇÄ j‚ÇÇ) ‚Üí Set
      simplex {i} {j‚ÇÄ} {j‚ÇÅ} {j‚ÇÇ} f g h =
        X‚ÇÇ ((((i , j‚ÇÇ) , (Œ∑ M i , cst j‚ÇÄ)) , h) , seq‚ÇÇ , dec‚ÇÇ) 

        where seq‚ÇÇ : Cns ShpSlc‚ÇÅ ((i , j‚ÇÇ) , (Œ∑ M i , cst j‚ÇÄ))
              seq‚ÇÇ = nd (Œ∑ M i , cst j‚ÇÅ) (cst (Œ∑ M i , cst j‚ÇÄ))
                        (cst (nd (Œ∑ M i , cst j‚ÇÄ) (cst (Œ∑ M i , cst j‚ÇÄ)) (cst (lf (i , j‚ÇÄ))))) 

              dec‚ÇÇ : (p : Pos ShpSlc‚ÇÅ seq‚ÇÇ) ‚Üí X‚ÇÅ (Typ ShpSlc‚ÇÅ seq‚ÇÇ p) 
              dec‚ÇÇ true = g
              dec‚ÇÇ (inr (p , true)) = f


