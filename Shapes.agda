{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import Pb

module Shapes (M : ùïÑ) (X‚ÇÄ : Idx M ‚Üí Set) where

  --
  --  TODO : SliceUnfold has be rewritten to be generic.  Use those definitions.
  --

  ShpSlc‚ÇÅ : ùïÑ
  ShpSlc‚ÇÅ = Slice (Pb M X‚ÇÄ)

  module Dim‚ÇÅ (X‚ÇÅ : Idx ShpSlc‚ÇÅ ‚Üí Set) where

    arrow : {i : Idx M} (j‚ÇÄ j‚ÇÅ : X‚ÇÄ i) ‚Üí Set
    arrow {i} j‚ÇÄ j‚ÇÅ = X‚ÇÅ ((i , j‚ÇÅ) , Œ∑ M i , cst j‚ÇÄ) 

    --
    --  Some linear sequences 
    --
    
    Seq : {i : Idx M} ‚Üí X‚ÇÄ i ‚Üí X‚ÇÄ i ‚Üí Set
    Seq {i} j‚ÇÄ j‚ÇÅ = ‚ü¶ ShpSlc‚ÇÅ ‚üß X‚ÇÅ ((i , j‚ÇÅ) , Œ∑ M i , cst j‚ÇÄ)

    nil-seq : {i : Idx M} {j : X‚ÇÄ i} ‚Üí Seq j j
    nil-seq {i} {j} = lf (i , j) , ‚ä•-elim

    cns-seq : {i : Idx M} {j‚ÇÄ j‚ÇÅ j‚ÇÇ : X‚ÇÄ i}
      ‚Üí Seq j‚ÇÄ j‚ÇÅ ‚Üí arrow j‚ÇÅ j‚ÇÇ
      ‚Üí Seq j‚ÇÄ j‚ÇÇ
    cns-seq {i} {j‚ÇÄ} {j‚ÇÅ} {j‚ÇÇ} (s , œï) f = tr , dec 

      where tr : Cns ShpSlc‚ÇÅ ((i , j‚ÇÇ) , Œ∑ M i , cst j‚ÇÄ)
            tr = nd (Œ∑ M i , cst j‚ÇÅ) (cst (Œ∑ M i , cst j‚ÇÄ)) (cst s)

            dec : (p : Pos ShpSlc‚ÇÅ tr) ‚Üí X‚ÇÅ (Typ ShpSlc‚ÇÅ tr p)
            dec true = f
            dec (inr (p , q)) = œï q
            
    multiarrow : (i : Idx M) (c : Cns M i)
      ‚Üí (x : X‚ÇÄ i) (œá : (p : Pos M c) ‚Üí X‚ÇÄ (Typ M c p))
      ‚Üí Set
    multiarrow i c x œá = X‚ÇÅ ((i , x) , (c , œá)) 

    --
    --  Dimension 2
    --

    ShpSlc‚ÇÇ : ùïÑ
    ShpSlc‚ÇÇ = Slice (Pb ShpSlc‚ÇÅ X‚ÇÅ)
    
    module Dim‚ÇÇ (X‚ÇÇ : Idx ShpSlc‚ÇÇ ‚Üí Set) where

      null-homotopy : {i : Idx M} {j : X‚ÇÄ i}
        ‚Üí arrow j j ‚Üí Set
      null-homotopy {i} {j} f =
        X‚ÇÇ ((((i , j) , Œ∑ M i , cst j) , f) ,
          nil-seq) 

      disc : {i : Idx M} {j‚ÇÄ j‚ÇÅ : X‚ÇÄ i}
        ‚Üí arrow j‚ÇÄ j‚ÇÅ ‚Üí arrow j‚ÇÄ j‚ÇÅ ‚Üí Set
      disc {i} {j‚ÇÄ} {j‚ÇÅ} f g =
        X‚ÇÇ ((((i , j‚ÇÅ) , Œ∑ M i , cst j‚ÇÄ) , g) ,
          cns-seq nil-seq f) 
      
      simplex : {i : Idx M} {j‚ÇÄ j‚ÇÅ j‚ÇÇ : X‚ÇÄ i}
        ‚Üí (f : arrow j‚ÇÄ j‚ÇÅ) (g : arrow j‚ÇÅ j‚ÇÇ)
        ‚Üí (h : arrow j‚ÇÄ j‚ÇÇ) ‚Üí Set
      simplex {i} {j‚ÇÄ} {j‚ÇÅ} {j‚ÇÇ} f g h =
        X‚ÇÇ ((((i , j‚ÇÇ) , Œ∑ M i , cst j‚ÇÄ) , h) ,
              cns-seq (cns-seq nil-seq f) g)

