{-# OPTIONS --without-K --rewriting --allow-unsolved-meta --allow-incomplete-matches
 #-}

open import Monad
open import MonadOver
open import Pb
open import OpetopicType
open import HoTT
open import Utils

module MonadMap where

  module _ {i j} {A : Set i} {B : A ‚Üí Set j} where

    data Graph (f : ‚àÄ x ‚Üí B x) (x : A) (y : B x) : Set j where
      ingraph : f x == y ‚Üí Graph f x y

    inspect : (f : ‚àÄ x ‚Üí B x) (x : A) ‚Üí Graph f x (f x)
    inspect _ _ = ingraph idp
{-
  Œª=‚Üì : ‚àÄ {i j k} {A : Set i} {B : A ‚Üí Set j} {C : {x : A} ‚Üí B x ‚Üí Set k} {f g : Œ† A B} (h : f ‚àº g)
    ‚Üí {u : (x : A) ‚Üí  C (f x)} {v : (x : A) ‚Üí  C (g x)}
    ‚Üí ((x : A) ‚Üí u x == v x [ C ‚Üì h x ])
    ‚Üí u == v [ (Œª h ‚Üí (x : A) ‚Üí C (h x)) ‚Üì Œª= h ]
  Œª=‚Üì {C = C} {f = f} h {u} {v} p with Œª= h | inspect Œª= h
  ... | idp | ingraph q = Œª= Œª x ‚Üí transport (Œª r ‚Üí u x == v x [ C  ‚Üì r ]) (! (app=-Œ≤ h x) ‚àô (ap (Œª p ‚Üí app= p x) q )) (p x)
-}
  Œª=‚Üì : ‚àÄ {i j k} {A : Set i} {B : A ‚Üí Set j} {C : {x : A} ‚Üí B x ‚Üí Set k} {f g : Œ† A B} (h : f == g)
    ‚Üí {u : (x : A) ‚Üí  C (f x)} {v : (x : A) ‚Üí  C (g x)}
    ‚Üí ((x : A) ‚Üí u x == v x [ C ‚Üì app= h x ])
    ‚Üí u == v [ (Œª h ‚Üí (x : A) ‚Üí C (h x)) ‚Üì h ]
  Œª=‚Üì {C = C} {f = f} idp {u} {v} = Œª=
{-
  Œª=‚Üì' : ‚àÄ {i j k} {A : Set i} {B : A ‚Üí Set j} {C : {x : A} ‚Üí B x ‚Üí Set k} {x y : A} (h : x == y)
    ‚Üí {u : Œ† (B x) C } {v : Œ† (B y) C}
    ‚Üí ((x : A) ‚Üí u x == v x [ C x ‚Üì h ])
    ‚Üí u == v [ (Œª x ‚Üí (y : B x) ‚Üí C y) ‚Üì h ]
  Œª=‚Üì' idp = Œª= 

  Œª=‚Üì' : ‚àÄ {i j k} {A : Set i} {B : A ‚Üí Set j} {C : {x : A} ‚Üí B x ‚Üí Set k} {f g : Œ† A B} (h : f ‚àº g)
    ‚Üí {u : (x : A) ‚Üí  C (f x)} {v : (x : A) ‚Üí  C (g x)}
    ‚Üí ((x : A) ‚Üí u x == v x [ C ‚Üì h x ])
    ‚Üí u == v [ (Œª x ‚Üí (y : B x) ‚Üí C (h x)) ‚Üì Œª= h ]
  Œª=‚Üì' = ?
-}

  _‚áí_ : {A : Set} (B C : A ‚Üí Set) ‚Üí Set
  _‚áí_ {A} B C = (x : A) ‚Üí B x ‚Üí C x

  transp!-‚àô : ‚àÄ {i j} {A : Type i} {B : A ‚Üí Type j} {x y z : A}
    (p : x == y) (q : z == y) (b : B x)
    ‚Üí transport B (p ‚àô ! q) b == transport! B q (transport B p b)
  transp!-‚àô idp idp b = idp

  C-transp : {A : Set} {B : A ‚Üí Set} (C : {x : A} ‚Üí B x ‚Üí Set)
    ‚Üí {x y : A} (p : x == y)
    ‚Üí {u : B x} {v : B y}
    ‚Üí (q : u == v [ B ‚Üì p ])
    ‚Üí C u == C v
  C-transp C idp q = ap C q

  C-transp' : {A : Set} {B : A ‚Üí Set} (C : {x : A} ‚Üí B x ‚Üí Set)
    ‚Üí {x y : A} (p : x == y)
    ‚Üí (u : B y)
    ‚Üí C (transport B (! p) u) == C u
  C-transp' {B = B} C p u = C-transp C p (transp-‚Üì B p u)

  C-transp'' : {A : Set} {B : A ‚Üí Set} (C : {x : A} ‚Üí B x ‚Üí Set)
    ‚Üí {x y : A} (p : x == y)
    ‚Üí (u : B x)
    ‚Üí C (transport B p u) == C u
  C-transp'' {B = B} C idp u = idp -- C-transp C p (transp-‚Üì B p u) 

  coe-coe! : {A B : Set} (p : A == B) (x : B) ‚Üí coe (! p) x == coe! p x
  coe-coe! idp x = idp

  transp-transp! : {A : Set} {B : A ‚Üí Set} {x y : A}
    ‚Üí (p : x == y) (u : B y) ‚Üí transport B (! p) u == transport! B p u
  transp-transp! idp u = idp

  transport-elim : {A : Set} {B : A ‚Üí Set} (C : {x : A} ‚Üí B x ‚Üí Set)
    ‚Üí {x y : A} (p : x == y) (u : B x)
    ‚Üí C (transport B p u) ‚Üí C u
  transport-elim C idp u x = {!!}

  transp-pos-invar : (M : ùïÑ) {i j : Idx M} (c : Cns M i)
    ‚Üí (p : i == j) 
    ‚Üí Pos M (transport (Cns M) p c) == Pos M c 
  transp-pos-invar M c idp = idp
{-
  transp-‚Üì' : ‚àÄ {i j} {A : Type i} (P : A ‚Üí Type j) {a‚ÇÅ a‚ÇÇ : A}
    ‚Üí (p : a‚ÇÅ == a‚ÇÇ) (y : P a‚ÇÅ) ‚Üí y == transport P p y  [ P ‚Üì p ]
  transp-‚Üì' _ idp _ = idp
-}
  record Map (M N : ùïÑ) : Set where
    field
      idx-map : Idx M ‚Üí Idx N
      cns-map : {i : Idx M} ‚Üí Cns M i ‚Üí Cns N (idx-map i)
      pos-map : {i : Idx M} (c : Cns M i)
        ‚Üí Pos M c ‚âÉ Pos N (cns-map c)
      typ-map : {i : Idx M} (c : Cns M i) (p : Pos M c)
        ‚Üí idx-map (Typ M c p) == Typ N (cns-map c) (‚Äì> (pos-map c) p)

    Œ¥-map : {i : Idx M} (c : Cns M i)
      ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
      ‚Üí (p : Pos N (cns-map c))
      ‚Üí Cns N (Typ N (cns-map c) p)
    Œ¥-map c Œ¥ p =
      transport (Cns N)
                (typ-map _ (<‚Äì (pos-map c) p)
                 ‚àô ap (Typ N (cns-map c)) (<‚Äì-inv-r (pos-map c) p))
                (cns-map (Œ¥ (<‚Äì (pos-map _) p)))

    Œ¥-map-pos : {i : Idx M} (c : Cns M i)
      ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
      ‚Üí (p : Pos M c) (q : Pos M (Œ¥ p))
      ‚Üí Pos N (transport (Cns N)
                         (typ-map c (<‚Äì (pos-map c) (‚Äì> (pos-map c) p))
                          ‚àô ap (Typ N (cns-map c)) (<‚Äì-inv-r (pos-map c) (‚Äì> (pos-map c) p)))
                         (cns-map (Œ¥ (<‚Äì (pos-map c) (‚Äì> (pos-map c) p))))) 
    Œ¥-map-pos c Œ¥ p q =
      coe (! (transp-pos-invar N (cns-map (Œ¥ (<‚Äì (pos-map c) (‚Äì> (pos-map c) p)))) _))
          (‚Äì> (pos-map (Œ¥ (<‚Äì (pos-map c) (‚Äì> (pos-map c) p))))
              (transport (Pos M ‚àò Œ¥) (! (<‚Äì-inv-l (pos-map c) p)) q)) 
    
    field
      cns-map-Œ∑ : (i : Idx M) ‚Üí cns-map (Œ∑ M i) == Œ∑ N (idx-map i)
      cns-map-Œº : {i : Idx M} (c : Cns M i)
        ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
        ‚Üí cns-map (Œº M c Œ¥)
          == Œº N (cns-map c) (Œ¥-map c Œ¥)
      Œº-pos-map : {i : Idx M} (c : Cns M i) (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
        ‚Üí (p : Pos M c) (q : Pos M (Œ¥ p))
        ‚Üí ‚Äì> (pos-map (Œº M c Œ¥)) (Œº-pos M c Œ¥ p q)
            == Œº-pos N (cns-map c) (Œ¥-map c Œ¥)
                       (‚Äì> (pos-map c) p)
                       (Œ¥-map-pos c Œ¥ p q)
            [ Pos N ‚Üì cns-map-Œº c Œ¥ ]
    {-  Œº-pos-fst-map : {i : Idx M} (c : Cns M i) (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
        ‚Üí (p : Pos M (Œº M c Œ¥))
        ‚Üí ‚Äì> (pos-map c) (Œº-pos-fst M c Œ¥ p) == Œº-pos-fst N (cns-map c) (Œ¥-map c Œ¥) (transport (Pos N) (cns-map-Œº c Œ¥) (‚Äì> (pos-map (Œº M c Œ¥)) p))
      Œº-pos-snd-map : {i : Idx M} (c : Cns M i) (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
        ‚Üí (p : Pos M (Œº M c Œ¥))
        ‚Üí ‚Äì> (pos-map (Œ¥ (Œº-pos-fst M c Œ¥ p))) (Œº-pos-snd M c Œ¥ p)
          == Œº-pos-snd N (cns-map c) (Œ¥-map c Œ¥) (transport (Pos N) (cns-map-Œº c Œ¥) (‚Äì> (pos-map (Œº M c Œ¥)) p)) [ Pos N ‚Üì {!!} ] -}

  module _ (M N : ùïÑ) (f : Map M N) where

    open Map f

    Œº-pos-fst-map : {i : Idx M} (c : Cns M i) (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
        ‚Üí (p : Pos M (Œº M c Œ¥))
        ‚Üí ‚Äì> (pos-map c) (Œº-pos-fst M c Œ¥ p)
          == Œº-pos-fst N (cns-map c)
                         (Œ¥-map c Œ¥)
                         (transport (Pos N) (cns-map-Œº c Œ¥) (‚Äì> (pos-map (Œº M c Œ¥)) p))
    Œº-pos-fst-map c Œ¥ p =
      let foo : ‚Äì> (pos-map (Œº M c Œ¥)) p -- (Œº-pos M c Œ¥ p q)
                == Œº-pos N (cns-map c) (Œ¥-map c Œ¥) (‚Äì> (pos-map c) (Œº-pos-fst M c Œ¥ p)) {!!} [ Pos N ‚Üì cns-map-Œº c Œ¥ ]
          foo = Œº-pos-map c Œ¥ (Œº-pos-fst M c Œ¥ p) (Œº-pos-snd M c Œ¥ p)

          foo2 : {!!} == ‚Äì> (pos-map c) (Œº-pos-fst M c Œ¥ p) [ {!!} ‚Üì {!!} ]
          foo2 = ap‚Üì (Œª { (c , Œ¥ , p) ‚Üí Œº-pos-fst N c Œ¥ p}) (pair= (cns-map-Œº c Œ¥) (‚Üì-Œ£-in {!!} {!!}))

          bar : ‚Äì> (pos-map c) (Œº-pos-fst M c Œ¥ p)
                == Œº-pos-fst N (cns-map c) (Œ¥-map c Œ¥) (transport (Pos N) (cns-map-Œº c Œ¥) (‚Äì> (pos-map (Œº M c Œ¥)) p))
          bar = {!!}
      in {!!}
    

  record _‚áõ_ (M N : ùïÑ) : Set where
    field
      idx-map : Idx M ‚Üí Idx N
      cns-map : {i : Idx M} ‚Üí Cns M i ‚Üí Cns N (idx-map i)
      pos-map : {i : Idx M} (c : Cns M i)
        ‚Üí Pos M c ‚âÉ Pos N (cns-map c)
      typ-map : {i : Idx M} (c : Cns M i) (p : Pos M c)
        ‚Üí idx-map (Typ M c p) == Typ N (cns-map c) (‚Äì> (pos-map c) p)
      cns-map-Œ∑ : (i : Idx M) ‚Üí cns-map (Œ∑ M i) == Œ∑ N (idx-map i)
      cns-map-Œº : {i : Idx M} (c : Cns M i)
        ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
        ‚Üí cns-map (Œº M c Œ¥)
          == Œº N (cns-map c) (Œª p ‚Üí
            transport (Cns N)
              (typ-map _ (<‚Äì (pos-map c) p)
               ‚àô ap (Typ N (cns-map c)) (<‚Äì-inv-r (pos-map c) p))
              (cns-map (Œ¥ (<‚Äì (pos-map _) p))))
  open _‚áõ_ public

  

  module _ {M N : ùïÑ} (f : M ‚áõ N) where

    pos-Œ∑-contr : (M : ùïÑ) (i : Idx M) ‚Üí is-contr (Pos M (Œ∑ M i))
    pos-Œ∑-contr M i = has-level-in (Œ∑-pos M i , Œ∑-pos-elim M i _ idp)

    Œ∑-pos-map : (i : Idx M)
      ‚Üí ‚Äì> (pos-map f (Œ∑ M i)) (Œ∑-pos M i) == Œ∑-pos N (idx-map f i) [ Pos N ‚Üì cns-map-Œ∑ f i ]
    Œ∑-pos-map i = from-transp (Pos N) (cns-map-Œ∑ f i) (contr-has-all-paths ‚¶É pos-Œ∑-contr N (idx-map f i) ‚¶Ñ _ _)

  module _ {M N : ùïÑ}
           (f : M ‚áõ N) where

    

    foo16 : {i : Idx M} (c : Cns M i)
      ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
      ‚Üí (p : Pos M c) (q : Pos M (Œ¥ p))
      ‚Üí Pos N
      (transport (Cns N)
       (typ-map f c (<‚Äì (pos-map f c) (‚Äì> (pos-map f c) p)) ‚àô
        ap (Typ N (cns-map f c))
        (<‚Äì-inv-r (pos-map f c) (‚Äì> (pos-map f c) p)))
       (cns-map f (Œ¥ (<‚Äì (pos-map f c) (‚Äì> (pos-map f c) p)))))
    foo16 c Œ¥ p q =
      let foo17 = ‚Äì> (pos-map f (Œ¥ p)) q
      
          foo18 : idx-map f (Typ M c (<‚Äì (pos-map f c) (‚Äì> (pos-map f c) p)))
                  == Typ N (cns-map f c) (‚Äì> (pos-map f c) p)
          foo18 = typ-map f c (<‚Äì (pos-map f c) (‚Äì> (pos-map f c) p))
                  ‚àô ap (Typ N (cns-map f c)) (<‚Äì-inv-r (pos-map f c) (‚Äì> (pos-map f c) p))

          foo19 : Pos N (cns-map f (Œ¥ (<‚Äì (pos-map f c) (‚Äì> (pos-map f c) p))))
          foo19 = ‚Äì> (pos-map f (Œ¥ _)) (transport (Pos M ‚àò Œ¥) (! (<‚Äì-inv-l (pos-map f c) p)) q)
      in coe (! (transp-pos-invar N (cns-map f (Œ¥ _)) foo18)) foo19

    foo14 : {i : Idx M} (c : Cns M i)
      ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
      ‚Üí (p : Pos M c) (q : Pos M (Œ¥ p))
      ‚Üí ‚Äì> (pos-map f (Œº M c Œ¥)) (Œº-pos M c Œ¥ p q) ==
          Œº-pos N (cns-map f c)
                  (Œª p ‚Üí transport (Cns N) (typ-map f _ (<‚Äì (pos-map f c) p) ‚àô ap (Typ N (cns-map f c)) (<‚Äì-inv-r (pos-map f c) p)) (cns-map f (Œ¥ (<‚Äì (pos-map f _) p))))
                  (‚Äì> (pos-map f c) p)
                  {!‚Äì> (pos-map f (Œ¥ p)) ?!} [ Pos N ‚Üì cns-map-Œº f c Œ¥ ]
    foo14 = {!!}


  foo15 : {M : ùïÑ} (i : Idx M) (c : Cns M i) (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
    ‚Üí (Œ£ (Pos M c) Œª p ‚Üí Pos M (Œ¥ p)) ‚âÉ Pos M (Œº M c Œ¥) 
  foo15 {M} i c Œ¥ = equiv (uncurry (Œº-pos M c Œ¥))
                          (Œª p ‚Üí Œº-pos-fst M c Œ¥ p , Œº-pos-snd M c Œ¥ p)
                          (Œª p ‚Üí idp)
                          Œª p ‚Üí idp

  foo2 : {A : Set} {B : A ‚Üí Set}
    ‚Üí {C : A ‚Üí Set} {D : (x : A) (y : B x) (z : C x) ‚Üí Set}
    ‚Üí {x x‚ÇÅ : A} {y : B x} {y‚ÇÅ : B x‚ÇÅ}
    ‚Üí (p : (x , y) == (x‚ÇÅ , y‚ÇÅ))
    ‚Üí (u : Œ£ (C x) (D x y))
    ‚Üí transport C (fst= p) (fst u) == fst (transport (Œª { (x , y) ‚Üí Œ£ (C x) (D x y) }) p u)
  foo2 {C = C} {D} {x} {x‚ÇÅ} {y} {y‚ÇÅ} p u =
    to-transp $ ‚Üì-ap-in _ fst $ ap‚Üì fst $ transp-‚Üì' (Œª { (x , y) ‚Üí Œ£ (C x) (D x y) }) p u  

  foo3 : {A : Set} {B : A ‚Üí Set}
    ‚Üí {C : A ‚Üí Set} {D : (x : A) (y : B x) (z : C x) ‚Üí Set}
    ‚Üí {x x‚ÇÅ : A} {y : B x} {y‚ÇÅ : B x‚ÇÅ}
    ‚Üí (p : x == x‚ÇÅ) (q : y == y‚ÇÅ [ B ‚Üì p ])
    ‚Üí (u : C x) (v : D x y u)
    ‚Üí transport C p u == fst (transport (Œª { (x , y) ‚Üí Œ£ (C x) (D x y) }) (pair= p q) (u , v))
  foo3 {C = C} {D} {x} {x‚ÇÅ} {y} {y‚ÇÅ} idp idp u v = idp

  foo4 : {A B : Set}
    ‚Üí {C : B ‚Üí Set}
    ‚Üí (f : A ‚Üí B)
    ‚Üí (g : Œ† B C)
    ‚Üí {x x‚ÇÅ : A} {y : B} {y‚ÇÅ : B}
    ‚Üí (p : x == x‚ÇÅ)
    ‚Üí ap (Œª x ‚Üí f x , g (f x)) p == pair= (ap f p) (apd g (ap f p))
  foo4 f g idp = idp
 
  idmap : (M : ùïÑ) ‚Üí M ‚áõ M
  idx-map (idmap M) = idf _
  cns-map (idmap M) = idf _
  pos-map (idmap M) _ = ide _
  typ-map (idmap M) c p = idp
  cns-map-Œ∑ (idmap M) i = idp
  cns-map-Œº (idmap M) c Œ¥ = idp

  _‚àò‚Çò_ : {A B C : ùïÑ} (g : B ‚áõ C) (f : A ‚áõ B) ‚Üí A ‚áõ C
  idx-map (g ‚àò‚Çò f) = idx-map g ‚àò idx-map f
  cns-map (g ‚àò‚Çò f) = cns-map g ‚àò cns-map f
  pos-map (g ‚àò‚Çò f) c = pos-map g (cns-map f c) ‚àòe pos-map f c
  typ-map (g ‚àò‚Çò f) c p = ap (idx-map g) (typ-map f c p) ‚àô typ-map g (cns-map f c) (‚Äì> (pos-map f c) p)
  cns-map-Œ∑ (g ‚àò‚Çò f) i = ap (cns-map g) (cns-map-Œ∑ f i) ‚àô cns-map-Œ∑ g (idx-map f i)
  cns-map-Œº (g ‚àò‚Çò f) c Œ¥ = ap (cns-map g) (cns-map-Œº f c Œ¥) ‚àô {!cns-map-Œº g (cns-map f c) ?!}  

  Pb-map : {M : ùïÑ} {A B : Idx M ‚Üí Set}
    ‚Üí (f : A ‚áí B)
    ‚Üí Pb M A ‚áõ Pb M B
  idx-map (Pb-map f) (i , x) = i , f i x
  cns-map (Pb-map f) (c , ŒΩ) = c , Œª p ‚Üí f _ (ŒΩ p)
  pos-map (Pb-map {M} f) (c , ŒΩ) = ide (Pos M c)
  typ-map (Pb-map f) c p = idp
  cns-map-Œ∑ (Pb-map f) i = idp
  cns-map-Œº (Pb-map f) c Œ¥ = idp

  module _ {M N : ùïÑ} (f : M ‚áõ N) where

 
{-
    foo12 : {i : Idx M} (u : Pos N (cns-map f (Œ∑ M i))) (v : Pos N (Œ∑ N (idx-map f i)))
      ‚Üí is-contr (u == v [ Pos N ‚Üì cns-map-Œ∑ f i ])
    foo12 {i} u v = transport! is-contr (ua (to-transp-equiv (Pos N) (cns-map-Œ∑ f i)))
      (=-preserves-level (pos-Œ∑-contr N (idx-map f i)))
-}
    contr-elim : (A : Set) (B : A ‚Üí Set) (A-contr : is-contr A) (d : B (contr-center A-contr)) (x : A) ‚Üí B x
    contr-elim A B A-contr d x = transport B (contr-path A-contr _) d

    htpy-naturality : {A B : Set}
      ‚Üí {f g : A ‚Üí B}
      ‚Üí (H : f ‚àº g)
      ‚Üí {x y : A} (p : x == y)
      ‚Üí ap f p ‚àô H y == H x ‚àô ap g p
    htpy-naturality H {x} idp = ! (‚àô-unit-r (H x))

    Œ†-pth : {A : Set} {B : A ‚Üí Set} {C : (x : A) ‚Üí B x ‚Üí Set}
      ‚Üí {x y : A}
      ‚Üí (f : Œ† (B x) (C x))
      ‚Üí (p : x == y)
      ‚Üí transport (Œª x ‚Üí Œ† (B x) (C x)) p f
        == Œª x ‚Üí transport (uncurry C) (pair= p (transp-‚Üì B p x)) (f (transport B (! p) x))
    Œ†-pth f idp = ‚Üì-Œ†-in  {!!}

    Œ∑-pos-is-contr : {M : ùïÑ} (i : Idx M) ‚Üí is-contr (Pos M (Œ∑ M i))
    Œ∑-pos-is-contr {M} i = has-level-in (Œ∑-pos M i , Œ∑-pos-elim M i (Œª p ‚Üí Œ∑-pos M i == p) idp)

    contr-has-all-paths-‚Üì : ‚àÄ {i j} {A : Set i} {B : A ‚Üí Set j} {x y : A} {p : x == y} {u : B x} {v : B y}
      {{_ : is-contr (B y)}} ‚Üí u == v [ B ‚Üì p ]
    contr-has-all-paths-‚Üì {p = idp} = contr-has-all-paths _ _

    Pb-map' : {A : Idx M ‚Üí Set} {B : Idx N ‚Üí Set}
      ‚Üí (g : {i : Idx M} ‚Üí A i ‚Üí B (idx-map f i))
      ‚Üí Pb M A ‚áõ Pb N B
    idx-map (Pb-map' g) (i , x) = idx-map f i , g x
    cns-map (Pb-map' {B = B} g) (c , ŒΩ) =
      let ŒΩ' p = transport B
                 (typ-map f c (<‚Äì (pos-map f c) p)
                   ‚àô ap (Typ N (cns-map f c)) (<‚Äì-inv-r (pos-map f c) p))
                 (g (ŒΩ (<‚Äì (pos-map f _) p)))

          foo : (p : Pos N (cns-map f c)) ‚Üí {!!} -- ŒΩ' p == g (ŒΩ ?)
          foo = {!!}
      in cns-map f c , ŒΩ' 
    pos-map (Pb-map' g) (c , _) = pos-map f c
    typ-map (Pb-map' {A = A} {B} g) (c , ŒΩ) p =
      let p' = <‚Äì (pos-map f c) (‚Äì> (pos-map f c) p)

          pth q = ap (Œª p ‚Üí idx-map f (Typ M c p)) (! (<‚Äì-inv-l (pos-map f c) p))
            ‚àô typ-map f c p'
            ‚àô q

          pth‚ÇÇ = typ-map f c p'
            ‚àô ap (Typ N (cns-map f c))
                 (<‚Äì-inv-r (pos-map f c) (‚Äì> (pos-map f c) p))

          htpy-nat-lem : {A B : Set}
            ‚Üí {f g : A ‚Üí B}
            ‚Üí (H : f ‚àº g)
            ‚Üí {x y : A} (p : x == y)
            ‚Üí ap f (! p) ‚àô H x ‚àô ap g p == H y
          htpy-nat-lem H = Œª { idp ‚Üí ‚àô-unit-r _ }
          
          pth‚ÇÉ =
            pth (ap (Typ N (cns-map f c)) (<‚Äì-inv-r (pos-map f c) (‚Äì> (pos-map f c) p)))
              =‚ü® ap pth (ap (ap (Typ N (cns-map f c))) (! (<‚Äì-inv-adj (pos-map f c) p)))  ‚ü©
            pth (ap (Typ N (cns-map f c)) (ap (‚Äì> (pos-map f c)) (<‚Äì-inv-l (pos-map f c) p)))
              =‚ü® ap pth (‚àò-ap (Typ N (cns-map f c)) (‚Äì> (pos-map f c)) (<‚Äì-inv-l (pos-map f c) p)) ‚ü©
            pth (ap (Œª p ‚Üí Typ N (cns-map f c) (‚Äì> (pos-map f c) p)) (<‚Äì-inv-l (pos-map f c) p))
              =‚ü® htpy-nat-lem (typ-map f c) (<‚Äì-inv-l (pos-map f c) p) ‚ü©
            typ-map f c p =‚àé

          P q = g (ŒΩ p) == transport B pth‚ÇÇ (g (ŒΩ p')) [ B ‚Üì q ]

          goal-aux : P (pth (ap (Typ N (cns-map f c))
                                (<‚Äì-inv-r (pos-map f c) (‚Äì> (pos-map f c) p)))) 
          goal-aux = ‚Üì-ap-in B _ (apd (g ‚àò ŒΩ) (! (<‚Äì-inv-l (pos-map f c) p)))
                     ‚àô·µà transp-‚Üì' B pth‚ÇÇ (g (ŒΩ p'))

          goal : P (typ-map f c p)
          goal = transport P pth‚ÇÉ goal-aux
          
      in pair= (typ-map f c p) goal
    cns-map-Œ∑ (Pb-map' {A = A} {B} g) (i , x) =
      let foo = {!!}

          P c = {!!} 

          goal : P (cns-map-Œ∑ f i)
          goal = {!!}

          pth : (p : Pos N (cns-map f (Œ∑ M i)))
            ‚Üí idx-map f i == Typ N (cns-map f (Œ∑ M i)) p
          pth p = (typ-map f (Œ∑ M i))
                   (<‚Äì (pos-map f (Œ∑ M i)) p)
                    ‚àô
                     ap (Typ N (cns-map f (Œ∑ M i)))
                      (<‚Äì-inv-r (pos-map f (Œ∑ M i)) p)

          pth2 : idx-map f i == Typ N (cns-map f (Œ∑ M i)) (‚Äì> (pos-map f (Œ∑ M i)) (Œ∑-pos M i))
          pth2 = typ-map f (Œ∑ M i)
                   (<‚Äì (pos-map f (Œ∑ M i)) (‚Äì> (pos-map f (Œ∑ M i)) (Œ∑-pos M i)))
                    ‚àô
                     ap (Typ N (cns-map f (Œ∑ M i)))
                      (<‚Äì-inv-r (pos-map f (Œ∑ M i)) (‚Äì> (pos-map f (Œ∑ M i)) (Œ∑-pos M i)))

          pth3 : idx-map f i == Typ N (cns-map f (Œ∑ M i)) (‚Äì> (pos-map f (Œ∑ M i)) (Œ∑-pos M i))
          pth3 = ap (idx-map f ‚àò (Typ M (Œ∑ M i))) (<‚Äì-inv-l (pos-map f (Œ∑ M i)) (Œ∑-pos M i)) ‚àô
                 typ-map f (Œ∑ M i) (Œ∑-pos M i)

          foo : {p : Pos N (cns-map f (Œ∑ M i))}
            ‚Üí {p' : Pos N (Œ∑ N (idx-map f i))}
            ‚Üí (q : p == p' [ (Pos N) ‚Üì (cns-map-Œ∑ f i) ])
            ‚Üí ap (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) q) == ! (pth p)
          foo = {!!}

          foo2 : {p : Pos N (cns-map f (Œ∑ M i))}
            ‚Üí (q : p == Œ∑-pos N (idx-map f i) [ (Pos N) ‚Üì (cns-map-Œ∑ f i) ])
            ‚Üí ap (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) q) == ! (pth p)
          foo2 = {!!}

          foo4 : ‚Äì> (pos-map f (Œ∑ M i)) (Œ∑-pos M i) == Œ∑-pos N (idx-map f i) [ (Pos N) ‚Üì (cns-map-Œ∑ f i) ]
          foo4 = {!!}

          foo3 : (q : ‚Äì> (pos-map f (Œ∑ M i)) (Œ∑-pos M i) == Œ∑-pos N (idx-map f i) [ (Pos N) ‚Üì (cns-map-Œ∑ f i) ])
            ‚Üí ap (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) q) == ! pth2
          foo3 = {!!} 


          

          goal4 : {t : Pos N (cns-map f (Œ∑ M i))}
            ‚Üí (q : t == Œ∑-pos N (idx-map f i) [ (Pos N) ‚Üì (cns-map-Œ∑ f i) ])
            ‚Üí (transport B
                (pth t)
                (g x)) ==
                (g x) [ uncurry (Œª a z ‚Üí B (Typ N a z)) ‚Üì pair= (cns-map-Œ∑ f i) q ]
          goal4 q = {!!}


          goal3 : {t : Pos N (cns-map f (Œ∑ M i))}
            ‚Üí {t' : Pos N (Œ∑ N (idx-map f i))}
            ‚Üí (q : t == t' [ (Pos N) ‚Üì (cns-map-Œ∑ f i) ])
            ‚Üí (transport B (pth t) (g x))
               == (g x) [ (uncurry (Œª a z ‚Üí B (Typ N a z))) ‚Üì pair= (cns-map-Œ∑ f i) q ]
          goal3 q = {!!} -- ‚Üì-ap-out B (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) q) (contr-has-all-paths-‚Üì ‚¶É {!Œ∑-pos-is-contr!} ‚¶Ñ)


          goal2 : (Œª p ‚Üí transport B (pth p) (g x))
                  == cst (g x)
                  [ (Œª c ‚Üí (p : Pos N c) ‚Üí B (Typ N c p)) ‚Üì cns-map-Œ∑ f i ]
          goal2 = ‚Üì-Œ†-in goal3 
      in pair= (cns-map-Œ∑ f i) goal2
  {-
    cns-map-Œ∑ (Pb-map' A B g) (i , x) =
      let {- foo9 : (u : Pos N (cns-map f (Œ∑ M i))) (v : Pos N (Œ∑ N (idx-map f i)))
            ‚Üí u == v [ Pos N ‚Üì cns-map-Œ∑ f i ]
          foo9 u v = from-transp (Pos N) (cns-map-Œ∑ f i) (contr-has-all-paths ‚¶É pos-Œ∑-contr N (idx-map f i) ‚¶Ñ _ _)
{-
          foo13 : (i : Idx M) (c : Cns M i) (p : Pos M c)
            ‚Üí idx-map f (Typ M c p) == Typ N (cns-map f c) (‚Äì> (pos-map f c) p)
          foo13 = {!idx-map !}

          foo12 : Typ N (cns-map f (Œ∑ M i)) (‚Äì> (pos-map f _) (Œ∑-pos M i))
                  == idx-map f i -- Typ N (Œ∑ N (idx-map f i)) (Œ∑-pos N (idx-map f i))
          foo12 = ap (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) (Œ∑-pos-map i))
-}
          foo11 : _==_ {A = idx-map f i == Typ N (cns-map f (Œ∑ M i)) (‚Äì> (pos-map f _) (Œ∑-pos M i))}
              (typ-map f (Œ∑ M i) (Œ∑-pos M i))
              (! (ap (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) (Œ∑-pos-map i))))
          foo11 = {!!}

          foo10 : _==_ {A = idx-map f i == Typ N (cns-map f (Œ∑ M i)) (‚Äì> (pos-map f _) (Œ∑-pos M i))}
                (typ-map f (Œ∑ M i) (<‚Äì (pos-map f (Œ∑ M i)) (‚Äì> (pos-map f _) (Œ∑-pos M i))) ‚àô ap (Typ N (cns-map f (Œ∑ M i))) (<‚Äì-inv-r (pos-map f (Œ∑ M i)) (‚Äì> (pos-map f _) (Œ∑-pos M i))))
              (! (ap (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) (Œ∑-pos-map i))))
          foo10 = {!!}

          foo6 : {u : Pos N (cns-map f (Œ∑ M i))} {v : Pos N (Œ∑ N (idx-map f i))}
            ‚Üí (q : u == v [ Pos N ‚Üì cns-map-Œ∑ f i ])
            ‚Üí _==_ {A = idx-map f i == Typ N (cns-map f (Œ∑ M i)) u}
              (typ-map f (Œ∑ M i) (<‚Äì (pos-map f (Œ∑ M i)) u) ‚àô ap (Typ N (cns-map f (Œ∑ M i))) (<‚Äì-inv-r (pos-map f (Œ∑ M i)) u))
              (! (ap (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) q)))
          foo6 q = {!transport  !}

          foo5 : {u : Pos N (cns-map f (Œ∑ M i))} {v : Pos N (Œ∑ N (idx-map f i))}
            ‚Üí (q : u == v [ Pos N ‚Üì cns-map-Œ∑ f i ])
            ‚Üí transport B (typ-map f (Œ∑ M i) (<‚Äì (pos-map f (Œ∑ M i)) u)
                ‚àô ap (Typ N (cns-map f (Œ∑ M i))) (<‚Äì-inv-r (pos-map f (Œ∑ M i)) u)) (g x)
              == g x [ B ‚Üì ap (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) q) ]
          foo5 {u} {v} q = transport! (Œª p ‚Üí transport B p (g x) == g x [ B ‚Üì ap (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) q) ])  (foo6 q) (transp-‚Üì B (ap (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) q)) (g x))

          foo4 : {u : Pos N (cns-map f (Œ∑ M i))} {v : Pos N (Œ∑ N (idx-map f i))}
            ‚Üí (q : u == v [ Pos N ‚Üì cns-map-Œ∑ f i ])
            ‚Üí transport B (typ-map f (Œ∑ M i) (<‚Äì (pos-map f (Œ∑ M i)) u) ‚àô ap (Typ N (cns-map f (Œ∑ M i))) (<‚Äì-inv-r (pos-map f (Œ∑ M i)) u)) (g x)
              == g x [ (Œª { (x , u) ‚Üí B (Typ N x u) }) ‚Üì pair= (cns-map-Œ∑ f i) q ]
          foo4 q = ‚Üì-ap-out B (uncurry (Typ N)) (pair= (cns-map-Œ∑ f i) q) (foo5 q)
-}
          foo : (Œª p ‚Üí transport B (typ-map f (Œ∑ M i) (<‚Äì (pos-map f (Œ∑ M i)) p) ‚àô ap (Typ N (cns-map f (Œ∑ M i))) (<‚Äì-inv-r (pos-map f (Œ∑ M i)) p)) (g x))
                == (Œª _ ‚Üí g x) [ (Œª c ‚Üí (p : Pos N c) ‚Üí B (Typ N c p)) ‚Üì cns-map-Œ∑ f i ]
          foo = ‚Üì-Œ†-in {!!} -- foo4
          
           
      in pair= (cns-map-Œ∑ f i) foo
    cns-map-Œº (Pb-map' A B g) {i} (c , c‚ÇÅ) Œ¥ =
      let 
{-
          bar3 : (p : Pos N (cns-map f c)) ‚Üí transport (Cns N)
            (typ-map f c (is-equiv.g (snd (pos-map f c)) p) ‚àô ap (Typ N (cns-map f c)) (is-equiv.f-g (snd (pos-map f c)) p))
            (cns-map f (fst (Œ¥ (is-equiv.g (snd (pos-map f c)) p))))
            == transport (Cns N)
            (typ-map f c (is-equiv.g (snd (pos-map f c)) p))
            (cns-map f (fst (Œ¥ (is-equiv.g (snd (pos-map f c)) p))))
          bar3 p = ?
  -}      

          foo : (p : Pos N (cns-map f c))
              ‚Üí transport (Cns N) (typ-map f c (<‚Äì (pos-map f c) p) ‚àô ap (Typ N (cns-map f c)) (<‚Äì-inv-r (pos-map f c) p)) (cns-map f (fst (Œ¥ (<‚Äì (pos-map f c) p))))
                == fst (transport (Cns (Pb N B))
                                  (typ-map (Pb-map' A B g) {i} (c , c‚ÇÅ) (<‚Äì (pos-map (Pb-map' A B g) {i} (c , c‚ÇÅ)) p) ‚àô ap (Typ (Pb N B) {idx-map (Pb-map' A B g) i} (cns-map (Pb-map' A B g) {i} (c , c‚ÇÅ))) (<‚Äì-inv-r (pos-map (Pb-map' A B g) {i} (c , c‚ÇÅ)) p))
                                  (cns-map (Pb-map' A B g) {Typ M c (<‚Äì (pos-map f c) p) , c‚ÇÅ _} (Œ¥ (<‚Äì (pos-map (Pb-map' A B g) {i} (c , c‚ÇÅ)) p))))
                                  
          foo p = {!!} {-
            let bar1 = typ-map f c (is-equiv.g (snd (pos-map f c)) p)
                       ‚àô ap (Typ N (cns-map f c)) (is-equiv.f-g (snd (pos-map f c)) p)
                bar2 = 
               {- bar2 = _ ‚àô ap (Œª p‚ÇÅ ‚Üí transport B
                  (typ-map f c (is-equiv.g (snd (pos-map f c)) p‚ÇÅ) ‚àô
                  ap (Typ N (cns-map f c)) (is-equiv.f-g (snd (pos-map f c)) p‚ÇÅ))
                  (g (c‚ÇÅ (is-equiv.g (snd (pos-map f c)) p‚ÇÅ)))) (<‚Äì-inv-r (pos-map f c) p) -}
                u = cns-map f (fst (Œ¥ (<‚Äì (pos-map f c) p))) 
            in transport (Cns N)
                 bar1
                 u
                 =‚ü® foo3 _ _ _ _ ‚ü©
               fst (transport (Cns‚Çö N B) (pair= bar1 {!!}) (u , _))
               =‚ü® ap (Œª x ‚Üí fst (transport (Cns‚Çö N B) {!!} {!!})) (! (Œ£-‚àô {!!} {!!})) ‚ü©
               fst (transport (Cns‚Çö N B) (pair= {!!} {!!} ‚àô pair= {!!} {!!}) (u , _))
               =‚ü® {!!} ‚ü©
               fst (transport (Cns‚Çö N B) (pair= {!!} {!!} ‚àô pair= {!!} {!!}) (u , _)) =‚àé -}
      in {!!} -- pair= (cns-map-Œº f c (fst ‚àò Œ¥) ‚àô  ap (Œº N (cns-map f c)) (Œª= foo)) {!!}
-}
    cns-map‚Çõ : {i : Idx‚Çõ M} ‚Üí Cns‚Çõ M i ‚Üí Cns‚Çõ N (idx-map f (fst i) , cns-map f (snd i))
    cns-map‚Çõ (lf i) = transport (Œª x ‚Üí Cns‚Çõ N (idx-map f i , x)) (! (cns-map-Œ∑ f i)) (lf (idx-map f i))
    cns-map‚Çõ {.(_ , Œº M c Œ¥)} (nd c Œ¥ Œµ) =
      let hyp p = cns-map‚Çõ (Œµ p)
            
          Œ¥‚ÇÅ p = cns-map f (Œ¥ (<‚Äì (pos-map f c) p ))
                 |> transport (Cns N)
                              ((typ-map f c (<‚Äì (pos-map f _) p)
                                ‚àô ap (Typ N (cns-map f c)) (<‚Äì-inv-r (pos-map f c) p)))

          Œµ‚ÇÅ p = cns-map‚Çõ (Œµ (<‚Äì (pos-map f c) p))
                 |> transport (Pd N)
                              (pair= (typ-map f c _
                                     ‚àô ap (Typ N (cns-map f c)) (<‚Äì-inv-r (pos-map f c) p))
                                     (transp-‚Üì' _ _ _))
      in nd (cns-map f c) Œ¥‚ÇÅ Œµ‚ÇÅ
         |> transport (Œª x ‚Üí Cns‚Çõ N (idx-map f _ , x))
                      (! (cns-map-Œº f c Œ¥))
                          

    pos-map‚Çõ : {i : Idx‚Çõ M} (c : Cns‚Çõ M i) ‚Üí Pos‚Çõ M c ‚âÉ Pos‚Çõ N (cns-map‚Çõ c)
    pos-map‚Çõ {i} c = g c , is-eq (g c) (h c) (g-h c) (h-g c)
      where g : {i : Idx‚Çõ M} (c : Cns‚Çõ M i) ‚Üí Pos‚Çõ M c ‚Üí Pos‚Çõ N (cns-map‚Çõ c)
            g (lf i) ()
            g {i , _} (nd c Œ¥ Œµ) (inl x) = coe (! (C-transp' {B = (Œª x‚ÇÅ ‚Üí Cns‚Çõ N (idx-map f i , x‚ÇÅ))} (Pos‚Çõ N) (cns-map-Œº f c Œ¥) _)) (inl x)
            g {i , _} (nd c Œ¥ Œµ) (inr (p , q)) =
              let q' = coe! (C-transp'' {B = Cns‚Çõ N} (Pos‚Çõ N) _ (cns-map‚Çõ (Œµ (<‚Äì (pos-map f c) (‚Äì> (pos-map f c) p)))))
                            (transport! (Pos‚Çõ N ‚àò cns-map‚Çõ ‚àò Œµ) (<‚Äì-inv-l (pos-map f c) p) (g _ q))
              in coe! (C-transp' {B = (Œª x‚ÇÅ ‚Üí Cns‚Çõ N (idx-map f i , x‚ÇÅ))} (Pos‚Çõ N) (cns-map-Œº f c Œ¥) _)
                      (inr (‚Äì> (pos-map f c) p , q'))

            h : {i : Idx‚Çõ M} (c : Cns‚Çõ M i) ‚Üí Pos‚Çõ N (cns-map‚Çõ c) ‚Üí Pos‚Çõ M c
            h (lf i) p = coe (C-transp'' (Pos‚Çõ N) (! (cns-map-Œ∑ f i)) (lf (idx-map f i))) p
            h (nd c Œ¥ Œµ) p with coe (C-transp'' (Pos‚Çõ N) (! (cns-map-Œº f c Œ¥)) _) p
            ... | inl x = inl x
            ... | inr (p' , q) =
              let q' = h (Œµ (<‚Äì (pos-map f c) p')) (coe (C-transp'' (Pos‚Çõ N) _ (cns-map‚Çõ (Œµ (<‚Äì (pos-map f c) p')))) q)
              in inr (<‚Äì (pos-map f c) p' , q')

            g-h : {i : Idx‚Çõ M} (c : Cns‚Çõ M i) ‚Üí (g c) ‚àò (h c) ‚àº idf _
            g-h (lf i) p = ‚ä•-elim {P = Œª _ ‚Üí g (lf i) (h (lf i) p) == p} (coe (C-transp'' (Pos‚Çõ N) (! (cns-map-Œ∑ f i)) (lf (idx-map f i))) p)
            g-h (nd c Œ¥ Œµ) p with coe (C-transp'' (Pos‚Çõ N) (! (cns-map-Œº f c Œ¥)) _) p
            ... | inl x = {!C-transp'' ? ? ?!}
            ... | inr (p' , q) = {!!}

            h-g : {i : Idx‚Çõ M} (c : Cns‚Çõ M i) ‚Üí (h c) ‚àò (g c) ‚àº idf _
            h-g (nd c Œ¥ Œµ) (inl x) = {!!}
            h-g (nd c Œ¥ Œµ) (inr (p , q)) = {!!}
              
    Slice-map : Slice M ‚áõ Slice N 
    idx-map Slice-map (i , c) = idx-map f i , cns-map f c
    cns-map Slice-map = cns-map‚Çõ
{-  pos-map Slice-map = pos-map‚Çõ
    typ-map Slice-map c p =
      let foo : idx-map f (fst (Typ‚Çõ M c p)) == fst (Typ‚Çõ N (cns-map‚Çõ c) (‚Äì> (pos-map‚Çõ c) p))
          foo = foo11 _ _ _
      in pair= foo {!!}
      where foo11 : (i : Idx‚Çõ M) (c : Pd M i) (p : Pos‚Çõ M c) ‚Üí idx-map f (fst (Typ‚Çõ M c p)) == fst (Typ‚Çõ N (cns-map‚Çõ c) (‚Äì> (pos-map‚Çõ c) p))
            foo11 .(_ , Œº M c Œ¥) (nd c Œ¥ Œµ) (inl x) = {!!}
            foo11 .(_ , Œº M c Œ¥) (nd c Œ¥ Œµ) (inr (p , q)) =
              let hyp = foo11 _ (Œµ p) q
              in {!!}
    cns-map-Œ∑ Slice-map = {!!}
    cns-map-Œº Slice-map = {!!}
  -}


  -- OpetopicType is contrafunctorial
  {-# TERMINATING #-}
  OpType-map : {M N : ùïÑ}
    ‚Üí (f : M ‚áõ N)
    ‚Üí OpetopicType N
    ‚Üí OpetopicType M
  Ob (OpType-map f X) x = Ob X (idx-map f x)
  Hom (OpType-map f X) = OpType-map (Slice-map (Pb-map' f (idf _))) (Hom X)


  Op= : {M : ùïÑ}
    ‚Üí {A B : Idx M ‚Üí Set}
    ‚Üí {X : OpetopicType (Slice (Pb M A))}
    ‚Üí {Y : OpetopicType (Slice (Pb M B))}
    ‚Üí (Ob= : A == B)
    ‚Üí (Hom= : X == Y [ (Œª X ‚Üí OpetopicType (Slice (Pb M X))) ‚Üì Ob= ])
    ‚Üí record { Ob = A ; Hom = X } == record { Ob = B ; Hom = Y }
  Op= idp idp = idp

  OpType-unit : {M : ùïÑ}
    ‚Üí OpType-map (idmap M) ‚àº idf (OpetopicType M)
  OpType-unit {M} x = {! Op= idp idp !}

  OpType-comp : {A B C : ùïÑ}
    ‚Üí (g : B ‚áõ C) (f : A ‚áõ B)
    ‚Üí OpType-map (g ‚àò‚Çò f) ‚àº OpType-map f ‚àò OpType-map g
  OpType-comp = {!!}

