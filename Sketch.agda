{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver
open import Pb
open import Algebricity
open import SliceUnfold

module Sketch where

  module _ (M : ùïÑ) (M‚Üì : ùïÑ‚Üì M) (is-alg : is-algebraic M M‚Üì) where

    module WitEqv (X‚ÇÅ : Rel‚ÇÅ M (Idx‚Üì M‚Üì)) (is-fib-X‚ÇÅ : is-fib‚ÇÅ M X‚ÇÅ)
             (X‚ÇÅ-is-alg : (i : Idx M) (c : Cns M i)
               ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Idx‚Üì M‚Üì (Typ M c p))
               ‚Üí X‚ÇÅ ((i , idx (contr-center (is-alg i c ŒΩ))) , c , ŒΩ)) where

      open ExtUnfold M M‚Üì 

      -- The above induces an equivalence by fibrancy
      wit-equiv : (i : Idx M) (j : Idx‚Üì M‚Üì i) (c : Cns M i)
          ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Idx‚Üì M‚Üì (Typ M c p))
          ‚Üí X‚ÇÅ ((i , j) , (c , ŒΩ)) ‚âÉ ‚ÜìRel‚ÇÅ ((i , j) , (c , ŒΩ))
      wit-equiv i j c ŒΩ = equiv to from {!!} {!!} 

        where to : X‚ÇÅ ((i , j) , c , ŒΩ) ‚Üí ‚ÜìRel‚ÇÅ ((i , j) , c , ŒΩ)
              to x‚ÇÅ = (idx Œ± , fst= pth) , cns Œ± , app= (typ Œ±)

                where Œ± : alg-comp M M‚Üì i c ŒΩ
                      Œ± = contr-center (is-alg i c ŒΩ)

                      pth : (idx Œ± , X‚ÇÅ-is-alg i c ŒΩ) == (j , x‚ÇÅ) 
                      pth = contr-has-all-paths ‚¶É is-fib-X‚ÇÅ i c ŒΩ ‚¶Ñ (idx Œ± , X‚ÇÅ-is-alg i c ŒΩ) (j , x‚ÇÅ)

              from : ‚ÜìRel‚ÇÅ ((i , j) , c , ŒΩ) ‚Üí X‚ÇÅ ((i , j) , c , ŒΩ)
              from ((j' , j'=j) , d , t) = transport (Œª x ‚Üí X‚ÇÅ ((i , x) , c , ŒΩ))
                (ap idx (contr-path (is-alg i c ŒΩ) Œ±) ‚àô j'=j) x‚ÇÅ 

                where Œ± : alg-comp M M‚Üì i c ŒΩ
                      Œ± = ‚ü¶ j' ‚à£ d ‚à£ Œª= t ‚üß 

                      x‚ÇÅ : X‚ÇÅ ((i , idx (contr-center (is-alg i c ŒΩ))) , c , ŒΩ)
                      x‚ÇÅ = X‚ÇÅ-is-alg i c ŒΩ

    module _ (X‚ÇÅ : Rel‚ÇÅ M (Idx‚Üì M‚Üì)) (is-fib-X‚ÇÅ : is-fib‚ÇÅ M X‚ÇÅ)
             (X‚ÇÅ-is-alg : (i : Idx M) (c : Cns M i)
               ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Idx‚Üì M‚Üì (Typ M c p))
               ‚Üí X‚ÇÅ ((i , idx (contr-center (is-alg i c ŒΩ))) , c , ŒΩ))
             (X‚ÇÇ : Rel‚ÇÇ M X‚ÇÅ) (is-fib-X‚ÇÇ : is-fib‚ÇÇ M X‚ÇÇ) where

      open ExtUnfold M M‚Üì 
      open WitEqv X‚ÇÅ is-fib-X‚ÇÅ X‚ÇÅ-is-alg
      
      Œ∑-el : (i : Idx M) (j : Idx‚Üì M‚Üì i)
        ‚Üí X‚ÇÅ ((i , j) , Œ∑ M i , cst j)
      Œ∑-el i j = <‚Äì (wit-equiv i j (Œ∑ M i) (cst j)) ((j , idp) , Œ∑‚Üì M‚Üì j , cst idp) 

      -- wit-equiv : (i : Idx M) (j : Idx‚Üì M‚Üì i) (c : Cns M i)
      --     ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Idx‚Üì M‚Üì (Typ M c p))
      --     ‚Üí X‚ÇÅ ((i , j) , (c , ŒΩ)) ‚âÉ ‚ÜìRel‚ÇÅ ((i , j) , (c , ŒΩ))

      by-fib : (i : Idx M) (j : Idx‚Üì M‚Üì i)
        ‚Üí Œ£ (X‚ÇÅ ((i , j) , Œ∑ M i , cst j))
          (Œª x‚ÇÅ ‚Üí X‚ÇÇ ((((i , j) , Œ∑ M i , cst j) , x‚ÇÅ) , lf (i , j) , ‚ä•-elim))
      by-fib i j = contr-center (is-fib-X‚ÇÇ ((i , j) , Œ∑ M i , cst j) (lf (i , j)) ‚ä•-elim) 

      done-if : (i : Idx M) (j : Idx‚Üì M‚Üì i)
        ‚Üí fst (by-fib i j) == Œ∑-el i j
      done-if i j = {!!} 

      -- from-ft : (i : Idx M) (j j' : Idx‚Üì M‚Üì i)
      --   ‚Üí Œ£ (Cns‚Üì M‚Üì j' (Œ∑ M i)) (Œª d ‚Üí Typ‚Üì M‚Üì d == cst j) ‚âÉ (j == j')

      -- Now.  The goal is to show that we have a null-homotopy of
      -- the image of Œ∑ under the above equivalence.
      goal : (i : Idx M) (j : Idx‚Üì M‚Üì i)
        ‚Üí X‚ÇÇ ((((i , j) , Œ∑ M i , cst j) , Œ∑-el i j) , lf (i , j) , ‚ä•-elim)
      goal i j = transport (Œª x ‚Üí X‚ÇÇ ((((i , j) , Œ∑ M i , cst j) , x) , lf (i , j) , ‚ä•-elim))
                           (done-if i j) (snd (by-fib i j)) 
