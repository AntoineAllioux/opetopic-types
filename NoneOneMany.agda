{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver
open import Algebricity
open import Pb
open import Finitary
open import AlgEqvElim
open import FibEquiv

module NoneOneMany where

  module _ (M : ùïÑ) (M‚Üì : ùïÑ‚Üì M) (is-alg : is-algebraic M M‚Üì) (M-fin : is-finitary M) where

    open import SliceAlg M M‚Üì 
    open import SliceUnfold M 
    open ExtUnfold M‚Üì

    module Fibs (X‚ÇÇ : Rel‚ÇÇ ‚ÜìRel‚ÇÅ) (is-fib-X‚ÇÇ : is-fib‚ÇÇ X‚ÇÇ) (alg-fib : AlgFib M M‚Üì X‚ÇÇ is-fib-X‚ÇÇ)
                (X‚ÇÉ : Rel‚ÇÉ X‚ÇÇ) (is-fib-X‚ÇÉ : is-fib‚ÇÉ X‚ÇÉ) where

      open AlgFib alg-fib

      module X‚ÇÇ-struct = AlgStruct M M‚Üì (Idx‚Üì M‚Üì) (‚ÜìRel‚ÇÅ) X‚ÇÇ is-fib-X‚ÇÇ
      module X‚ÇÉ-struct = AlgStruct ExtSlc‚ÇÅ ExtSlc‚Üì‚ÇÅ ‚ÜìRel‚ÇÅ X‚ÇÇ X‚ÇÉ is-fib-X‚ÇÉ

      alg-eqv-to : (i : Idx ExtSlc‚ÇÇ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÇ i ‚Üí X‚ÇÇ i 

      module NdLemmas
          (i : Idx M)
          (j : Idx‚Üì M‚Üì i) (c : Cns M i)
          (ŒΩ : (p : Pos M c) ‚Üí Idx‚Üì M‚Üì (Typ M c p))
          (Œ¥ : (p : Pos ExtPlbk‚ÇÅ {i = i , j} (c , ŒΩ))
               ‚Üí Cns ExtPlbk‚ÇÅ (Typ ExtPlbk‚ÇÅ {i = i , j} (c , ŒΩ) p))
          (Œµ : (p : Pos ExtPlbk‚ÇÅ {i = i , j} (c , ŒΩ))
               ‚Üí Cns ExtSlc‚ÇÅ (Typ ExtPlbk‚ÇÅ {i = i , j} (c , ŒΩ) p , Œ¥ p)) 
          (œï : (p : Pos ExtSlc‚ÇÅ (nd {i = i , j} (c , ŒΩ) Œ¥ Œµ))
               ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ (Typ ExtSlc‚ÇÅ (nd {i = i , j} (c , ŒΩ) Œ¥ Œµ) p)) 
          (c‚Üì : Cns‚Üì M‚Üì j c)
          (ŒΩ‚Üì : (p : Pos M c) ‚Üí Typ‚Üì M‚Üì c‚Üì p == ŒΩ p) 
          (Œ¥‚Üì : (p : Pos M c) ‚Üí Cns‚Üì ExtPlbk‚Üì‚ÇÅ (Typ‚Üì ExtPlbk‚Üì‚ÇÅ {i‚Üì = j , idp} (c‚Üì , ŒΩ‚Üì) p) (Œ¥ p)) 
          (Œµ‚Üì : (p : Pos M c) ‚Üí Cns‚Üì ExtSlc‚Üì‚ÇÅ (Typ‚Üì ExtPlbk‚Üì‚ÇÅ {i‚Üì = j , idp} (c‚Üì , ŒΩ‚Üì) p , Œ¥‚Üì p) (Œµ p))
          (œï‚Üì : (p : Pos ExtSlc‚ÇÅ (nd {i = i , j} (c , ŒΩ) Œ¥ Œµ))
                ‚Üí Typ‚Üì ExtSlc‚Üì‚ÇÅ (nd‚Üì {i‚Üì = j , idp} (c‚Üì , ŒΩ‚Üì) Œ¥‚Üì Œµ‚Üì) p == œï p) where

        open DecPred
        
        Œµ-has-node : DecPred (Pos M c) 
        P Œµ-has-node p = is-node (Œµ p)
        P-is-prop Œµ-has-node p = Trunc-level
        P-is-dec Œµ-has-node p = slice-is-dec (Œµ p)
        
        Œµ-form : SomeOrNone (Pos M c) Œµ-has-node
        Œµ-form = is-fin-disc (Pos M c) (M-fin c) Œµ-has-node 

        GoalIdx : Idx ExtSlc‚ÇÇ
        GoalIdx = ((((i , j) , Œº ExtPlbk‚ÇÅ {i = i , j} (c , ŒΩ) Œ¥) ,
                    ((j , idp) , Œº‚Üì ExtPlbk‚Üì‚ÇÅ {i‚Üì = j , idp} (c‚Üì , ŒΩ‚Üì) Œ¥‚Üì)) ,
                    nd (c , ŒΩ) Œ¥ Œµ , œï)
                    
        Goal : Set
        Goal = X‚ÇÇ GoalIdx 

        module IsCorolla (Œµ-is-lf : (p : Pos M c) ‚Üí ¬¨ (is-node (Œµ p))) where

          CorollaIdx : Idx ExtSlc‚ÇÇ
          CorollaIdx = ((((i , j) , c , ŒΩ) , œï true) ,
                         Œ∑ ExtPlbk‚ÇÇ (((i , j) , c , ŒΩ) ,
                         œï true))

          CorollaX‚ÇÇ : X‚ÇÇ CorollaIdx
          CorollaX‚ÇÇ = X‚ÇÉ-struct.Œ∑X ((i , j) , c , ŒΩ) (œï (inl unit))
                       
          postulate

            corolla= : CorollaIdx == GoalIdx

          corolla-case : Goal
          corolla-case = transport X‚ÇÇ corolla= CorollaX‚ÇÇ 

        module HasDescendent (Œµ-nd : Trunc ‚ü®-1‚ü© (Œ£ (Pos M c) (Œª p ‚Üí is-node (Œµ p)))) where

          -- Here are the elements we get from the induction hypothesis.
          descendant-ih-idx : (p : Pos M c) ‚Üí Idx ExtSlc‚ÇÇ
          descendant-ih-idx p = (((Typ M c p , ŒΩ p) , Œ¥ p) ,
                                  (Typ‚Üì M‚Üì c‚Üì p , ŒΩ‚Üì p) , Œ¥‚Üì p) ,
                                   Œµ p , Œª q ‚Üí œï (inr (p , q)) 

          descendant-ih : (p : Pos M c) ‚Üí X‚ÇÇ (descendant-ih-idx p)
          descendant-ih p = alg-eqv-to (descendant-ih-idx p)
            ((((Typ‚Üì M‚Üì c‚Üì p , ŒΩ‚Üì p) , Œ¥‚Üì p) , idp) , Œµ‚Üì p , Œª q ‚Üí œï‚Üì (inr (p , q)))

          --
          --  Arguments to X‚ÇÉ-struct.ŒºX
          --

          desc-i : Idx ExtSlc‚ÇÅ
          desc-i = ((i , j) , Œº ExtPlbk‚ÇÅ {i = i , j} (c , ŒΩ) Œ¥)

          desc-c : Cns ExtSlc‚ÇÅ desc-i
          desc-c = X‚ÇÇ-struct.ŒºX-tr i c ŒΩ Œ¥ j ((j , idp) , c‚Üì , ŒΩ‚Üì) (Œª p ‚Üí (Typ‚Üì M‚Üì c‚Üì p , ŒΩ‚Üì p) , Œ¥‚Üì p)

          desc-ŒΩ : (p : Pos ExtSlc‚ÇÅ desc-c) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ (Typ ExtSlc‚ÇÅ desc-c p)
          desc-ŒΩ = X‚ÇÇ-struct.Œ∏X i c ŒΩ Œ¥ j ((j , idp) , c‚Üì , ŒΩ‚Üì) (Œª p ‚Üí (Typ‚Üì M‚Üì c‚Üì p , ŒΩ‚Üì p) , Œ¥‚Üì p)

          desc-Œ¥ : (p : Pos ExtSlc‚ÇÅ desc-c) ‚Üí Cns ExtPlbk‚ÇÇ (Typ ExtSlc‚ÇÅ desc-c p , desc-ŒΩ p)
          desc-Œ¥ true = Œ∑ ExtSlc‚ÇÅ ((i , j) , c , ŒΩ) , Œ∑-dec ExtSlc‚ÇÅ (Idx‚Üì ExtSlc‚Üì‚ÇÅ) (œï true) 
          desc-Œ¥ (inr (p , true)) = Œµ p , Œª q' ‚Üí œï (inr (p , q')) 

          desc-x‚ÇÄ : Idx‚Üì ExtSlc‚Üì‚ÇÅ ((i , j) , Œº ExtPlbk‚ÇÅ {i = i , j} (c , ŒΩ) Œ¥)
          desc-x‚ÇÄ = X‚ÇÇ-struct.ŒºX i c ŒΩ Œ¥ j ((j , idp) , c‚Üì , ŒΩ‚Üì) (Œª p ‚Üí (Typ‚Üì M‚Üì c‚Üì p , ŒΩ‚Üì p) , Œ¥‚Üì p)

          desc-x‚ÇÅ : X‚ÇÇ ((desc-i , desc-x‚ÇÄ) , desc-c , desc-ŒΩ)
          desc-x‚ÇÅ = X‚ÇÇ-struct.ŒºX-fill i c ŒΩ Œ¥ j ((j , idp) , c‚Üì , ŒΩ‚Üì) (Œª p ‚Üí (Typ‚Üì M‚Üì c‚Üì p , ŒΩ‚Üì p) , Œ¥‚Üì p)

          desc-Œ¥‚Üì : (p : Pos ExtSlc‚ÇÅ desc-c) ‚Üí X‚ÇÇ ((Typ ExtSlc‚ÇÅ desc-c p , desc-ŒΩ p) , desc-Œ¥ p)
          desc-Œ¥‚Üì true = transport! (Œª h ‚Üí X‚ÇÇ ((((i , j) , c , ŒΩ) , h) , desc-Œ¥ true ))
                                    (œï‚Üì (inl unit)) (X‚ÇÉ-struct.Œ∑X ((i , j) , c , ŒΩ) (œï true))
          desc-Œ¥‚Üì (inr (p , true)) = descendant-ih p


          postulate

            -- The actual definition here takes a super long time to typecheck ...
            descendant-Œº : X‚ÇÇ ((((i , j) , Œº ExtPlbk‚ÇÅ {i = i , j} (c , ŒΩ) Œ¥) , desc-x‚ÇÄ) ,
                                    Œº ExtPlbk‚ÇÇ {i = desc-i , desc-x‚ÇÄ} (desc-c , desc-ŒΩ) desc-Œ¥)
            -- descendant-Œº = X‚ÇÉ-struct.ŒºX desc-i desc-c desc-ŒΩ desc-Œ¥
            --                             desc-x‚ÇÄ desc-x‚ÇÅ desc-Œ¥‚Üì

            -- This should be true generically because of the form of the substitution.
            -- Question: do we need to use that there is a non-trivial attachment to make this true?
            desc-nd-eq : (nd (c , ŒΩ) Œ¥ Œµ , œï) == Œº ExtPlbk‚ÇÇ {i = desc-i , desc-x‚ÇÄ} (desc-c , desc-ŒΩ) desc-Œ¥

          from-nd-hyp : (j , idp) , Œº‚Üì ExtPlbk‚Üì‚ÇÅ {i‚Üì = j , idp} (c‚Üì , ŒΩ‚Üì) Œ¥‚Üì == desc-x‚ÇÄ
          from-nd-hyp = nd-hyp (i , j) (c , ŒΩ) Œ¥ (j , idp) (c‚Üì , ŒΩ‚Üì) Œ¥‚Üì

          descendant-case : Goal
          descendant-case = transport! (Œª h ‚Üí X‚ÇÇ ((((i , j) , Œº ExtPlbk‚ÇÅ {i = i , j} (c , ŒΩ) Œ¥) , fst h) , snd h))
                                      (pair√ó= from-nd-hyp desc-nd-eq) descendant-Œº 

        goal : Goal
        goal = Coprod-rec HasDescendent.descendant-case
                          IsCorolla.corolla-case Œµ-form


      -- alg-eqv-to : (i : Idx ExtSlc‚ÇÇ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÇ i ‚Üí X‚ÇÇ i 
      alg-eqv-to ((((i , j) , ._ , ._) , (.j , idp) , ._ , ._) , lf .(i , j) , œï) ((._ , idp) , lf‚Üì .(j , idp) , œï‚Üì) =
        transport! (Œª h ‚Üí X‚ÇÇ ((i‚Çõ , h) , lf (i , j) , œï)) j‚Çõ=j‚Çõ' (snd (contr-center (is-fib-X‚ÇÇ i‚Çõ (lf (i , j)) œï)))

        where i‚Çõ : Idx ExtSlc‚ÇÅ
              i‚Çõ = (i , j) , Œ∑ M i , Œ∑-dec M (Idx‚Üì M‚Üì) j

              j‚Çõ : Idx‚Üì ExtSlc‚Üì‚ÇÅ i‚Çõ
              j‚Çõ = (j , idp) , (Œ∑‚Üì M‚Üì j , Œ∑‚Üì-dec M‚Üì (Œª i j k ‚Üí j == k) idp)

              j‚Çõ' : Idx‚Üì ExtSlc‚Üì‚ÇÅ i‚Çõ
              j‚Çõ' = fst (contr-center (is-fib-X‚ÇÇ i‚Çõ (lf (i , j)) œï))

              j‚Çõ=j‚Çõ' : j‚Çõ == j‚Çõ'
              j‚Çõ=j‚Çõ' = lf-hyp (i , j) (j , idp) ‚àô
                       -- have to fix the fact that œï ‚â† ‚ä•-elim definitionally ...
                       ap (Œª h ‚Üí fst (contr-center (is-fib-X‚ÇÇ i‚Çõ (lf (i , j)) h))) (Œª= (Œª { () })) 

      alg-eqv-to ((((i , j) , ._ , ._) , (.j , idp) , ._ , ._) , nd (c , ŒΩ) Œ¥ Œµ , œï) ((._ , idp) , nd‚Üì (c‚Üì , ŒΩ‚Üì) Œ¥‚Üì Œµ‚Üì , œï‚Üì) = goal
        where open NdLemmas i j c ŒΩ Œ¥ Œµ œï c‚Üì ŒΩ‚Üì Œ¥‚Üì Œµ‚Üì œï‚Üì 

      postulate
      
        alg-eqv-is-equiv : (i : Idx ExtSlc‚ÇÇ) ‚Üí is-equiv (alg-eqv-to i)
  
      -- alg-eqv : AlgEqv ExtSlc‚ÇÅ ExtSlc‚Üì‚ÇÅ X‚ÇÇ X‚ÇÉ is-fib-X‚ÇÉ
      -- AlgEqv.e alg-eqv i = alg-eqv-to i , alg-eqv-is-equiv i
      -- AlgEqv.Œ∑-hyp alg-eqv (((i , j) , c , ŒΩ) , (j , idp) , (c‚Üì , ŒΩ‚Üì)) (._ , idp) = {!!}
      -- AlgEqv.Œº-hyp alg-eqv (._ , snd‚ÇÇ) (lf i , snd‚ÇÅ) Œ¥ i‚Üì (fst‚ÇÅ , snd‚ÇÉ) Œ¥‚Üì = {!!}
      -- AlgEqv.Œº-hyp alg-eqv (._ , snd‚ÇÇ) (nd c Œ¥‚ÇÅ Œµ , snd‚ÇÅ) Œ¥ i‚Üì œÉ‚Üì Œ¥‚Üì = {!!}

