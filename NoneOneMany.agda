{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver
open import Algebricity
open import Pb
open import Finitary
open import AlgEqvElim
open import FibEquiv

module NoneOneMany where

  module _ (M : ùïÑ) (M‚Üì : ùïÑ‚Üì M) (is-alg : is-algebraic M M‚Üì) (M-fin : is-finitary M) where

    open import SliceAlg M M‚Üì 
    open import SliceUnfold M 
    open ExtUnfold M‚Üì

    module Reductions where
    
      lf-red‚ÇÄ : (i : Idx ExtSlc‚ÇÅ) (œÉ : Cns ExtSlc‚ÇÅ i)
        ‚Üí (œï : (p : Pos ExtSlc‚ÇÅ œÉ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ (Typ ExtSlc‚ÇÅ œÉ p))
        ‚Üí (is-lf : is-leaf œÉ)
        ‚Üí Œ∑ (Pb M (Idx‚Üì M‚Üì)) (fst i) == snd i 
      lf-red‚ÇÄ ._ (lf i) œï is-lf = idp
      lf-red‚ÇÄ ._ (nd c Œ¥ Œµ) œï is-lf = ‚ä•-rec (is-lf [ inl unit ])

      lf-red : (i : Idx ExtSlc‚ÇÅ) (œÉ : Cns ExtSlc‚ÇÅ i)
        ‚Üí (œï : (p : Pos ExtSlc‚ÇÅ œÉ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ (Typ ExtSlc‚ÇÅ œÉ p))
        ‚Üí (is-lf : is-leaf œÉ)
        ‚Üí slc-idx i œÉ œï == (snd (fst i) , idp) ,
          transport (Œª x ‚Üí Cns‚Üì ExtPlbk‚Üì‚ÇÅ (snd (fst i) , idp) x)
                    (lf-red‚ÇÄ i œÉ œï is-lf) (Œ∑‚Üì ExtPlbk‚Üì‚ÇÅ (snd (fst i) , idp))
      lf-red ._ (lf i) œï is-lf = idp
      lf-red ._ (nd c Œ¥ Œµ) œï is-lf = ‚ä•-rec (is-lf [ inl unit ])


    module _ (X‚ÇÇ : Rel‚ÇÇ ‚ÜìRel‚ÇÅ) (is-fib-X‚ÇÇ : is-fib‚ÇÇ X‚ÇÇ) (alg-fib : AlgFib M M‚Üì X‚ÇÇ is-fib-X‚ÇÇ)
             (X‚ÇÉ : Rel‚ÇÉ X‚ÇÇ) (is-fib-X‚ÇÉ : is-fib‚ÇÉ X‚ÇÉ) where

      open AlgFib alg-fib
      open AlgStruct M M‚Üì (Idx‚Üì M‚Üì) (‚ÜìRel‚ÇÅ) X‚ÇÇ is-fib-X‚ÇÇ

      module X‚ÇÉ-struct = AlgStruct ExtSlc‚ÇÅ ExtSlc‚Üì‚ÇÅ ‚ÜìRel‚ÇÅ X‚ÇÇ X‚ÇÉ is-fib-X‚ÇÉ
      
      --
      --  These are our hypotheses ...
      --

      --   lf-hyp : (i : Idx ExtPlbk‚ÇÅ) (j : Idx‚Üì ExtPlbk‚Üì‚ÇÅ i)
      --     ‚Üí (j , Œ∑‚Üì ExtPlbk‚Üì‚ÇÅ j) == Œ∑X (fst i) (snd i)

      --   nd-hyp : (i : Idx ExtPlbk‚ÇÅ) (c : Cns ExtPlbk‚ÇÅ i)
      --     ‚Üí (Œ¥ : (p : Pos ExtPlbk‚ÇÅ {i = i} c) ‚Üí Cns ExtPlbk‚ÇÅ (Typ ExtPlbk‚ÇÅ {i = i} c p))
      --     ‚Üí (j : Idx‚Üì ExtPlbk‚Üì‚ÇÅ i) (d : Cns‚Üì ExtPlbk‚Üì‚ÇÅ j c)
      --     ‚Üí (Œ¥‚Üì : (p : Pos ExtPlbk‚ÇÅ {i = i} c) ‚Üí Cns‚Üì ExtPlbk‚Üì‚ÇÅ (Typ‚Üì ExtPlbk‚Üì‚ÇÅ {i‚Üì = j} d p) (Œ¥ p))
      --     ‚Üí (j , Œº‚Üì ExtPlbk‚Üì‚ÇÅ {i‚Üì = j} d Œ¥‚Üì)
      --       == ŒºX (fst i) (fst c) (snd c) Œ¥ (snd i) (j , d)
      --             (Œª p ‚Üí (Typ‚Üì M‚Üì (fst d) p , snd d p) , Œ¥‚Üì p)

      X‚ÇÉ-lf : (i : Idx ExtSlc‚ÇÅ) (j : Idx‚Üì ExtSlc‚Üì‚ÇÅ i)
        ‚Üí X‚ÇÇ ((i , j) , Œ∑ ExtPlbk‚ÇÇ (i , j))
      X‚ÇÉ-lf i j = fst (contr-center (is-fib-X‚ÇÉ ((i , j) , Œ∑ ExtPlbk‚ÇÇ (i , j)) (lf (i , j)) ‚ä•-elim)) 


    -- module AlgStruct (X‚ÇÄ : Rel‚ÇÄ) (X‚ÇÅ : Rel‚ÇÅ X‚ÇÄ)
    --                  (X‚ÇÇ : Rel‚ÇÇ X‚ÇÅ) (is-fib-X‚ÇÇ : is-fib‚ÇÇ X‚ÇÇ) where

    --   Œ∑X : (i : Idx M) (x‚ÇÄ : X‚ÇÄ i)
    --     ‚Üí X‚ÇÅ ((i , x‚ÇÄ) , Œ∑ M i , cst x‚ÇÄ)
    --   Œ∑X i x‚ÇÄ = fst (contr-center (is-fib-X‚ÇÇ ((i , x‚ÇÄ) , Œ∑ M i , cst x‚ÇÄ) (lf (i , x‚ÇÄ)) ‚ä•-elim)) 

      -- This can probably be cleaned up a bit ...
      Œ∑-wit : (i : Idx M) (j : Idx‚Üì M‚Üì i)
        ‚Üí (œï : (p : Pos ExtSlc‚ÇÅ (lf (i , j))) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ (Typ ExtSlc‚ÇÅ (lf (i , j)) p))
        ‚Üí X‚ÇÇ ((((i , j) , Œ∑ M i , cst j) , (j , idp) , Œ∑‚Üì M‚Üì j , cst idp) , lf (i , j) , œï) 
      Œ∑-wit i j œï = transport X‚ÇÇ pth (snd (contr-center (is-fib-X‚ÇÇ ((i , j) , Œ∑ M i , cst j) (lf (i , j)) ‚ä•-elim)))  

        where pth : (((i , j) , Œ∑ M i , (Œª _ ‚Üí j)) , Œ∑X i j) , lf (i , j) , ‚ä•-elim ==
                    (((i , j) , Œ∑ M i , cst j) , (j , idp) , Œ∑‚Üì M‚Üì j , cst idp) , lf (i , j) , œï
              pth =   ap (Œª x ‚Üí (((i , j) , Œ∑ M i , (Œª _ ‚Üí j)) , x) , lf (i , j) , ‚ä•-elim) (! (lf-hyp (i , j) (j , idp))) ‚àô
                      ap (Œª x ‚Üí (((i , j) , Œ∑ M i , cst j) , (j , idp) , Œ∑‚Üì M‚Üì j , cst idp) , lf (i , j) , x) (Œª= (Œª { () }))


      goal : (i : Idx ExtSlc‚ÇÅ) (œÉ : Cns ExtSlc‚ÇÅ i)
        ‚Üí (œï : (p : Pos ExtSlc‚ÇÅ œÉ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ (Typ ExtSlc‚ÇÅ œÉ p))
        ‚Üí X‚ÇÇ ((i , slc-idx i œÉ œï) , œÉ , œï) 
      goal ((i , j) , ._ , ._) (lf .(i , j)) œï = Œ∑-wit i j œï
      goal ((i , j) , ._ , ._) (nd c Œ¥ Œµ) œï with is-fin-disc (Pos M (fst c)) (M-fin (fst c))
        (record { P = Œª p ‚Üí is-node (Œµ p) ;
                  P-is-prop = Œª p ‚Üí Trunc-level ;
                  P-is-dec = Œª p ‚Üí slice-is-dec (Œµ p) })
      goal ((i , j) , .(Œº M c (fst ‚àò Œ¥)) , _) (nd (c , ŒΩ) Œ¥ Œµ) œï | inl p = mv-goal

        where open IdxIh i j c ŒΩ Œ¥ Œµ œï

              mv-goal : X‚ÇÇ ((((i , j) , Œº M c (fst ‚àò Œ¥) , _) , (j' , j'=j) , (Œº‚Üì M‚Üì d Œ¥‚Üì' , typ-Œº‚Üì=ŒΩ')) , nd (c , ŒΩ) Œ¥ Œµ , œï)
              mv-goal = {!!} 

              -- Okay, so the point is that we're going to use the multiplication
              -- coming from the structure on X‚ÇÉ.

              -- Mmm.
              we-have : X‚ÇÇ {!!}
              we-have = X‚ÇÉ-struct.ŒºX ((i , j) , c , ŒΩ) (Œ∑ ExtSlc‚ÇÅ ((i , j) , c , ŒΩ))
                                     {!!} -- hmm. this is this reduction issue where I can't use constant ....
                                     {!!} 
                                     (œï (inl unit))  -- the constructor over at this point
                                     (X‚ÇÉ-struct.Œ∑X ((i , j) , c , ŒΩ) (œï (inl unit)))
                                     {!!} -- the induction hypothesis
              
              -- module _ (i : Idx M) (c : Cns M i) (ŒΩ : (p : Pos M c) ‚Üí X‚ÇÄ (Typ M c p))
              --          (Œ¥ : (p : Pos M c) ‚Üí Cns (Pb M X‚ÇÄ) (Typ M c p , ŒΩ p))
              --          (x‚ÇÄ : X‚ÇÄ i) (x‚ÇÅ : X‚ÇÅ ((i , x‚ÇÄ) , c , ŒΩ))
              --          (Œ¥‚Üì : (p : Pos M c) ‚Üí X‚ÇÅ ((Typ M c p , ŒΩ p) , (Œ¥ p))) where

              --   ŒºX : X‚ÇÅ ((i , x‚ÇÄ) , Œº (Pb M X‚ÇÄ) {i = i , x‚ÇÄ} (c , ŒΩ) Œ¥)
              --   ŒºX = fst (contr-center (is-fib-X‚ÇÇ ((i , x‚ÇÄ) , Œº (Pb M X‚ÇÄ) {i = i , x‚ÇÄ} (c , ŒΩ) Œ¥) ŒºX-tr Œ∏X))


      goal ((i , j) , .(Œº M c (fst ‚àò Œ¥)) , _) (nd (c , ŒΩ) Œ¥ Œµ) œï | inr ¬¨p =
        transport X‚ÇÇ claim (X‚ÇÉ-struct.Œ∑X ((i , j) , c , ŒΩ) (œï (inl unit)))

        where open IdxIh i j c ŒΩ Œ¥ Œµ œï

              claim : ((((i , j) , c , ŒΩ) , œï true) , Œ∑ ExtPlbk‚ÇÇ (((i , j) , c , ŒΩ) , œï true)) ==
                      ((((i , j) , Œº M c (fst ‚àò Œ¥) , _) , (j' , j'=j) , (Œº‚Üì M‚Üì d Œ¥‚Üì' , typ-Œº‚Üì=ŒΩ')) , nd (c , ŒΩ) Œ¥ Œµ , œï)
              claim = pair= {!!} {!!} 

      open import SliceAlgebraic
      
      alg-eqv : AlgEqv ExtSlc‚ÇÅ ExtSlc‚Üì‚ÇÅ X‚ÇÇ X‚ÇÉ is-fib-X‚ÇÉ
      AlgEqv.e alg-eqv = fib-eqv ExtSlc‚ÇÅ ExtSlc‚Üì‚ÇÅ (slc-algebraic M M‚Üì) X‚ÇÇ is-fib-X‚ÇÇ goal
      AlgEqv.Œ∑-hyp alg-eqv i j = {!!}
      AlgEqv.Œº-hyp alg-eqv (._ , snd‚ÇÅ) (lf i , ŒΩ) Œ¥ j d Œ¥‚Üì = {!!}
      AlgEqv.Œº-hyp alg-eqv (._ , snd‚ÇÅ) (nd c Œ¥ Œµ , ŒΩ) Œ¥‚ÇÅ ((fst‚ÇÅ , ._ , ._) , snd‚ÇÉ) (nd‚Üì c‚Üì Œ¥‚Üì‚ÇÅ Œµ‚Üì , snd‚ÇÇ) Œ¥‚Üì = {!!}

