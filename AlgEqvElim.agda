{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver
open import Pb
open import Algebricity

module AlgEqvElim where

  module _ (M : ùïÑ) (M‚Üì : ùïÑ‚Üì M) where

    open import SliceUnfold M 
    open ExtUnfold M‚Üì

    -- The unit and multiplication induced by a fibrant 2-relation
    module AlgStruct (X‚ÇÄ : Rel‚ÇÄ) (X‚ÇÅ : Rel‚ÇÅ X‚ÇÄ)
                     (X‚ÇÇ : Rel‚ÇÇ X‚ÇÅ) (is-fib-X‚ÇÇ : is-fib‚ÇÇ X‚ÇÇ) where

      Œ∑X : (i : Idx M) (x‚ÇÄ : X‚ÇÄ i)
        ‚Üí X‚ÇÅ ((i , x‚ÇÄ) , Œ∑ M i , cst x‚ÇÄ)
      Œ∑X i x‚ÇÄ = fst (contr-center (is-fib-X‚ÇÇ ((i , x‚ÇÄ) , Œ∑ M i , cst x‚ÇÄ) (lf (i , x‚ÇÄ)) ‚ä•-elim)) 


      module _ (i : Idx M) (c : Cns M i) (ŒΩ : (p : Pos M c) ‚Üí X‚ÇÄ (Typ M c p))
               (Œ¥ : (p : Pos M c) ‚Üí Cns (Pb M X‚ÇÄ) (Typ M c p , ŒΩ p))
               (x‚ÇÄ : X‚ÇÄ i) (x‚ÇÅ : X‚ÇÅ ((i , x‚ÇÄ) , c , ŒΩ))
               (Œ¥‚Üì : (p : Pos M c) ‚Üí X‚ÇÅ ((Typ M c p , ŒΩ p) , (Œ¥ p))) where

        ŒºX-tr : Pd (Pb M X‚ÇÄ) ((i , x‚ÇÄ) , Œº (Pb M X‚ÇÄ) {i = i , x‚ÇÄ} (c , ŒΩ) Œ¥)
        ŒºX-tr = nd (c , ŒΩ) Œ¥ (Œª p ‚Üí
                nd (Œ¥ p) (Œª q ‚Üí Œ∑ (Pb M X‚ÇÄ) (Typ (Pb M X‚ÇÄ) {i = Typ M c p , ŒΩ p} (Œ¥ p) q)) (Œª q ‚Üí
                lf (Typ (Pb M X‚ÇÄ) {i = Typ M c p , ŒΩ p} (Œ¥ p) q)))

        Œ∏X : (p : Pos (Slice (Pb M X‚ÇÄ)) ŒºX-tr) ‚Üí X‚ÇÅ (Typ (Slice (Pb M X‚ÇÄ)) ŒºX-tr p)
        Œ∏X true = x‚ÇÅ
        Œ∏X (inr (p , true)) = Œ¥‚Üì p

        ŒºX : X‚ÇÅ ((i , x‚ÇÄ) , Œº (Pb M X‚ÇÄ) {i = i , x‚ÇÄ} (c , ŒΩ) Œ¥)
        ŒºX = fst (contr-center (is-fib-X‚ÇÇ ((i , x‚ÇÄ) , Œº (Pb M X‚ÇÄ) {i = i , x‚ÇÄ} (c , ŒΩ) Œ¥) ŒºX-tr Œ∏X))

    module _ (X‚ÇÅ : Rel‚ÇÅ (Idx‚Üì M‚Üì)) (X‚ÇÇ : Rel‚ÇÇ X‚ÇÅ) (is-fib-X‚ÇÇ : is-fib‚ÇÇ X‚ÇÇ) where

      open AlgStruct (Idx‚Üì M‚Üì) X‚ÇÅ X‚ÇÇ is-fib-X‚ÇÇ

      record AlgEqv : Set where
        field 

          e : (i : Idx ExtSlc‚ÇÅ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ i ‚âÉ X‚ÇÅ i

          Œ∑-hyp : (i : Idx ExtPlbk‚ÇÅ) (j : Idx‚Üì ExtPlbk‚Üì‚ÇÅ i)
            ‚Üí ‚Äì> (e (i , Œ∑ ExtPlbk‚ÇÅ i)) (j , Œ∑‚Üì ExtPlbk‚Üì‚ÇÅ j)
              == Œ∑X (fst i) (snd i)

          -- Here we should add the hypothesis that there is a non-trivial
          -- decoration.
          Œº-hyp : (i : Idx ExtPlbk‚ÇÅ) (c : Cns ExtPlbk‚ÇÅ i)
            ‚Üí (Œ¥ : (p : Pos ExtPlbk‚ÇÅ {i = i} c) ‚Üí Cns ExtPlbk‚ÇÅ (Typ ExtPlbk‚ÇÅ {i = i} c p))
            ‚Üí (j : Idx‚Üì ExtPlbk‚Üì‚ÇÅ i) (d : Cns‚Üì ExtPlbk‚Üì‚ÇÅ j c)
            ‚Üí (Œ¥‚Üì : (p : Pos ExtPlbk‚ÇÅ {i = i} c) ‚Üí Cns‚Üì ExtPlbk‚Üì‚ÇÅ (Typ‚Üì ExtPlbk‚Üì‚ÇÅ {i‚Üì = j} d p) (Œ¥ p))
            ‚Üí ‚Äì> (e (i , Œº ExtPlbk‚ÇÅ {i = i} c Œ¥)) (j , Œº‚Üì ExtPlbk‚Üì‚ÇÅ {i‚Üì = j} d Œ¥‚Üì)
              == ŒºX (fst i) (fst c) (snd c) Œ¥ (snd i) (‚Äì> (e (i , c)) (j , d))
                    (Œª p ‚Üí ‚Äì> (e ((Typ M (fst c) p , snd c p) , Œ¥ p)) ((Typ‚Üì M‚Üì (fst d) p , snd d p) , Œ¥‚Üì p ))

    module _ (X‚ÇÇ : Rel‚ÇÇ ‚ÜìRel‚ÇÅ) (is-fib-X‚ÇÇ : is-fib‚ÇÇ X‚ÇÇ) where

      open AlgStruct (Idx‚Üì M‚Üì) (‚ÜìRel‚ÇÅ) X‚ÇÇ is-fib-X‚ÇÇ

      record AlgFib : Set where
        field

          lf-hyp : (i : Idx ExtPlbk‚ÇÅ) (j : Idx‚Üì ExtPlbk‚Üì‚ÇÅ i)
            ‚Üí (j , Œ∑‚Üì ExtPlbk‚Üì‚ÇÅ j) == Œ∑X (fst i) (snd i)

          nd-hyp : (i : Idx ExtPlbk‚ÇÅ) (c : Cns ExtPlbk‚ÇÅ i)
            ‚Üí (Œ¥ : (p : Pos ExtPlbk‚ÇÅ {i = i} c) ‚Üí Cns ExtPlbk‚ÇÅ (Typ ExtPlbk‚ÇÅ {i = i} c p))
            ‚Üí (j : Idx‚Üì ExtPlbk‚Üì‚ÇÅ i) (d : Cns‚Üì ExtPlbk‚Üì‚ÇÅ j c)
            ‚Üí (Œ¥‚Üì : (p : Pos ExtPlbk‚ÇÅ {i = i} c) ‚Üí Cns‚Üì ExtPlbk‚Üì‚ÇÅ (Typ‚Üì ExtPlbk‚Üì‚ÇÅ {i‚Üì = j} d p) (Œ¥ p))
            ‚Üí (j , Œº‚Üì ExtPlbk‚Üì‚ÇÅ {i‚Üì = j} d Œ¥‚Üì)
              == ŒºX (fst i) (fst c) (snd c) Œ¥ (snd i) (j , d)
                    (Œª p ‚Üí (Typ‚Üì M‚Üì (fst d) p , snd d p) , Œ¥‚Üì p)

      open AlgFib
      
      to-alg-eqv : (alg-fib : AlgFib) ‚Üí AlgEqv ‚ÜìRel‚ÇÅ X‚ÇÇ is-fib-X‚ÇÇ
      AlgEqv.e (to-alg-eqv alg-fib) i = ide (‚ÜìRel‚ÇÅ i)
      AlgEqv.Œ∑-hyp (to-alg-eqv alg-fib) = lf-hyp alg-fib
      AlgEqv.Œº-hyp (to-alg-eqv alg-fib) = nd-hyp alg-fib

    module AlgElim (P : (X‚ÇÅ : Rel‚ÇÅ (Idx‚Üì M‚Üì)) (X‚ÇÇ : Rel‚ÇÇ X‚ÇÅ) (is-fib-X‚ÇÇ : is-fib‚ÇÇ X‚ÇÇ) (alg-eqv : AlgEqv X‚ÇÅ X‚ÇÇ is-fib-X‚ÇÇ) ‚Üí Type‚ÇÄ)
                   (id* : (X‚ÇÇ : Rel‚ÇÇ ‚ÜìRel‚ÇÅ) (is-fib-X‚ÇÇ : is-fib‚ÇÇ X‚ÇÇ) (alg-fib : AlgFib X‚ÇÇ is-fib-X‚ÇÇ)
                      ‚Üí P ‚ÜìRel‚ÇÅ X‚ÇÇ is-fib-X‚ÇÇ (to-alg-eqv X‚ÇÇ is-fib-X‚ÇÇ alg-fib)) where

      postulate
      
        elim : (X‚ÇÅ : Rel‚ÇÅ (Idx‚Üì M‚Üì)) (X‚ÇÇ : Rel‚ÇÇ X‚ÇÅ) (is-fib-X‚ÇÇ : is-fib‚ÇÇ X‚ÇÇ) (alg-eqv : AlgEqv X‚ÇÅ X‚ÇÇ is-fib-X‚ÇÇ)
          ‚Üí P X‚ÇÅ X‚ÇÇ is-fib-X‚ÇÇ alg-eqv

