{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver
open import Pb

module FreeAlg (M : ùïÑ) (X : Idx M ‚Üí Set) where

  record CnsFreeAlg {i : Idx M} (Œ± : ‚ü¶ M ‚üß X i) (c : Cns M i) : Set where
    constructor ‚ü¶_‚à•_‚à•_‚üß
    field
      Œ¥-fr : (p : Pos M c) ‚Üí Cns M (Typ M c p)
      ŒΩ-fr : (p : Pos M c) (q : Pos M (Œ¥-fr p)) ‚Üí X (Typ M (Œ¥-fr p) q)
      -- f-fr : fst Œ± == Œº M c Œ¥-fr
      -- o-fr : snd Œ± == (Œª p ‚Üí ŒΩ-fr (Œº-pos-fst M c Œ¥-fr p) (Œº-pos-snd M c Œ¥-fr p)) 
      --        [ (Œª x ‚Üí (p : Pos M x) ‚Üí X (Typ M x p)) ‚Üì f-fr ]
      e-fr : Œ± == Œº M c Œ¥-fr , Œª p ‚Üí ŒΩ-fr (Œº-pos-fst M c Œ¥-fr p) (Œº-pos-snd M c Œ¥-fr p) 

  open CnsFreeAlg
  
  FreeAlgTyp : {i : Idx M} {Œ± : ‚ü¶ M ‚üß X i} (c : Cns M i)
    ‚Üí CnsFreeAlg Œ± c
    ‚Üí (p : Pos M c) ‚Üí ‚ü¶ M ‚üß X (Typ M c p)
  FreeAlgTyp c cns p = Œ¥-fr cns p , ŒΩ-fr cns p 

  -- Free-Œ∑‚Üì : {i : Idx M} (Œ± : ‚ü¶ M ‚üß X i)
  --   ‚Üí CnsFreeAlg Œ± (Œ∑ M i)
  -- Free-Œ∑‚Üì (c , ŒΩ) = ‚ü¶ Œ∑-dec M (Cns M) c ‚à• {!!} ‚à• {!!} ‚üß

  Free-Œº‚Üì : {i : Idx M} {c : Cns M i}
    ‚Üí {Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p)}
    ‚Üí {Œ± : ‚ü¶ M ‚üß X i} (c‚Üì : CnsFreeAlg Œ± c)
    ‚Üí (Œ¥‚Üì : (p : Pos M c) ‚Üí CnsFreeAlg (FreeAlgTyp c c‚Üì p) (Œ¥ p))
    ‚Üí CnsFreeAlg Œ± (Œº M c Œ¥)
  Free-Œº‚Üì {c = c} {Œ¥ = Œ¥} ‚ü¶ Œ¥' ‚à• ŒΩ' ‚à• idp ‚üß Œ¥‚Üì =
    ‚ü¶ (Œª p ‚Üí Œ¥-fr (Œ¥‚Üì (Œº-pos-fst M c Œ¥ p)) (Œº-pos-snd M c Œ¥ p)) ‚à•
      (Œª p q ‚Üí ŒΩ-fr (Œ¥‚Üì (Œº-pos-fst M c Œ¥ p)) (Œº-pos-snd M c Œ¥ p) q) ‚à•
      {!!} ‚üß

      where claim : Œ¥' == (Œª p ‚Üí Œº M (Œ¥ p) (Œª q ‚Üí Œ¥-fr (Œ¥‚Üì p) q))
            claim = Œª= (Œª p ‚Üí fst= (e-fr (Œ¥‚Üì p))) 

  -- Indeed.  So this is essentially the right setup, but naively
  -- strictifying these equations looks dubious.  Well, I guess you
  -- could avoid the funext application by expandng out the actual
  -- equalities necessary here.  Maybe that's a first step....

  -- Gets a bit messy.

  module _ where

    -- Here's another approach specifying it as a kind of
    -- higher inductive fixed point ....
    
    postulate

      Fr : Idx M ‚Üí Set
      Fr-Rel : Idx (Slice (Pb M Fr)) ‚Üí Set 

      Fr-Œ∑ : (i : Idx M)
        ‚Üí X i ‚Üí Fr i
        
      Fr-Œº : (i : Idx M) (c : Cns M i)
        ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Fr (Typ M c p))
        ‚Üí Fr i 

      Fr-rel : (i : Idx M) (c : Cns M i)
        ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Fr (Typ M c p))
        ‚Üí Fr-Rel ((i , Fr-Œº i c ŒΩ) , (c , ŒΩ))
      
      Fr-Œº-pth : (i : Idx M) (c : Cns M i)
        ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Fr (Typ M c p))
        ‚Üí (f : Fr i) (r : Fr-Rel ((i , f) , (c , ŒΩ)))
        ‚Üí Fr-Œº i c ŒΩ == f 
    
      Fr-rel-tph : (i : Idx M) (c : Cns M i)
        ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Fr (Typ M c p))
        ‚Üí (f : Fr i) (r : Fr-Rel ((i , f) , (c , ŒΩ)))
        ‚Üí transport (Œª x ‚Üí Fr-Rel ((i , x) , (c , ŒΩ))) (Fr-Œº-pth i c ŒΩ f r) (Fr-rel i c ŒΩ) == r 


    -- Huh! Crazy!  So this is *much* more interesting than the above.
    -- But now, how do I "embed" this is a whole coinductive tower?
    -- Because I'll need to do this simultaneously for *all* the
    -- families.

    -- So suppose at the *current* stage I also add the specified
    -- elements of the relation.  Hmmm.  Then the thing is that

    -- Hmmm.  A curious thing: by adding *elements* to the higher
    -- families, we are adding *relations* to the lower ones via
    -- the fundamental theorem.

    -- So.  But can you do this uniformly in all the families?
    
    -- Okay, I think I have an idea: I think you should *separate*
    -- the definition of the constructors from that of the paths.
    -- Basically, you should recurse down the tower including all
    -- of the generating *elements*.  This should leave you with
    -- a multiplicative opetopic type.  Then, you're going to
    -- enforce the uniqueness afterwards.


    -- And now what? Well, now I want to "insert" a higher dimensional
    -- relation into the next family, namely, the one connecting the
    -- Fr-Œº constructor to its output.

    -- But then I have to simultaneously add paths into both the base
    -- family and the family I am using to fill it.

  -- unique-action : (M : ùïÑ) (A : Idx M ‚Üí Set)
  --   ‚Üí (W : Idx (Slice (Pb M A)) ‚Üí Set)
  --   ‚Üí Set
  -- unique-action M A W = (f : Idx M) (œÉ : Cns M f)
  --   ‚Üí (ŒΩ : (p : Pos M œÉ) ‚Üí A (Typ M œÉ p))
  --   ‚Üí is-contr (Œ£ (A f) (Œª a ‚Üí W ((f , a) , œÉ , ŒΩ)))

  -- record is-fibrant {M : ùïÑ} (X : OpetopicType M) : Set where
  --   coinductive
  --   field

  --     base-fibrant : unique-action M (Ob X) (Ob (Hom X))
  --     hom-fibrant : is-fibrant (Hom X)

  -- open is-fibrant public

