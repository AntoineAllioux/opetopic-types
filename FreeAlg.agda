{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver

module FreeAlg (M : ùïÑ) (X : Idx M ‚Üí Set) where

  record CnsFreeAlg {i : Idx M} (Œ± : ‚ü¶ M ‚üß X i) (c : Cns M i) : Set where
    constructor ‚ü¶_‚à•_‚à•_‚üß
    field
      Œ¥-fr : (p : Pos M c) ‚Üí Cns M (Typ M c p)
      ŒΩ-fr : (p : Pos M c) (q : Pos M (Œ¥-fr p)) ‚Üí X (Typ M (Œ¥-fr p) q)
      -- f-fr : fst Œ± == Œº M c Œ¥-fr
      -- o-fr : snd Œ± == (Œª p ‚Üí ŒΩ-fr (Œº-pos-fst M c Œ¥-fr p) (Œº-pos-snd M c Œ¥-fr p)) 
      --        [ (Œª x ‚Üí (p : Pos M x) ‚Üí X (Typ M x p)) ‚Üì f-fr ]
      e-fr : Œ± == Œº M c Œ¥-fr , Œª p ‚Üí ŒΩ-fr (Œº-pos-fst M c Œ¥-fr p) (Œº-pos-snd M c Œ¥-fr p) 

  open CnsFreeAlg
  
  FreeAlgTyp : {i : Idx M} {Œ± : ‚ü¶ M ‚üß X i} (c : Cns M i)
    ‚Üí CnsFreeAlg Œ± c
    ‚Üí (p : Pos M c) ‚Üí ‚ü¶ M ‚üß X (Typ M c p)
  FreeAlgTyp c cns p = Œ¥-fr cns p , ŒΩ-fr cns p 

  -- Free-Œ∑‚Üì : {i : Idx M} (Œ± : ‚ü¶ M ‚üß X i)
  --   ‚Üí CnsFreeAlg Œ± (Œ∑ M i)
  -- Free-Œ∑‚Üì (c , ŒΩ) = ‚ü¶ Œ∑-dec M (Cns M) c ‚à• {!!} ‚à• {!!} ‚üß

  Free-Œº‚Üì : {i : Idx M} {c : Cns M i}
    ‚Üí {Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p)}
    ‚Üí {Œ± : ‚ü¶ M ‚üß X i} (c‚Üì : CnsFreeAlg Œ± c)
    ‚Üí (Œ¥‚Üì : (p : Pos M c) ‚Üí CnsFreeAlg (FreeAlgTyp c c‚Üì p) (Œ¥ p))
    ‚Üí CnsFreeAlg Œ± (Œº M c Œ¥)
  Free-Œº‚Üì {c = c} {Œ¥ = Œ¥} ‚ü¶ Œ¥' ‚à• ŒΩ' ‚à• idp ‚üß Œ¥‚Üì =
    ‚ü¶ (Œª p ‚Üí Œ¥-fr (Œ¥‚Üì (Œº-pos-fst M c Œ¥ p)) (Œº-pos-snd M c Œ¥ p)) ‚à•
      (Œª p q ‚Üí ŒΩ-fr (Œ¥‚Üì (Œº-pos-fst M c Œ¥ p)) (Œº-pos-snd M c Œ¥ p) q) ‚à•
      {!!} ‚üß

      where claim : Œ¥' == (Œª p ‚Üí Œº M (Œ¥ p) (Œª q ‚Üí Œ¥-fr (Œ¥‚Üì p) q))
            claim = Œª= (Œª p ‚Üí fst= (e-fr (Œ¥‚Üì p))) 

  -- Indeed.  So this is essentially the right setup, but naively
  -- strictifying these equations looks dubious.  Well, I guess you
  -- could avoid the funext application by expandng out the actual
  -- equalities necessary here.  Maybe that's a first step....

  -- Gets a bit messy.
