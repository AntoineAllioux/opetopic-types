{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver
open import Algebricity
open import SliceLemmas

module FibEquiv where

  module _ (M : ùïÑ) (M‚Üì : ùïÑ‚Üì M) (is-alg : is-algebraic M M‚Üì) where

    open import SliceUnfold M
    open ExtUnfold M‚Üì

    -- This variant of the slice index lemma appears to be somewhat
    -- simpler, and more in line with what actually happens in practice.
    -- Perhaps you should in fact use it in the SliceAlg proof.
    slc-idx-lem' : (i : Idx M) (j : Idx‚Üì M‚Üì i)
      ‚Üí (c : Cns M i) (ŒΩ : (p : Pos M c) ‚Üí Idx‚Üì M‚Üì (Typ M c p))
      ‚Üí {j‚ÇÄ : Idx‚Üì M‚Üì i} {e‚ÇÄ : j‚ÇÄ == j}
      ‚Üí {d‚ÇÄ : Cns‚Üì M‚Üì j‚ÇÄ c} {Œ±‚ÇÄ : (p : Pos M c) ‚Üí Typ‚Üì M‚Üì d‚ÇÄ p == ŒΩ p}
      ‚Üí {j‚ÇÅ : Idx‚Üì M‚Üì i} {e‚ÇÅ : j‚ÇÅ == j}
      ‚Üí {d‚ÇÅ : Cns‚Üì M‚Üì j‚ÇÅ c} {Œ±‚ÇÅ : (p : Pos M c) ‚Üí Typ‚Üì M‚Üì d‚ÇÅ p == ŒΩ p}
      ‚Üí (q : j‚ÇÄ == j‚ÇÅ) (r : e‚ÇÄ == q ‚àô e‚ÇÅ)
      ‚Üí (s : d‚ÇÄ == d‚ÇÅ [ (Œª x ‚Üí Cns‚Üì M‚Üì x c) ‚Üì q ])
      ‚Üí (t : (p : Pos M c) ‚Üí Œ±‚ÇÄ p == ap (Œª x ‚Üí Typ‚Üì M‚Üì (snd x) p) (pair= q s) ‚àô Œ±‚ÇÅ p)
      ‚Üí Path {A = Idx‚Üì ExtSlc‚Üì‚ÇÅ ((i , j) , c , ŒΩ)}
        ((j‚ÇÄ , e‚ÇÄ) , (d‚ÇÄ , Œ±‚ÇÄ)) ((j‚ÇÅ , e‚ÇÅ) , (d‚ÇÅ , Œ±‚ÇÅ)) 
    slc-idx-lem' i j c ŒΩ idp idp idp t = pair= (pair= idp idp) (pair= idp (Œª= t)) 

    module _ (X : Rel‚ÇÅ (Idx‚Üì M‚Üì)) (is-fib-X : is-fib‚ÇÅ X)
             (X-is-alg : (i : Idx M) (c : Cns M i)
               ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Idx‚Üì M‚Üì (Typ M c p))
               ‚Üí X ((i , idx (contr-center (is-alg i c ŒΩ)) ) , c , ŒΩ)) where

      fib-eqv : (i : Idx ExtSlc‚ÇÅ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ i ‚âÉ X i 
      fib-eqv ((i , j) , c , ŒΩ) = equiv to from to-from from-to 

        where to : Idx‚Üì ExtSlc‚Üì‚ÇÅ ((i , j) , c , ŒΩ) ‚Üí X ((i , j) , c , ŒΩ)
              to ((j' , j'=j) , d , t) = transport (Œª x ‚Üí X ((i , x) , c , ŒΩ)) to-pth (X-is-alg i c ŒΩ) 

                where Œ± : alg-comp M M‚Üì i c ŒΩ
                      Œ± = ‚ü¶ j' ‚à£ d ‚à£ Œª= t ‚üß 

                      to-pth : idx (contr-center (is-alg i c ŒΩ)) == j
                      to-pth = ap idx (contr-path (is-alg i c ŒΩ) Œ±) ‚àô j'=j 

              from :  X ((i , j) , c , ŒΩ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ ((i , j) , c , ŒΩ) 
              from x = (idx Œ± , from-pth) , cns Œ± , app= (typ Œ±)

                where Œ± : alg-comp M M‚Üì i c ŒΩ
                      Œ± = contr-center (is-alg i c ŒΩ)

                      from-pth : idx Œ± == j
                      from-pth = fst= (contr-has-all-paths ‚¶É is-fib-X i c ŒΩ ‚¶Ñ (idx Œ± , X-is-alg i c ŒΩ) (j , x))  

              to-from : (x : X ((i , j) , c , ŒΩ)) ‚Üí to (from x) == x
              to-from x = transport (Œª x ‚Üí X ((i , x) , c , ŒΩ))
                            (ap idx (contr-path (is-alg i c ŒΩ) ‚ü¶ idx Œ± ‚à£ cns Œ± ‚à£ Œª= (app= (typ Œ±)) ‚üß) ‚àô from-pth)
                            (X-is-alg i c ŒΩ) =‚ü® lemma 
                             |in-ctx (Œª h ‚Üí transport (Œª x ‚Üí X ((i , x) , c , ŒΩ)) (h ‚àô from-pth) (X-is-alg i c ŒΩ)) ‚ü© 
                          transport (Œª x ‚Üí X ((i , x) , c , ŒΩ))
                            (ap idx (contr-path (is-alg i c ŒΩ) Œ±) ‚àô from-pth)
                            (X-is-alg i c ŒΩ) =‚ü® contr-has-all-paths ‚¶É =-preserves-contr (is-alg i c ŒΩ) ‚¶Ñ
                              (contr-path (is-alg i c ŒΩ) Œ±) idp
                            |in-ctx (Œª h ‚Üí transport (Œª x ‚Üí X ((i , x) , c , ŒΩ)) (ap idx h ‚àô from-pth) (X-is-alg i c ŒΩ)) ‚ü©
                          transport (Œª x ‚Üí X ((i , x) , c , ŒΩ)) from-pth (X-is-alg i c ŒΩ)
                            =‚ü® to-transp (snd= (contr-has-all-paths ‚¶É is-fib-X i c ŒΩ ‚¶Ñ (idx Œ± , X-is-alg i c ŒΩ) (j , x))) ‚ü© 
                          x =‚àé

                where Œ± : alg-comp M M‚Üì i c ŒΩ
                      Œ± = contr-center (is-alg i c ŒΩ)

                      from-pth : idx Œ± == j
                      from-pth = fst= (contr-has-all-paths ‚¶É is-fib-X i c ŒΩ ‚¶Ñ (idx Œ± , X-is-alg i c ŒΩ) (j , x))  

                      Œ±'=Œ± : Œ± == ‚ü¶ idx Œ± ‚à£ cns Œ± ‚à£ Œª= (app= (typ Œ±)) ‚üß
                      Œ±'=Œ± = alg-comp-= M M‚Üì i c ŒΩ idp idp (Œª p ‚Üí ! (app=-Œ≤ (app= (typ Œ±)) p))
                      
                      lemma = ap idx (contr-path (is-alg i c ŒΩ) ‚ü¶ idx Œ± ‚à£ cns Œ± ‚à£ Œª= (app= (typ Œ±)) ‚üß) 
                                =‚ü® ap (ap idx) ((contr-has-all-paths ‚¶É =-preserves-contr (is-alg i c ŒΩ) ‚¶Ñ
                                  (contr-path (is-alg i c ŒΩ) ‚ü¶ idx Œ± ‚à£ cns Œ± ‚à£ Œª= (app= (typ Œ±)) ‚üß) Œ±'=Œ±)) ‚ü©
                              ap idx Œ±'=Œ±
                                =‚ü® alg-comp-=-fst-Œ≤ M M‚Üì i c ŒΩ idp idp (Œª p ‚Üí ! (app=-Œ≤ (app= (typ Œ±)) p)) ‚ü© 
                              idp
                                =‚ü® ap (ap idx) (contr-has-all-paths ‚¶É =-preserves-contr (is-alg i c ŒΩ) ‚¶Ñ
                                  idp (contr-path (is-alg i c ŒΩ) Œ±)) ‚ü© 
                              ap idx (contr-path (is-alg i c ŒΩ) Œ±) =‚àé

              from-to : (a : Idx‚Üì ExtSlc‚Üì‚ÇÅ ((i , j) , c , ŒΩ)) ‚Üí from (to a) == a
              from-to ((j' , j'=j) , d , t) =
                (idx Œ± , from-pth) , cns Œ± , app= (typ Œ±)
                  =‚ü® slc-idx-lem' i j c ŒΩ (ap idx Œ±=Œ±') lemma
                    (alg-comp-cns-= M M‚Üì Œ±=Œ±') (Œª p ‚Üí alg-comp-typ-= M M‚Üì Œ±=Œ±' p ‚àô
                      ap (Œª h ‚Üí ap (Œª x ‚Üí Typ‚Üì M‚Üì (snd x) p) (pair= (alg-comp-idx-= M M‚Üì Œ±=Œ±') (alg-comp-cns-= M M‚Üì Œ±=Œ±')) ‚àô h) (app=-Œ≤ t p)) ‚ü© 
                ((j' , j'=j) , d , t) =‚àé

                where open SliceOver M M‚Üì

                      Œ± : alg-comp M M‚Üì i c ŒΩ
                      Œ± = contr-center (is-alg i c ŒΩ)
              
                      Œ±' : alg-comp M M‚Üì i c ŒΩ
                      Œ±' = ‚ü¶ j' ‚à£ d ‚à£ Œª= t ‚üß 

                      Œ±=Œ±' : Œ± == Œ±'
                      Œ±=Œ±' = contr-path (is-alg i c ŒΩ) Œ±'

                      to-pth : idx Œ± == j
                      to-pth = ap idx Œ±=Œ±' ‚àô j'=j 

                      ctr-pth : (idx Œ± , X-is-alg i c ŒΩ) == (j , transport (Œª x ‚Üí X ((i , x) , c , ŒΩ)) to-pth (X-is-alg i c ŒΩ))
                      ctr-pth = (contr-has-all-paths ‚¶É is-fib-X i c ŒΩ ‚¶Ñ (idx Œ± , X-is-alg i c ŒΩ)
                        (j , transport (Œª x ‚Üí X ((i , x) , c , ŒΩ)) to-pth (X-is-alg i c ŒΩ)))

                      other-pth : (idx Œ± , X-is-alg i c ŒΩ) == (j , transport (Œª x ‚Üí X ((i , x) , c , ŒΩ)) to-pth (X-is-alg i c ŒΩ))
                      other-pth = pair= to-pth (from-transp (Œª x ‚Üí X ((i , x) , c , ŒΩ)) to-pth idp) 

                      from-pth : idx Œ± == j
                      from-pth = fst= ctr-pth

                      lemma : from-pth == to-pth 
                      lemma = from-pth
                                =‚ü® contr-has-all-paths ‚¶É =-preserves-contr (is-fib-X i c ŒΩ) ‚¶Ñ
                                   ctr-pth other-pth |in-ctx fst= ‚ü©
                              fst= other-pth
                                =‚ü® fst=-Œ≤ to-pth (from-transp (Œª x ‚Üí X ((i , x) , c , ŒΩ)) to-pth idp) ‚ü© 
                              to-pth =‚àé 

    -- Proof that it suffices to have a map in order to have an equivalence
    module _ (X : Rel‚ÇÅ (Idx‚Üì M‚Üì)) (is-fib-X : is-fib‚ÇÅ X)
             (œï : (i : Idx ExtSlc‚ÇÅ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ i ‚Üí X i) where

      X-is-alg : (i : Idx M) (c : Cns M i)
        ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Idx‚Üì M‚Üì (Typ M c p))
        ‚Üí X ((i , idx (contr-center (is-alg i c ŒΩ)) ) , c , ŒΩ)
      X-is-alg i c ŒΩ = œï ((i , idx Œ±) , c , ŒΩ) ((idx Œ± , idp) , cns Œ± , app= (typ Œ±)) 

        where Œ± : alg-comp M M‚Üì i c ŒΩ
              Œ± = (contr-center (is-alg i c ŒΩ))

      hence : (i : Idx ExtSlc‚ÇÅ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ i ‚âÉ X i
      hence = fib-eqv X is-fib-X X-is-alg
