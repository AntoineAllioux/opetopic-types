{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver

module FibEquiv where

  module _ (M : ùïÑ) (M‚Üì : ùïÑ‚Üì M) (is-alg : is-algebraic M M‚Üì) where

    open import SliceUnfold M
    open ExtUnfold M‚Üì
    
    module _ (X : Rel‚ÇÅ (Idx‚Üì M‚Üì))
             (X-is-alg : (i : Idx M) (c : Cns M i)
               ‚Üí (ŒΩ : (p : Pos M c) ‚Üí Idx‚Üì M‚Üì (Typ M c p))
               ‚Üí X ((i , idx (contr-center (is-alg i c ŒΩ)) ) , c , ŒΩ)) where

      fib-eqv : (i : Idx ExtSlc‚ÇÅ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ i ‚âÉ X i 
      fib-eqv ((i , j) , c , ŒΩ) = equiv to from to-from from-to 

        where to : Idx‚Üì ExtSlc‚Üì‚ÇÅ ((i , j) , c , ŒΩ) ‚Üí X ((i , j) , c , ŒΩ)
              to ((j' , j'=j) , d , t) = {!!} 

              from :  X ((i , j) , c , ŒΩ) ‚Üí Idx‚Üì ExtSlc‚Üì‚ÇÅ ((i , j) , c , ŒΩ) 
              from x = {!!} 

              to-from : (x : X ((i , j) , c , ŒΩ)) ‚Üí to (from x) == x
              to-from x = {!!} 

              from-to : (a : Idx‚Üì ExtSlc‚Üì‚ÇÅ ((i , j) , c , ŒΩ)) ‚Üí from (to a) == a
              from-to ((j' , j'=j) , d , t) = {!!} 
