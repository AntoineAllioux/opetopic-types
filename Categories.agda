{-# OPTIONS --without-K --rewriting --type-in-type #-}

open import Monad
open import MonadOver
open import UniCat
open import Delta
open import OpetopicType
open import IdentityMonad
open import Pb
open import HoTT
open import IdentityMonadOver

module Categories where

  ‚àû-category : Set (lsucc lzero)
  ‚àû-category = Œ£ (OpetopicType IdMnd) (is-fibrant ‚àò Hom)

  postulate
    Œº-pos-fst-Œ≤‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M c) (q : Pos‚Çõ M (Œ¥ p))
      ‚Üí Œº-pos-fst‚Çõ M c Œ¥ (Œº-pos‚Çõ M c Œ¥ p q) ‚Ü¶ p
    {-# REWRITE Œº-pos-fst-Œ≤‚Çõ #-}

    Œº-pos-snd-Œ≤‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M c) (q : Pos‚Çõ M (Œ¥ p))
      ‚Üí Œº-pos-snd‚Çõ M c Œ¥ (Œº-pos‚Çõ M c Œ¥ p q) ‚Ü¶ q
    {-# REWRITE Œº-pos-snd-Œ≤‚Çõ #-}

    typ-Œ≥-pos-inr : (A : ‚ä§ ‚Üí Set) ‚Üí let M = Pb IdMnd A in {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M {i} c) ‚Üí Cns M (Typ M {i} c p))
      ‚Üí (Œµ : (p : Pos M {i} c) ‚Üí Cns‚Çõ M (Typ M {i} c p , Œ¥ p))
      ‚Üí (p : Pos M {i} c) (q : Pos‚Çõ M (Œµ p))
      ‚Üí Typ‚Çõ M (Œ≥ M œÅ Œ¥ Œµ) (Œ≥-pos-inr M œÅ Œ¥ Œµ p q) ‚Ü¶ Typ‚Çõ M (Œµ p) q
    {-# REWRITE typ-Œ≥-pos-inr #-}

    typ-Œ≥-pos-inl : (A : ‚ä§ ‚Üí Set) ‚Üí let M = Pb IdMnd A in {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M {i} c) ‚Üí Cns M (Typ M {i} c p))
      ‚Üí (Œµ : (p : Pos M {i} c) ‚Üí Cns‚Çõ M (Typ M {i} c p , Œ¥ p))
      ‚Üí (p : Pos‚Çõ M œÅ)
      ‚Üí Typ‚Çõ M (Œ≥ M œÅ Œ¥ Œµ) (Œ≥-pos-inl M œÅ Œ¥ Œµ p) ‚Ü¶ Typ‚Çõ M œÅ p
    {-# REWRITE typ-Œ≥-pos-inl #-}

  module _ (X : Category lzero lzero) where
    open Category X renaming (precat to C)

    mul : action (Slice ((Pb IdMnd (cst obj)))) Œª { ((_ , x) , c , y) ‚Üí hom (y tt) x }
    mul _ (lf i) Œ¥ = id {snd i}
    mul _ (nd {i} c Œ¥‚ÇÅ Œµ) Œ¥ =
      Œ¥ (inl tt) ‚óè mul _ (Œµ tt) Œª p ‚Üí Œ¥ (inr (tt , p))

    is-assoc : {M : ùïÑ} {A : Idx M ‚Üí Set} (a : action M A) ‚Üí Set
    is-assoc {M} {A} a = (i : Idx M) (œÉ : Cns M i)
      ‚Üí (Œ¥ : (p : Pos M œÉ) ‚Üí Cns M (Typ M œÉ p))
      ‚Üí (ŒΩ : (p : Pos M (Œº M œÉ Œ¥)) ‚Üí A (Typ M (Œº M œÉ Œ¥) p))
      ‚Üí a i (Œº M œÉ Œ¥) ŒΩ == a i œÉ Œª p ‚Üí a _ (Œ¥ p) Œª q ‚Üí ŒΩ (Œº-pos M œÉ Œ¥ p q)

    mul-Œ≥ : {i : Idx (Pb IdMnd (cst obj))} {c : Cns (Pb IdMnd (cst obj)) i}
      ‚Üí (œÅ : Cns‚Çõ (Pb IdMnd (cst obj)) (i , c))
      ‚Üí (Œ¥ : (p : Pos (Pb IdMnd (cst obj)) {i} c)
             ‚Üí Cns (Pb IdMnd (cst obj)) (Typ (Pb IdMnd (cst obj)) {i} c p))
      ‚Üí (Œµ : (p : Pos (Pb IdMnd (cst obj)) {i} c)
             ‚Üí Cns‚Çõ (Pb IdMnd (cst obj)) (Typ (Pb IdMnd (cst obj)) {i} c p , Œ¥ p))
      ‚Üí (ŒΩ : (p : Pos (Slice ((Pb IdMnd (cst obj)))) (Œ≥ _ œÅ Œ¥ Œµ)) ‚Üí
               let ((_ , x) , _ , y) = Typ (Slice ((Pb IdMnd (cst obj)))) (Œ≥ _ œÅ Œ¥ Œµ) p
               in hom (y tt) x)
      ‚Üí mul _ (Œ≥ _ œÅ Œ¥ Œµ) ŒΩ
        == (mul _ œÅ (ŒΩ ‚àò (Œ≥-pos-inl (Pb IdMnd (cst obj)) œÅ Œ¥ Œµ)))
            ‚óè (mul _ (Œµ tt) (ŒΩ ‚àò (Œ≥-pos-inr _ œÅ Œ¥ Œµ tt)))
    mul-Œ≥ {i} (lf _) Œ¥ Œµ ŒΩ =  ! (unit-l (mul _ (Œµ tt) ŒΩ))
    mul-Œ≥ {_ , _} (nd {i} c Œ¥‚ÇÅ Œµ‚ÇÅ) Œ¥ Œµ ŒΩ =
      let hyp = mul-Œ≥ (Œµ‚ÇÅ tt) Œ¥ Œµ Œª p ‚Üí ŒΩ (inr (tt , p))
      in ap (Œª x ‚Üí ŒΩ (inl tt) ‚óè x) hyp ‚àô (! (assoc _ _ _))
      
    mul-assoc : is-assoc {(Slice ((Pb IdMnd (cst obj))))} mul
    mul-assoc .(i , Œ∑ (Pb IdMnd (Œª _ ‚Üí PreCategory.obj (Category.precat X))) i) (lf i) Œ¥ ŒΩ = idp
    mul-assoc .(i , Œº (Pb IdMnd (Œª _ ‚Üí PreCategory.obj (Category.precat X))) {i} c Œ¥‚ÇÅ) (nd {i} c Œ¥‚ÇÅ Œµ) Œ¥ ŒΩ =
      let hyp = mul-assoc _ (Œµ tt) (Œª q ‚Üí Œ¥ (inr (tt , q))) Œª q ‚Üí ŒΩ (Œ≥-pos-inr _ (Œ¥ (inl tt)) Œ¥‚ÇÅ _ tt q)
          
      in mul-Œ≥ (Œ¥ true) Œ¥‚ÇÅ (Œª p ‚Üí Œº‚Çõ _ (Œµ p) (Œª q ‚Üí Œ¥ (inr (p , q)))) ŒΩ
         ‚àô ap (Œª x ‚Üí
                mul (i , c) (Œ¥ true)
                    (ŒΩ ‚àò Œ≥-pos-inl (Pb IdMnd (cst obj)) (Œ¥ true) Œ¥‚ÇÅ
                      (Œª p ‚Üí Œº‚Çõ _ (Œµ p) (Œª q ‚Üí Œ¥ (inr (p , q)))))
                ‚óè x)  
              hyp
  
    OC : OpetopicType.OpetopicType IdMnd
    Ob OC _ = obj
    Ob (Hom OC) ((_ , x) , _ , ŒΩ) = hom (ŒΩ tt) x
    Ob (Hom (Hom OC)) ((((_ , x) , _ , ŒΩ) , f) , pd , ŒΩ') = f == mul _ pd ŒΩ'
    Hom (Hom (Hom OC)) = Terminal _

    M = Slice (Pb (Slice (Pb IdMnd (Ob OC))) (Ob (Hom OC)))

    assoc-action : action M (Ob $ Hom $ Hom $ OC)
    assoc-action .(i , Œ∑ (Pb (Slice (Pb IdMnd (Ob OC))) (Ob (Hom OC))) i) (lf i) Œ∫ = ! (unit-r (snd i))
    assoc-action .(_ , Œº (Pb (Slice (Pb IdMnd (Ob OC))) (Ob (Hom OC)))
      {(((i , x) , (j , y)) , f)} (c , ŒΩ) Œ¥)
      (nd {(((i , x) , (j , y)) , f)} (c , ŒΩ) Œ¥ Œµ) Œ∫ =
        let hyp p = assoc-action (_ , Œ¥ p) (Œµ p) Œª q ‚Üí Œ∫ (inr (p , q))
        in  Œ∫ (inl tt) ‚àô ap (mul ((i , x) , j , y) c) (Œª= hyp) ‚àô ! (mul-assoc _ c (fst ‚àò Œ¥) _)

    OC-is-fibrant : is-fibrant (Hom OC)
    base-fibrant OC-is-fibrant f œÉ ŒΩ = pathto-is-contr (mul f œÉ ŒΩ)
    base-fibrant (hom-fibrant OC-is-fibrant) ((((tt , x) , _ , y) , f) , pd , Œ∫) œÉ ŒΩ =
      inhab-prop-is-contr (assoc-action _ œÉ ŒΩ , tt) ‚¶É Œ£-level (has-level-apply (homs-sets _ _) _ _) Œª _ ‚Üí Unit-level ‚¶Ñ
    hom-fibrant (hom-fibrant OC-is-fibrant) = Terminal-is-fibrant _

    UniCat : ‚àû-category
    UniCat = OC , OC-is-fibrant

  ODelta : ‚àû-category
  ODelta = UniCat ThirdDef.Delta

  STypes : Set
  STypes = OpetopicTypeOver (IdMnd‚Üì Set) (fst ODelta)
