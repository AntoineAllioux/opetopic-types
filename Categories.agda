{-# OPTIONS --without-K --rewriting --type-in-type #-}

open import Monad
open import MonadOver
open import UniCat
open import Delta
open import OpetopicType
open import IdentityMonad
open import Pb
open import HoTT
open import IdentityMonadOver
--open import Kan

module Categories where

  ‚àû-category : Set (lsucc lzero)
  ‚àû-category = Œ£ (OpetopicType IdMnd) (is-fibrant ‚àò Hom)

  module _ (C : ‚àû-category) where

    private
      X = fst C
      fib = snd C

    foo : {x y z : Obj X}
      ‚Üí {f : Arrow X x y} {g : Arrow X y z}
      ‚Üí {h h‚ÇÅ : Arrow X x z}
      ‚Üí (Œ∏ : Simplex X f g h)
      ‚Üí (Œ∏‚ÇÅ : Simplex X f g h‚ÇÅ)
      ‚Üí h , Œ∏ == h‚ÇÅ , Œ∏‚ÇÅ
    foo {x} {y} {z} {f} {g} Œ∏ Œ∏‚ÇÅ = contr-has-all-paths ‚¶É base-fibrant fib ((tt , z) , tt , cst x) (tr X x y z) (source X g f)  ‚¶Ñ _ _
 
    comp : {x y : Obj X}
      ‚Üí (c : Cns‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x))
      ‚Üí (ŒΩ : (p : Pos‚Çõ (Pb IdMnd (Ob X)) c) ‚Üí Ob (Hom X) (Typ‚Çõ (Pb IdMnd (Ob X)) c p))
      ‚Üí Arrow X x y
    comp c ŒΩ = fst $ contr-center (base-fibrant fib _ c ŒΩ)

    fill : {x y : Obj X}
      ‚Üí (c : Cns‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x))
      ‚Üí (ŒΩ : (p : Pos‚Çõ (Pb IdMnd (Ob X)) c) ‚Üí Ob (Hom X) (Typ‚Çõ (Pb IdMnd (Ob X)) c p))
      ‚Üí _ -- Simplex X {!!} {!!} {!!}
    fill c ŒΩ = snd $ contr-center (base-fibrant fib _ c ŒΩ)
    
    id : (x : Obj X) ‚Üí Arrow X x x
    id x = comp (lf (_ , x)) Œª ()

    comp2 : {x y z : Obj X} (g : Arrow X y z) (f : Arrow X x y) ‚Üí Arrow X x z
    comp2 {x} {y} {z} g f =
      fst $ contr-center (base-fibrant fib _ (tr X _ _ _) (source X g f)) -- (nd (_ , cst y) (cst (_ , cst x)) (cst (Œ∑‚Çõ (Pb IdMnd (Ob X)) (((_ , y) , _ , cst x))))) Œª { (inl tt) ‚Üí g ; (inr (tt , inl tt)) ‚Üí f ; (inr (tt , inr ())) } )

    fill2 : {x y z : Obj X} (g : Arrow X y z) (f : Arrow X x y) ‚Üí Simplex X f g (comp2 g f)
    fill2 {x} {y} {z} g f = snd $ contr-center (base-fibrant fib _ (tr X _ _ _) (source X g f)) -- (nd (_ , cst y) (cst (_ , cst x)) (cst (Œ∑‚Çõ (Pb IdMnd (Ob X)) (((_ , y) , _ , cst x)))) ) Œª { (inl tt) ‚Üí g ; (inr (tt , inl tt)) ‚Üí f ; (inr (tt , inr ())) } )
    
    degen‚ÇÄ : {x y : Obj X} (f : Arrow X x y) ‚Üí Simplex X (id x) f f
    degen‚ÇÄ f = {!!}

    degen‚ÇÅ : {x y : Obj X} (f : Arrow X x y) ‚Üí Simplex X f (id y) f
    degen‚ÇÅ f = {!!}

    unit-l-cell‚ÇÄ : {x y : Obj X} (f : Arrow X x y) ‚Üí _ -- Simplex X f (id y) f
    unit-l-cell‚ÇÄ {x} {y} f = fst $ contr-center (base-fibrant (hom-fibrant fib) _
      (nd _
          (Œª { (inl tt) ‚Üí lf (_ , y) , Œª() ;
               (inr (tt , inl tt)) ‚Üí  Œ∑‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x) , _  ;
               (inr (tt , inr ())) })
          Œª { (inl tt) ‚Üí Œ∑‚Çõ N (_ , lf (_ , y) , Œª ()) ;
              (inr (tt , inl tt)) ‚Üí lf (_ , f) ;
              (inr (tt , inr (tt , ()))) })
          Œª { (inl tt) ‚Üí fill2 (id y) f  ;
              (inr (inl tt , inl tt)) ‚Üí drp ;
              (inr (inl tt , inr (() , _))) ;
              (inr (inr (tt , inl tt) , ())) ;
              (inr (inr (tt , inr (tt , ())) , _)) })
        where drp = snd $ contr-center (base-fibrant fib _ (lf (_ , y)) Œª ())

              N = Pb (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)) 

    unit-l-cell‚ÇÅ : {x y : Obj X} (f : Arrow X x y) ‚Üí _
    unit-l-cell‚ÇÅ {x} {y} f = fst $ contr-center (base-fibrant (hom-fibrant fib) _ (lf (_ , f)) Œª())

    unit-l2 : {x y : Obj X} (f : Arrow X x y) ‚Üí comp2 (id y) f == f
    unit-l2 {x} {y} f =
      let foo = base-fibrant fib _ (Œ∑‚Çõ _ ((_ , y) , _ , cst x)) {!!} 
         
          foo2 : let tr : Cns‚Çö (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)) (_ , f)
                     tr = (nd (tt , cst y) (cst (tt , cst x))
                           (cst (Œ∑‚Çõ (Pb IdMnd (Ob X)) ((tt , y) , tt , cst x))))
                           , (Œª { true ‚Üí id y
                             ; (inr (tt , true)) ‚Üí f
                             ; (inr (tt , inr ()))
                           })

                     œï : (p : Pos‚Çö (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)) {i = _ , f} tr) ‚Üí Cns‚Çö (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)) (Typ‚Çö (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)) {i = _ , f} tr p) 
                     œï = (Œª { true ‚Üí lf (tt , y) , (Œª ())
                          ; (inr (tt , true))
                             ‚Üí Œ∑‚Çõ (Pb IdMnd (Ob X)) ((tt , y) , tt , cst x) , (Œª _ ‚Üí  f )
                            ; (inr (tt , inr ()))
                            })
                      
                 in Œº‚Çö (Slice (Pb IdMnd (Ob X))) (Œª z ‚Üí Ob (Hom X) z)
                   {i = ((tt , y) , tt , cst x) , f}
                   tr œï == Œ∑‚Çõ (Pb IdMnd (Ob X)) ((tt , y) , tt , cst x) , (Œª _ ‚Üí f)
          foo2 = pair= idp {!Œª= (Œ∑-pos-elim‚Çõ (Pb IdMnd (Ob X)) ? ? idp)!}


      in fst= (contr-has-all-paths ‚¶É foo ‚¶Ñ (_ , {!unit-l-cell‚ÇÄ f!}) (_ , unit-l-cell‚ÇÅ f))


    unit-r2 : {x y : Obj X} (f : Arrow X x y) ‚Üí comp2 f (id x) == f
    unit-r2 = {!!}

    assoc2 : {x y z t : Obj X}
      ‚Üí (h : Arrow X z t) (g : Arrow X y z) (f : Arrow X x y)
      ‚Üí comp2 (comp2 h g) f == comp2 h (comp2 g f)
    assoc2 h g f = {!!}

    precat : PreCategory lzero lzero
    PreCategory.obj precat = Obj X
    PreCategory.hom precat x y = Arrow X x y
    PreCategory._‚óè_ precat = comp2
    PreCategory.assoc precat = assoc2
    PreCategory.id precat {x} = id x
    PreCategory.unit-l precat = unit-l2
    PreCategory.unit-r precat = unit-r2
    PreCategory.homs-sets precat = {!!}

    record is-‚àûcat-equiv {x y : Obj X} (f : Arrow X x y) : Set where
      constructor mk-‚àûcat-equiv
      field
        g   : Arrow X y x
        f-g : Simplex X f g (id x) 
        g-f : Simplex X g f (id y) 

    ‚àûcat-equiv : (x y : Ob X tt) ‚Üí Set 
    ‚àûcat-equiv x y = Œ£ (Arrow X x y) is-‚àûcat-equiv

    id-is-‚àûcat-equiv : (x : Obj X) ‚Üí is-‚àûcat-equiv (id x)
    is-‚àûcat-equiv.g (id-is-‚àûcat-equiv x) = id _
    is-‚àûcat-equiv.f-g (id-is-‚àûcat-equiv x) = degen‚ÇÄ (id _)
    is-‚àûcat-equiv.g-f (id-is-‚àûcat-equiv x) = degen‚ÇÄ (id _)

    ‚àûcat-equiv-to-cat-equiv : {x y : Obj X} {f : Arrow X x y}
      ‚Üí is-‚àûcat-equiv f
      ‚Üí is-cat-equiv {P = precat} f
  {-  is-cat-equiv.g (‚àûcat-equiv-to-cat-equiv {x} {y} {f} (mk-‚àûcat-equiv g f-g g-f)) = g
    is-cat-equiv.f-g (‚àûcat-equiv-to-cat-equiv {x} {y} {f} (mk-‚àûcat-equiv g f-g g-f)) =
      fst= (foo (OC , OC-is-fibrant) (fill2 (OC , OC-is-fibrant) f g) g-f)
    is-cat-equiv.g-f (‚àûcat-equiv-to-cat-equiv {x} {y} {f} (mk-‚àûcat-equiv g f-g g-f)) =
      fst= (foo (OC , OC-is-fibrant) (fill2 (OC , OC-is-fibrant) g f) f-g)
-}

    
    is-complete : Set
    is-complete = {x y z : Obj X}
      ‚Üí (f : ‚àûcat-equiv x y) (g : ‚àûcat-equiv x z)
      ‚Üí ((y , fst f) == (z , fst g)) ‚âÉ Œ£ (‚àûcat-equiv y z) Œª h ‚Üí Simplex X (fst f) (fst h) (fst g)

  ‚àû-ucategory : Set (lsucc lzero)
  ‚àû-ucategory = Œ£ ‚àû-category is-complete

  postulate
    Œ∑-pos-typ‚Çõ : (M : ùïÑ) (i : Idx‚Çõ M)
      ‚Üí (p : Pos‚Çõ M (Œ∑‚Çõ M i))
      ‚Üí Typ‚Çõ M {i = i} (Œ∑‚Çõ M i) p ‚Ü¶ i
    {-# REWRITE Œ∑-pos-typ‚Çõ #-}

    Œ∑-pos-typ‚Çõ‚Çö : let M  = IdMnd in (A : Idx M ‚Üí Set) (i : Idx‚Çõ (Pb M A))
      ‚Üí (p : Pos‚Çõ (Pb M A) (Œ∑‚Çõ (Pb M A) i))
      ‚Üí Typ‚Çõ (Pb M A) {i = i} (Œ∑‚Çõ (Pb M A) i) p ‚Ü¶ i
    {-# REWRITE Œ∑-pos-typ‚Çõ‚Çö #-}

    Œº-pos-typ‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M (Œº‚Çõ M c Œ¥))
      ‚Üí Typ‚Çõ M (Œº‚Çõ M c Œ¥) p ‚Ü¶ Typ‚Çõ M (Œ¥ (Œº-pos-fst‚Çõ M c Œ¥ p)) (Œº-pos-snd‚Çõ M c Œ¥ p)
    {-# REWRITE Œº-pos-typ‚Çõ #-}

    Œº-pos-fst-Œ≤‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M c) (q : Pos‚Çõ M (Œ¥ p))
      ‚Üí Œº-pos-fst‚Çõ M c Œ¥ (Œº-pos‚Çõ M c Œ¥ p q) ‚Ü¶ p
    {-# REWRITE Œº-pos-fst-Œ≤‚Çõ #-}

    Œº-pos-snd-Œ≤‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M c) (q : Pos‚Çõ M (Œ¥ p))
      ‚Üí Œº-pos-snd‚Çõ M c Œ¥ (Œº-pos‚Çõ M c Œ¥ p q) ‚Ü¶ q
    {-# REWRITE Œº-pos-snd-Œ≤‚Çõ #-}

    Œº-pos-Œ∑‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M (Œº‚Çõ M c Œ¥))
      ‚Üí Œº-pos‚Çõ M c Œ¥ (Œº-pos-fst‚Çõ M c Œ¥ p) (Œº-pos-snd‚Çõ M c Œ¥ p) ‚Ü¶ p
    {-# REWRITE Œº-pos-Œ∑‚Çõ #-}
    
    -- Œº laws
    Œº-unit-right‚Çõ : (M : ùïÑ) (i : Idx‚Çõ M)
      ‚Üí (c : Cns‚Çõ M i)
      ‚Üí Œº‚Çõ M c (Œª p ‚Üí Œ∑‚Çõ M (Typ‚Çõ M c p)) ‚Ü¶ c
    {-# REWRITE Œº-unit-right‚Çõ #-}

    Œº-unit-left‚Çõ : (M : ùïÑ) (i : Idx‚Çõ M) 
      ‚Üí (Œ¥ : (p : Pos‚Çõ M (Œ∑‚Çõ M i)) ‚Üí Cns‚Çõ M i)
      ‚Üí Œº‚Çõ M (Œ∑‚Çõ M i) Œ¥ ‚Ü¶ Œ¥ (Œ∑-pos‚Çõ M i)
    --{-# REWRITE Œº-unit-left‚Çõ #-}

    Œº-assoc‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (Œµ : (p : Pos‚Çõ M (Œº‚Çõ M c Œ¥)) ‚Üí Cns‚Çõ M (Typ‚Çõ M (Œº‚Çõ M c Œ¥) p))
      ‚Üí Œº‚Çõ M (Œº‚Çõ M c Œ¥) Œµ ‚Ü¶ Œº‚Çõ M c (Œª p ‚Üí Œº‚Çõ M (Œ¥ p) (Œª q ‚Üí Œµ (Œº-pos‚Çõ M c Œ¥ p q)))
    {-# REWRITE Œº-assoc‚Çõ #-}

    Œ≥-assoc : (M : ùïÑ) {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
      ‚Üí (Œµ : (p : Pos M c) ‚Üí Cns‚Çõ M (Typ M c p , Œ¥ p))
      ‚Üí (Œ¥‚ÇÅ : (p : Pos M (Œº M c Œ¥)) ‚Üí Cns M (Typ M (Œº M c Œ¥) p))
      ‚Üí (Œµ‚ÇÅ : (p : Pos M (Œº M c Œ¥)) ‚Üí Cns‚Çõ M (Typ M (Œº M c Œ¥) p , Œ¥‚ÇÅ p))
      ‚Üí Œ≥ M (Œ≥ M œÅ Œ¥ Œµ) Œ¥‚ÇÅ Œµ‚ÇÅ ‚Ü¶ Œ≥ M œÅ (Œª p ‚Üí Œº M (Œ¥ p) (Œ¥‚ÇÅ ‚àò Œº-pos M c Œ¥ p)) Œª p ‚Üí Œ≥ M (Œµ p) (Œ¥‚ÇÅ ‚àò Œº-pos M c Œ¥ p) (Œµ‚ÇÅ ‚àò Œº-pos M c Œ¥ p)
    {-# REWRITE Œ≥-assoc #-}

    Œ≥-unit-r : (M : ùïÑ) {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
      ‚Üí (Œµ : (p : Pos M c) ‚Üí Cns‚Çõ M (Typ M c p , Œ¥ p))
      ‚Üí Œ≥ M œÅ (Œª p ‚Üí Œ∑ M (Typ M c p)) (Œª p ‚Üí lf (Typ M c p)) ‚Ü¶ œÅ
    {-# REWRITE Œ≥-unit-r #-}

    typ-Œ≥-pos-inr : (A : ‚ä§ ‚Üí Set) ‚Üí let M = Pb IdMnd A in {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M {i} c) ‚Üí Cns M (Typ M {i} c p))
      ‚Üí (Œµ : (p : Pos M {i} c) ‚Üí Cns‚Çõ M (Typ M {i} c p , Œ¥ p))
      ‚Üí (p : Pos M {i} c) (q : Pos‚Çõ M (Œµ p))
      ‚Üí Typ‚Çõ M (Œ≥ M œÅ Œ¥ Œµ) (Œ≥-pos-inr M œÅ Œ¥ Œµ p q) ‚Ü¶ Typ‚Çõ M (Œµ p) q
    {-# REWRITE typ-Œ≥-pos-inr #-}

    typ-Œ≥-pos-inl : (A : ‚ä§ ‚Üí Set) ‚Üí let M = Pb IdMnd A in {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M {i} c) ‚Üí Cns M (Typ M {i} c p))
      ‚Üí (Œµ : (p : Pos M {i} c) ‚Üí Cns‚Çõ M (Typ M {i} c p , Œ¥ p))
      ‚Üí (p : Pos‚Çõ M œÅ)
      ‚Üí Typ‚Çõ M (Œ≥ M œÅ Œ¥ Œµ) (Œ≥-pos-inl M œÅ Œ¥ Œµ p) ‚Ü¶ Typ‚Çõ M œÅ p
    {-# REWRITE typ-Œ≥-pos-inl #-}

  module _ (X : Category lzero lzero) where
    open Category X renaming (precat to C ; id to id')

    mul : action (Slice ((Pb IdMnd (cst obj)))) Œª { ((_ , x) , c , y) ‚Üí hom (y tt) x }
    mul _ (lf i) Œ¥ = id' {snd i}
    mul _ (nd {i} c Œ¥‚ÇÅ Œµ) Œ¥ =
      Œ¥ (inl tt) ‚óè mul _ (Œµ tt) Œª p ‚Üí Œ¥ (inr (tt , p))

    is-assoc : {M : ùïÑ} {A : Idx M ‚Üí Set} (a : action M A) ‚Üí Set
    is-assoc {M} {A} a = (i : Idx M) (œÉ : Cns M i)
      ‚Üí (Œ¥ : (p : Pos M œÉ) ‚Üí Cns M (Typ M œÉ p))
      ‚Üí (ŒΩ : (p : Pos M (Œº M œÉ Œ¥)) ‚Üí A (Typ M (Œº M œÉ Œ¥) p))
      ‚Üí a i (Œº M œÉ Œ¥) ŒΩ == a i œÉ Œª p ‚Üí a _ (Œ¥ p) Œª q ‚Üí ŒΩ (Œº-pos M œÉ Œ¥ p q)

    mul-Œ≥ : {i : Idx (Pb IdMnd (cst obj))} {c : Cns (Pb IdMnd (cst obj)) i}
      ‚Üí (œÅ : Cns‚Çõ (Pb IdMnd (cst obj)) (i , c))
      ‚Üí (Œ¥ : (p : Pos (Pb IdMnd (cst obj)) {i} c)
             ‚Üí Cns (Pb IdMnd (cst obj)) (Typ (Pb IdMnd (cst obj)) {i} c p))
      ‚Üí (Œµ : (p : Pos (Pb IdMnd (cst obj)) {i} c)
             ‚Üí Cns‚Çõ (Pb IdMnd (cst obj)) (Typ (Pb IdMnd (cst obj)) {i} c p , Œ¥ p))
      ‚Üí (ŒΩ : (p : Pos (Slice ((Pb IdMnd (cst obj)))) (Œ≥ _ œÅ Œ¥ Œµ)) ‚Üí
               let ((_ , x) , _ , y) = Typ (Slice ((Pb IdMnd (cst obj)))) (Œ≥ _ œÅ Œ¥ Œµ) p
               in hom (y tt) x)
      ‚Üí mul _ (Œ≥ _ œÅ Œ¥ Œµ) ŒΩ
        == (mul _ œÅ (ŒΩ ‚àò (Œ≥-pos-inl (Pb IdMnd (cst obj)) œÅ Œ¥ Œµ)))
            ‚óè (mul _ (Œµ tt) (ŒΩ ‚àò (Œ≥-pos-inr _ œÅ Œ¥ Œµ tt)))
    mul-Œ≥ {i} (lf _) Œ¥ Œµ ŒΩ =  ! (unit-l (mul _ (Œµ tt) ŒΩ))
    mul-Œ≥ {_ , _} (nd {i} c Œ¥‚ÇÅ Œµ‚ÇÅ) Œ¥ Œµ ŒΩ =
      let hyp = mul-Œ≥ (Œµ‚ÇÅ tt) Œ¥ Œµ Œª p ‚Üí ŒΩ (inr (tt , p))
      in ap (Œª x ‚Üí ŒΩ (inl tt) ‚óè x) hyp ‚àô (! (assoc _ _ _))
      
    mul-assoc : is-assoc {(Slice ((Pb IdMnd (cst obj))))} mul
    mul-assoc .(i , Œ∑ (Pb IdMnd (Œª _ ‚Üí PreCategory.obj (Category.precat X))) i) (lf i) Œ¥ ŒΩ = idp
    mul-assoc .(i , Œº (Pb IdMnd (Œª _ ‚Üí PreCategory.obj (Category.precat X))) {i} c Œ¥‚ÇÅ) (nd {i} c Œ¥‚ÇÅ Œµ) Œ¥ ŒΩ =
      let hyp = mul-assoc _ (Œµ tt) (Œª q ‚Üí Œ¥ (inr (tt , q))) Œª q ‚Üí ŒΩ (Œ≥-pos-inr _ (Œ¥ (inl tt)) Œ¥‚ÇÅ _ tt q)
          
      in mul-Œ≥ (Œ¥ true) Œ¥‚ÇÅ (Œª p ‚Üí Œº‚Çõ _ (Œµ p) (Œª q ‚Üí Œ¥ (inr (p , q)))) ŒΩ
         ‚àô ap (Œª x ‚Üí
                mul (i , c) (Œ¥ true)
                    (ŒΩ ‚àò Œ≥-pos-inl (Pb IdMnd (cst obj)) (Œ¥ true) Œ¥‚ÇÅ
                      (Œª p ‚Üí Œº‚Çõ _ (Œµ p) (Œª q ‚Üí Œ¥ (inr (p , q)))))
                ‚óè x)  
              hyp
  
    OC : OpetopicType.OpetopicType IdMnd
    Ob OC _ = obj
    Ob (Hom OC) ((_ , x) , _ , ŒΩ) = hom (ŒΩ tt) x
    Ob (Hom (Hom OC)) ((((_ , x) , _ , ŒΩ) , f) , pd , ŒΩ') = f == mul _ pd ŒΩ'
    Hom (Hom (Hom OC)) = Terminal _

    M = Slice (Pb (Slice (Pb IdMnd (Ob OC))) (Ob (Hom OC)))

    assoc-action : action M (Ob $ Hom $ Hom $ OC)
    assoc-action .(i , Œ∑ (Pb (Slice (Pb IdMnd (Ob OC))) (Ob (Hom OC))) i) (lf i) Œ∫ = ! (unit-r (snd i))
    assoc-action .(_ , Œº (Pb (Slice (Pb IdMnd (Ob OC))) (Ob (Hom OC)))
      {(((i , x) , (j , y)) , f)} (c , ŒΩ) Œ¥)
      (nd {(((i , x) , (j , y)) , f)} (c , ŒΩ) Œ¥ Œµ) Œ∫ =
        let hyp p = assoc-action (_ , Œ¥ p) (Œµ p) Œª q ‚Üí Œ∫ (inr (p , q))
        in  Œ∫ (inl tt) ‚àô ap (mul ((i , x) , j , y) c) (Œª= hyp) ‚àô ! (mul-assoc _ c (fst ‚àò Œ¥) _)

    OC-is-fibrant : is-fibrant (Hom OC)
    {-
    base-fibrant OC-is-fibrant .(i , Œ∑ (Pb IdMnd (Ob OC)) i) (lf i) ŒΩ =
      has-level-in ((id' , idp) , Œª _ ‚Üí contr-has-all-paths ‚¶É pathto-is-contr id' ‚¶Ñ _ _)
    base-fibrant OC-is-fibrant .(_ , Œº (Pb IdMnd (Ob OC)) c Œ¥) (nd c Œ¥ Œµ) ŒΩ =
      has-level-in (({!!} , {!!}) , {!!})
    --has-level-in ((({!ŒΩ true!} ‚óè {!ŒΩ true!}) , {!!}) , {!!}) -- pathto-is-contr (mul f œÉ ŒΩ)
    base-fibrant (hom-fibrant OC-is-fibrant) ((((tt , x) , _ , y) , f) , pd , Œ∫) œÉ ŒΩ =
      inhab-prop-is-contr (assoc-action _ œÉ ŒΩ , tt) ‚¶É Œ£-level (has-level-apply (homs-sets _ _) _ _) Œª _ ‚Üí Unit-level ‚¶Ñ
    hom-fibrant (hom-fibrant OC-is-fibrant) = Terminal-is-fibrant _

    -}

    
    bar : C == precat (OC , OC-is-fibrant)
    bar = {!!}

    OC-is-complete : is-complete (OC , OC-is-fibrant)
    OC-is-complete {x} {y} {z} (f , p) (g , q) = h , is-eq h k {!!} {!!}
      where h : y , f == z , g
                ‚Üí Œ£ (‚àûcat-equiv _ y z) (Œª { (h , r) ‚Üí Simplex OC f h g })
            h idp = (id (OC , OC-is-fibrant) y , id-is-‚àûcat-equiv _ y) , degen‚ÇÅ (OC , OC-is-fibrant) f

            k : Œ£ (‚àûcat-equiv _ y z) (Œª { (h , r) ‚Üí Simplex OC f h g }) ‚Üí y , f == z , g
            k ((h , r) , simpl) =
              let foo2 : _‚âä_ {P = precat (OC , OC-is-fibrant)} y z 
                  foo2 = (h , ‚àûcat-equiv-to-cat-equiv _ r) -- ‚àûcat-equiv-to-cat-equiv {f = h} r)
                  foo = is-equiv.g (univalent y z) {!foo2!} -- foo2
              in pair= {!!} {!!}

    UniCat : ‚àû-ucategory
    UniCat = (OC , OC-is-fibrant) , OC-is-complete

  ODelta : ‚àû-ucategory
  ODelta = UniCat ThirdDef.Delta

  STypes : Set
  STypes = OpetopicTypeOver (IdMnd‚Üì Set) (fst $ fst $ ODelta)

  module _ (C : ‚àû-ucategory) where

    private 
      X = fst $ fst C
      fib = snd $ fst C
      cmpl = snd C
      
    

    equiv-to-equiv : {x y : Obj X} {f : Arrow X x y}
      ‚Üí is-cat-equiv {P = precat (X , fib)} f ‚âÉ is-‚àûcat-equiv (X , fib) f
    equiv-to-equiv {f = f} = h , is-eq h k {!!} {!!}
      where h : is-cat-equiv {P = precat (X , fib)} f ‚Üí is-‚àûcat-equiv (X , fib) f
            is-‚àûcat-equiv.g (h x) = is-cat-equiv.g x
            is-‚àûcat-equiv.f-g (h (mk-cat-equiv g f-g g-f)) =
              transport (Œª x ‚Üí Simplex X f g x) g-f (fill2 (X , fib) g f)
            is-‚àûcat-equiv.g-f (h (mk-cat-equiv g f-g g-f)) =
              transport (Œª x ‚Üí Simplex X g f x) f-g (fill2 (X , fib) f g)

            

            k : is-‚àûcat-equiv (X , fib) f ‚Üí is-cat-equiv {P = precat (X , fib)} f
            is-cat-equiv.g (k x) = is-‚àûcat-equiv.g x
            is-cat-equiv.f-g (k x) = {!!}
            is-cat-equiv.g-f (k x) = {!!}
   

    unival : (x y : Obj X) ‚Üí is-equiv (id-to-iso {P = precat (X , fib)} x y)
    unival x y = is-eq (id-to-iso {P = precat (X , fib)} x y) g h i
      where g : _‚âä_ {P = precat (X , fib)} x y ‚Üí x == y
            g (f , mk-cat-equiv g f-g g-f) =
              let e = cmpl (_ , ‚Äì> equiv-to-equiv (mk-cat-equiv g f-g g-f)) (id (X , fib) x , id-is-‚àûcat-equiv _ x)
                  g-is-equiv = ‚Äì> equiv-to-equiv (cat-equiv-inv (mk-cat-equiv g f-g g-f))
                  
                  fill = transport (Œª h ‚Üí Simplex X f g h) g-f (fill2 (X , fib) g f)

                  foo : y , f == x , id (X , fib) x
                  foo = <‚Äì e ((g , g-is-equiv) , fill)
                   
              in ! (fst= (<‚Äì e ((g , g-is-equiv) , fill)))

            h : (e : x ‚âä y) ‚Üí id-to-iso x y (g e) == e
            h (f , mk-cat-equiv l f-g g-f) =
              let foo : fst (id-to-iso {P = precat (X , fib)} x y (g (f , mk-cat-equiv l f-g g-f))) == f
                  foo = {!idp!}
              in pair= {!!} {!!}

            i : (p : x == y) ‚Üí g (id-to-iso x y p) == p
            i idp = {!idp!}
              
    cat : Category lzero lzero
    Category.precat cat = precat (X , fib)
    Category.univalent cat = unival

