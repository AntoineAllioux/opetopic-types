{-# OPTIONS --without-K --rewriting --type-in-type #-}

open import Monad
open import MonadOver
open import UniCat
open import Delta
open import OpetopicType
open import IdentityMonad
open import Pb
open import HoTT
open import IdentityMonadOver

module Categories where

  postulate
    Œ∑-pos-typ‚Çõ : (M : ùïÑ) (i : Idx‚Çõ M)
      ‚Üí (p : Pos‚Çõ M (Œ∑‚Çõ M i))
      ‚Üí Typ‚Çõ M {i = i} (Œ∑‚Çõ M i) p ‚Ü¶ i
    {-# REWRITE Œ∑-pos-typ‚Çõ #-}

    Œ∑-pos-typ‚Çõ‚Çö : let M  = IdMnd in (A : Idx M ‚Üí Set) (i : Idx‚Çõ (Pb M A))
      ‚Üí (p : Pos‚Çõ (Pb M A) (Œ∑‚Çõ (Pb M A) i))
      ‚Üí Typ‚Çõ (Pb M A) {i = i} (Œ∑‚Çõ (Pb M A) i) p ‚Ü¶ i
    {-# REWRITE Œ∑-pos-typ‚Çõ‚Çö #-}

    Œº-pos-typ‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M (Œº‚Çõ M c Œ¥))
      ‚Üí Typ‚Çõ M (Œº‚Çõ M c Œ¥) p ‚Ü¶ Typ‚Çõ M (Œ¥ (Œº-pos-fst‚Çõ M c Œ¥ p)) (Œº-pos-snd‚Çõ M c Œ¥ p)
    {-# REWRITE Œº-pos-typ‚Çõ #-}

    Œº-pos-fst-Œ≤‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M c) (q : Pos‚Çõ M (Œ¥ p))
      ‚Üí Œº-pos-fst‚Çõ M c Œ¥ (Œº-pos‚Çõ M c Œ¥ p q) ‚Ü¶ p
    {-# REWRITE Œº-pos-fst-Œ≤‚Çõ #-}

    Œº-pos-snd-Œ≤‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M c) (q : Pos‚Çõ M (Œ¥ p))
      ‚Üí Œº-pos-snd‚Çõ M c Œ¥ (Œº-pos‚Çõ M c Œ¥ p q) ‚Ü¶ q
    {-# REWRITE Œº-pos-snd-Œ≤‚Çõ #-}

    Œº-pos-Œ∑‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M (Œº‚Çõ M c Œ¥))
      ‚Üí Œº-pos‚Çõ M c Œ¥ (Œº-pos-fst‚Çõ M c Œ¥ p) (Œº-pos-snd‚Çõ M c Œ¥ p) ‚Ü¶ p
    {-# REWRITE Œº-pos-Œ∑‚Çõ #-}
    
    -- Œº laws
    Œº-unit-right‚Çõ : (M : ùïÑ) (i : Idx‚Çõ M)
      ‚Üí (c : Cns‚Çõ M i)
      ‚Üí Œº‚Çõ M c (Œª p ‚Üí Œ∑‚Çõ M (Typ‚Çõ M c p)) ‚Ü¶ c
    {-# REWRITE Œº-unit-right‚Çõ #-}

    Œº-unit-left‚Çõ : (M : ùïÑ) (i : Idx‚Çõ M) 
      ‚Üí (Œ¥ : (p : Pos‚Çõ M (Œ∑‚Çõ M i)) ‚Üí Cns‚Çõ M i)
      ‚Üí Œº‚Çõ M (Œ∑‚Çõ M i) Œ¥ ‚Ü¶ Œ¥ (Œ∑-pos‚Çõ M i)
    --{-# REWRITE Œº-unit-left‚Çõ #-}

    Œº-assoc‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (Œµ : (p : Pos‚Çõ M (Œº‚Çõ M c Œ¥)) ‚Üí Cns‚Çõ M (Typ‚Çõ M (Œº‚Çõ M c Œ¥) p))
      ‚Üí Œº‚Çõ M (Œº‚Çõ M c Œ¥) Œµ ‚Ü¶ Œº‚Çõ M c (Œª p ‚Üí Œº‚Çõ M (Œ¥ p) (Œª q ‚Üí Œµ (Œº-pos‚Çõ M c Œ¥ p q)))
    {-# REWRITE Œº-assoc‚Çõ #-}

    Œ≥-assoc : (M : ùïÑ) {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
      ‚Üí (Œµ : (p : Pos M c) ‚Üí Cns‚Çõ M (Typ M c p , Œ¥ p))
      ‚Üí (Œ¥‚ÇÅ : (p : Pos M (Œº M c Œ¥)) ‚Üí Cns M (Typ M (Œº M c Œ¥) p))
      ‚Üí (Œµ‚ÇÅ : (p : Pos M (Œº M c Œ¥)) ‚Üí Cns‚Çõ M (Typ M (Œº M c Œ¥) p , Œ¥‚ÇÅ p))
      ‚Üí Œ≥ M (Œ≥ M œÅ Œ¥ Œµ) Œ¥‚ÇÅ Œµ‚ÇÅ ‚Ü¶ Œ≥ M œÅ (Œª p ‚Üí Œº M (Œ¥ p) (Œ¥‚ÇÅ ‚àò Œº-pos M c Œ¥ p)) Œª p ‚Üí Œ≥ M (Œµ p) (Œ¥‚ÇÅ ‚àò Œº-pos M c Œ¥ p) (Œµ‚ÇÅ ‚àò Œº-pos M c Œ¥ p)
    {-# REWRITE Œ≥-assoc #-}

    Œ≥-unit-r : (M : ùïÑ) {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
      ‚Üí (Œµ : (p : Pos M c) ‚Üí Cns‚Çõ M (Typ M c p , Œ¥ p))
      ‚Üí Œ≥ M œÅ (Œª p ‚Üí Œ∑ M (Typ M c p)) (Œª p ‚Üí lf (Typ M c p)) ‚Ü¶ œÅ
    {-# REWRITE Œ≥-unit-r #-}

    typ-Œ≥-pos-inr : (A : ‚ä§ ‚Üí Set) ‚Üí let M = Pb IdMnd A in {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M {i} c) ‚Üí Cns M (Typ M {i} c p))
      ‚Üí (Œµ : (p : Pos M {i} c) ‚Üí Cns‚Çõ M (Typ M {i} c p , Œ¥ p))
      ‚Üí (p : Pos M {i} c) (q : Pos‚Çõ M (Œµ p))
      ‚Üí Typ‚Çõ M (Œ≥ M œÅ Œ¥ Œµ) (Œ≥-pos-inr M œÅ Œ¥ Œµ p q) ‚Ü¶ Typ‚Çõ M (Œµ p) q
    {-# REWRITE typ-Œ≥-pos-inr #-}

    typ-Œ≥-pos-inl : (A : ‚ä§ ‚Üí Set) ‚Üí let M = Pb IdMnd A in {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M {i} c) ‚Üí Cns M (Typ M {i} c p))
      ‚Üí (Œµ : (p : Pos M {i} c) ‚Üí Cns‚Çõ M (Typ M {i} c p , Œ¥ p))
      ‚Üí (p : Pos‚Çõ M œÅ)
      ‚Üí Typ‚Çõ M (Œ≥ M œÅ Œ¥ Œµ) (Œ≥-pos-inl M œÅ Œ¥ Œµ p) ‚Ü¶ Typ‚Çõ M œÅ p
    {-# REWRITE typ-Œ≥-pos-inl #-}

  ‚àû-category : Set (lsucc lzero)
  ‚àû-category = Œ£ (OpetopicType IdMnd) (is-fibrant ‚àò Hom)

  1-category : Set (lsucc lzero)
  1-category = Œ£ ‚àû-category Œª { (X , fib) ‚Üí (i : Idx‚Çõ (Pb IdMnd (Ob X))) ‚Üí is-set (Ob (Hom X) i) } 

  module _ (C : 1-category) where

    private
      X = fst (fst C)
      fib = snd (fst C)
      hom-sets = snd C

    comp-has-all-paths : {x y z : Obj X}
      ‚Üí {f : Arrow X x y} {g : Arrow X y z}
      ‚Üí {h h‚ÇÅ : Arrow X x z}
      ‚Üí (Œ∏ : Simplex X f g h)
      ‚Üí (Œ∏‚ÇÅ : Simplex X f g h‚ÇÅ)
      ‚Üí h , Œ∏ == h‚ÇÅ , Œ∏‚ÇÅ
    comp-has-all-paths {x} {y} {z} {f} {g} Œ∏ Œ∏‚ÇÅ = contr-has-all-paths ‚¶É base-fibrant fib ((tt , z) , tt , cst x) (tr X x y z) (source X g f)  ‚¶Ñ _ _
 
    comp : {x y : Obj X}
      ‚Üí (c : Cns‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x))
      ‚Üí (ŒΩ : (p : Pos‚Çõ (Pb IdMnd (Ob X)) c) ‚Üí Ob (Hom X) (Typ‚Çõ (Pb IdMnd (Ob X)) c p))
      ‚Üí Arrow X x y
    comp c ŒΩ = fst $ contr-center (base-fibrant fib _ c ŒΩ)

    fill : {x y : Obj X}
      ‚Üí (c : Cns‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x))
      ‚Üí (ŒΩ : (p : Pos‚Çõ (Pb IdMnd (Ob X)) c) ‚Üí Ob (Hom X) (Typ‚Çõ (Pb IdMnd (Ob X)) c p))
      ‚Üí _ -- Simplex X {!!} {!!} {!!}
    fill c ŒΩ = snd $ contr-center (base-fibrant fib _ c ŒΩ)
    
    id : (x : Obj X) ‚Üí Arrow X x x
    id x = comp (lf (_ , x)) Œª ()

    comp2 : {x y z : Obj X} (g : Arrow X y z) (f : Arrow X x y) ‚Üí Arrow X x z
    comp2 {x} {y} {z} g f =
      fst $ contr-center (base-fibrant fib _ (tr X _ _ _) (source X g f)) -- (nd (_ , cst y) (cst (_ , cst x)) (cst (Œ∑‚Çõ (Pb IdMnd (Ob X)) (((_ , y) , _ , cst x))))) Œª { (inl tt) ‚Üí g ; (inr (tt , inl tt)) ‚Üí f ; (inr (tt , inr ())) } )

    fill2 : {x y z : Obj X} (g : Arrow X y z) (f : Arrow X x y) ‚Üí Simplex X f g (comp2 g f)
    fill2 {x} {y} {z} g f = snd $ contr-center (base-fibrant fib _ (tr X _ _ _) (source X g f)) -- (nd (_ , cst y) (cst (_ , cst x)) (cst (Œ∑‚Çõ (Pb IdMnd (Ob X)) (((_ , y) , _ , cst x)))) ) Œª { (inl tt) ‚Üí g ; (inr (tt , inl tt)) ‚Üí f ; (inr (tt , inr ())) } )
    
    degen‚ÇÄ : {x y : Obj X} (f : Arrow X x y) ‚Üí Simplex X (id x) f f
    degen‚ÇÄ f = {!!}

    degen‚ÇÅ : {x y : Obj X} (f : Arrow X x y) ‚Üí Simplex X f (id y) f
    degen‚ÇÅ f = {!!}

    unit-l-cell‚ÇÄ : {x y : Obj X} (f : Arrow X x y) ‚Üí Ob (Hom (Hom X)) _
    unit-l-cell‚ÇÄ {x} {y} f = fst $ contr-center (base-fibrant (hom-fibrant fib) _
      (nd _
          (Œª { (inl tt) ‚Üí lf (_ , y) , Œª() ;
               (inr (tt , inl tt)) ‚Üí  Œ∑‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x) , _  ;
               (inr (tt , inr ())) })
          Œª { (inl tt) ‚Üí Œ∑‚Çõ N (_ , lf (_ , y) , Œª ()) ;
              (inr (tt , inl tt)) ‚Üí lf (_ , f) ;
              (inr (tt , inr (tt , ()))) })
              
      Œª { (inl tt) ‚Üí fill2 (id y) f  ;
          (inr (inl tt , inl tt)) ‚Üí drp ;
          (inr (inl tt , inr (() , _))) ;
          (inr (inr (tt , inl tt) , ())) ;
          (inr (inr (tt , inr (tt , ())) , _)) })
        where drp = snd $ contr-center (base-fibrant fib _ (lf (_ , y)) Œª ())

              N = Pb (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)) 

    unit-l-cell‚ÇÅ : {x y : Obj X} (f : Arrow X x y)
      ‚Üí Ob (Hom (Hom X))
          ((((tt , y) , tt , cst x) , f) ,
            Œ∑‚Çö (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)) (((tt , y) , tt , cst x) , f)) 
    unit-l-cell‚ÇÅ {x} {y} f = fst $ contr-center (base-fibrant (hom-fibrant fib) _ (lf (_ , f)) Œª())

    unit-l2 : {x y : Obj X} (f : Arrow X x y) ‚Üí comp2 (id y) f == f
    unit-l2 {x} {y} f =
      let contr = base-fibrant fib _ (Œ∑‚Çõ (Pb IdMnd (Ob X)) ((tt , y) , tt , cst x)) (cst f)
          p = pair= idp (Œª= (Œ∑-pos-elim‚Çõ (Pb IdMnd (Ob X)) ((tt , y) , tt , cst x) _ idp))
          unit-l-cell‚ÇÄ' = transport (Œª z ‚Üí
                            Ob (Hom (Hom (fst (fst C)))) ((((tt , y) , tt , cst x) , comp2 (id y) f) , z))
                            p (unit-l-cell‚ÇÄ f)
      in fst= (contr-has-all-paths ‚¶É contr ‚¶Ñ
                (comp2 (id y) f , unit-l-cell‚ÇÄ') (f , unit-l-cell‚ÇÅ f))


    unit-r2 : {x y : Obj X} (f : Arrow X x y) ‚Üí comp2 f (id x) == f
    unit-r2 = {!!}

    assoc2 : {x y z t : Obj X}
      ‚Üí (h : Arrow X z t) (g : Arrow X y z) (f : Arrow X x y)
      ‚Üí comp2 (comp2 h g) f == comp2 h (comp2 g f)
    assoc2 h g f = {!!}

    precat : PreCategory lzero lzero
    PreCategory.obj precat = Obj X
    PreCategory.hom precat x y = Arrow X x y
    PreCategory.comp precat = comp2
    PreCategory.assoc precat = assoc2
    PreCategory.id precat = id
    PreCategory.unit-l precat = unit-l2
    PreCategory.unit-r precat = unit-r2
    PreCategory.hom-sets precat x y = hom-sets ((tt , y) , tt , cst x)

    record is-‚àûiso {x y : Obj X} (f : Arrow X x y) : Set where
      constructor mk-‚àûiso
      field
        g   : Arrow X y x
        f-g : Simplex X f g (id x) 
        g-f : Simplex X g f (id y) 

    ‚àûiso : (x y : Ob X tt) ‚Üí Set 
    ‚àûiso x y = Œ£ (Arrow X x y) is-‚àûiso

    comp-‚àûiso : {x y z : Ob X tt}
      ‚Üí (g : ‚àûiso y z) (f : ‚àûiso x y)
      ‚Üí ‚àûiso x z
    comp-‚àûiso (g , g·µ¢) (f , f·µ¢) = comp2 g f , {!!}

    Simplex-is-prop : {x y z : Obj X}
      ‚Üí (f : Arrow X x y) (g : Arrow X y z)
      ‚Üí (h : Arrow X x z)
      ‚Üí is-prop (Simplex X f g h)
    Simplex-is-prop {x} {y} {z} f g h =
      let aux : (s s‚ÇÅ : Simplex X f g h) ‚Üí (h , s) == (h , s‚ÇÅ)
          aux s s‚ÇÅ =
            contr-has-all-paths
              ‚¶É base-fibrant fib ((tt , z) , tt , cst x) (tr X x y z) (source X g f) ‚¶Ñ _ _

          p=idp : (p : h == h) ‚Üí p == idp
          p=idp p =
            prop-has-all-paths ‚¶É has-level-apply (hom-sets ((tt , z) , tt , cst x)) _ _ ‚¶Ñ _ _

          s=s‚ÇÅ : (s s‚ÇÅ : Simplex X f g h) ‚Üí s == s‚ÇÅ
          s=s‚ÇÅ s s‚ÇÅ = transport (Œª p ‚Üí s == s‚ÇÅ [ Simplex X f g ‚Üì p ]) (p=idp _) (snd= (aux _ _))
          
      in inhab-to-contr-is-prop Œª s ‚Üí has-level-in (s , s=s‚ÇÅ _)

    is-‚àûiso= : {x y : Obj X}
      ‚Üí {f : Arrow X x y} 
      ‚Üí {g g‚ÇÅ : Arrow X y x}
      ‚Üí (g=g‚ÇÅ : g == g‚ÇÅ)
      ‚Üí {f-g : Simplex X f g (id x)}
      ‚Üí {f-g‚ÇÅ : Simplex X f g‚ÇÅ (id x)}
      ‚Üí (f-g=f-g‚ÇÅ : f-g == f-g‚ÇÅ [ (Œª g ‚Üí Simplex X f g (id x)) ‚Üì g=g‚ÇÅ ])
      ‚Üí {g-f : Simplex X g f (id y)}
      ‚Üí {g-f‚ÇÅ : Simplex X g‚ÇÅ f (id y)}
      ‚Üí (g-f=g-f‚ÇÅ : g-f == g-f‚ÇÅ [ (Œª g ‚Üí Simplex X g f (id y)) ‚Üì g=g‚ÇÅ ])
      ‚Üí mk-‚àûiso g f-g g-f == mk-‚àûiso g‚ÇÅ f-g‚ÇÅ g-f‚ÇÅ
    is-‚àûiso= idp idp idp = idp

    is-‚àûiso-is-prop : {x y : Obj X} (f : Arrow X x y)
      ‚Üí is-prop (is-‚àûiso f)
    is-‚àûiso-is-prop f = inhab-to-contr-is-prop {! !}

    ‚àûiso-is-set : (x y : Obj X) ‚Üí is-set (‚àûiso x y)
    ‚àûiso-is-set x y = Œ£-level (hom-sets _) Œª _¬†‚Üí raise-level _ (is-‚àûiso-is-prop _)

    ‚àûiso= : {x y : Obj X}
      ‚Üí {f g : ‚àûiso x y}
      ‚Üí fst f == fst g
      ‚Üí f == g
    ‚àûiso= p = pair= p (prop-has-all-paths-‚Üì ‚¶É is-‚àûiso-is-prop _ ‚¶Ñ )

    id-is-‚àûiso : (x : Obj X) ‚Üí is-‚àûiso (id x)
    is-‚àûiso.g (id-is-‚àûiso x) = id _
    is-‚àûiso.f-g (id-is-‚àûiso x) = degen‚ÇÄ (id _)
    is-‚àûiso.g-f (id-is-‚àûiso x) = degen‚ÇÄ (id _)

    cat-‚àûcat-eq : {x y : Obj X} {f : Arrow X x y}
      ‚Üí is-iso {P = precat} f ‚âÉ is-‚àûiso f
    cat-‚àûcat-eq {x} {y} {f} = h , is-eq h i h-i i-h
      where h : is-iso {P = precat} f
                ‚Üí is-‚àûiso f
            is-‚àûiso.g (h (mk-iso g f-g g-f)) = g
            is-‚àûiso.f-g (h (mk-iso g f-g g-f)) =
              transport (Œª x ‚Üí Simplex X f g x) g-f (fill2 g f)
            is-‚àûiso.g-f (h (mk-iso g f-g g-f)) =
              transport (Œª x ‚Üí Simplex X g f x) f-g (fill2 f g)

            i : is-‚àûiso f
                ‚Üí is-iso {P = precat} f
            is-iso.g (i (mk-‚àûiso g f-g g-f)) = g
            is-iso.f-g (i (mk-‚àûiso g f-g g-f)) =
              fst= (comp-has-all-paths (fill2 f g) g-f)
            is-iso.g-f (i (mk-‚àûiso g f-g g-f)) =
              fst= (comp-has-all-paths (fill2 g f) f-g)

            i-h : i ‚àò h ‚àº idf _
            i-h e = is-iso= idp
              (prop-has-all-paths ‚¶É has-level-apply (hom-sets _) _ _ ‚¶Ñ _ _)
              (prop-has-all-paths ‚¶É has-level-apply (hom-sets _) _ _ ‚¶Ñ _ _)

            h-i : h ‚àò i ‚àº idf _
            h-i e = is-‚àûiso= idp
              (prop-has-all-paths ‚¶É Simplex-is-prop _ _ _ ‚¶Ñ _ _)
              (prop-has-all-paths ‚¶É Simplex-is-prop _ _ _ ‚¶Ñ _ _)


    is-complete-aux : {x y z : Obj X}
      ‚Üí (f : ‚àûiso x y) (g : ‚àûiso x z)
      ‚Üí (y , f) == (z , g)
      ‚Üí Œ£ (‚àûiso y z) Œª h ‚Üí Simplex X (fst f) (fst h) (fst g)
    is-complete-aux f g idp = (id _ , id-is-‚àûiso _) , degen‚ÇÅ _

    is-complete : Set
    is-complete = {x y z : Obj X}
      ‚Üí (f : ‚àûiso x y) (g : ‚àûiso x z)
      ‚Üí is-equiv (is-complete-aux f g)

    transp-‚Üì' : ‚àÄ {i j} {A : Type i} (P : A ‚Üí Type j) {a‚ÇÅ a‚ÇÇ : A}
      (p : a‚ÇÅ == a‚ÇÇ) (y : P a‚ÇÅ) ‚Üí y == transport P p y [ P ‚Üì p ]
    transp-‚Üì' _ idp _ = idp

    id-to-‚àûiso : {x y : Obj X}
      ‚Üí (x == y)
      ‚Üí ‚àûiso x y
    id-to-‚àûiso {x} idp = id x , id-is-‚àûiso x 


    module _ (cmpl : is-complete) where

      ‚àûiso-elim-aux : {x y : Obj X} {f : ‚àûiso x y}
        ‚Üí (P : {z : Obj X} (g : ‚àûiso x z) ‚Üí (Œ£ (‚àûiso y z) Œª h ‚Üí Simplex X (fst f) (fst h) (fst g)) ‚Üí Set)
        ‚Üí (d : P f ((id _ , id-is-‚àûiso _) , degen‚ÇÅ _) )
        ‚Üí {z : Obj X} {g : ‚àûiso x z}
        ‚Üí (e : Œ£ (‚àûiso y z) Œª h ‚Üí Simplex X (fst f) (fst h) (fst g))
        ‚Üí P g e
      ‚àûiso-elim-aux {x} {y} {f} P d {z} {g} e =
        let foo = J {A = Œ£ (Obj X) (‚àûiso x)} {a = y , f} (Œª y p ‚Üí P (snd y) (‚Äì> (_ , cmpl f (snd y)) p))
                  d {z , g} (<‚Äì (_ , cmpl f g) e)
        in transport (P g) (<‚Äì-inv-r (_ , cmpl f g) e) foo 

      ‚àûiso-elim : {x : Obj X}
        ‚Üí (P : {y : Obj X} ‚Üí ‚àûiso x y ‚Üí Set)
        ‚Üí (d : P (id _ , id-is-‚àûiso _))
        ‚Üí {y : Obj X}
        ‚Üí (e : ‚àûiso x y)
        ‚Üí P e
      ‚àûiso-elim {x} P d {y} e =
        ‚àûiso-elim-aux {x} {x} {_ , id-is-‚àûiso _} (Œª g h ‚Üí P (fst h)) d {y} {e} (e , degen‚ÇÄ _)
      
      complete-is-univalent : {x y : Obj X}
        ‚Üí is-equiv (id-to-‚àûiso {x} {y})
      complete-is-univalent {x} {y} = is-eq _ h k-h h-k
        where h : {y : Obj X} ‚Üí ‚àûiso x y ‚Üí x == y
              h (f , mk-‚àûiso g f-g g-f) =
                let e = cmpl (_ , mk-‚àûiso g f-g g-f) (id x , id-is-‚àûiso x)
                    g-is-equiv = mk-‚àûiso f g-f f-g 
                    
                in ! (fst= (<‚Äì (_ , e) ((g , g-is-equiv) , f-g)))
  
              k-h : id-to-‚àûiso ‚àò h ‚àº idf _
              k-h f =
                let mk-‚àûiso g f-g g-f = id-is-‚àûiso x
                    e = cmpl (_ , mk-‚àûiso g f-g g-f) (id x , id-is-‚àûiso x)
                    
                    p : (id x , id-is-‚àûiso x) , degen‚ÇÄ _ == ‚Äì> (_ , e) idp
                    p = pair= idp (prop-has-all-paths ‚¶É Simplex-is-prop _ _ _ ‚¶Ñ _ _)
  
                    q = ap id-to-‚àûiso (ap (! ‚àò fst=) (ap (<‚Äì (_ , e)) p ‚àô <‚Äì-inv-l (_ , e) idp))
  
                in ‚àûiso-elim (Œª e ‚Üí id-to-‚àûiso (h e) == e) q f
  
              h-k : h ‚àò id-to-‚àûiso ‚àº idf _
              h-k idp =
                let mk-‚àûiso g f-g g-f = id-is-‚àûiso x
                    e = cmpl (_ , mk-‚àûiso g f-g g-f) (id x , id-is-‚àûiso x)
                    g-is-equiv = mk-‚àûiso (id x) g-f f-g
  
                    p : ((id x , id-is-‚àûiso x) , f-g) == ‚Äì> (_ , e) idp
                    p = pair= idp (prop-has-all-paths ‚¶É Simplex-is-prop _ _ _ ‚¶Ñ _ _)
  
                in ap (! ‚àò fst=) (ap (<‚Äì (_ , e)) p ‚àô <‚Äì-inv-l (_ , e) idp)

  1-ucategory : Set (lsucc lzero)
  1-ucategory = Œ£ 1-category is-complete

  module _ (X : Category lzero lzero) where
    open Category X renaming (precat to C ; id to id' ; comp to comp-cat)

    mul : action (Slice ((Pb IdMnd (cst obj)))) Œª { ((_ , x) , c , y) ‚Üí hom (y tt) x }
    mul _ (lf i) Œ¥ = id' (snd i)
    mul _ (nd {i} c Œ¥‚ÇÅ Œµ) Œ¥ =
      comp-cat (Œ¥ (inl tt))  (mul _ (Œµ tt) Œª p ‚Üí Œ¥ (inr (tt , p)))

    is-assoc : {M : ùïÑ} {A : Idx M ‚Üí Set} (a : action M A) ‚Üí Set
    is-assoc {M} {A} a = (i : Idx M) (œÉ : Cns M i)
      ‚Üí (Œ¥ : (p : Pos M œÉ) ‚Üí Cns M (Typ M œÉ p))
      ‚Üí (ŒΩ : (p : Pos M (Œº M œÉ Œ¥)) ‚Üí A (Typ M (Œº M œÉ Œ¥) p))
      ‚Üí a i (Œº M œÉ Œ¥) ŒΩ == a i œÉ Œª p ‚Üí a _ (Œ¥ p) Œª q ‚Üí ŒΩ (Œº-pos M œÉ Œ¥ p q)

    mul-Œ≥ : {i : Idx (Pb IdMnd (cst obj))} {c : Cns (Pb IdMnd (cst obj)) i}
      ‚Üí (œÅ : Cns‚Çõ (Pb IdMnd (cst obj)) (i , c))
      ‚Üí (Œ¥ : (p : Pos (Pb IdMnd (cst obj)) {i} c)
             ‚Üí Cns (Pb IdMnd (cst obj)) (Typ (Pb IdMnd (cst obj)) {i} c p))
      ‚Üí (Œµ : (p : Pos (Pb IdMnd (cst obj)) {i} c)
             ‚Üí Cns‚Çõ (Pb IdMnd (cst obj)) (Typ (Pb IdMnd (cst obj)) {i} c p , Œ¥ p))
      ‚Üí (ŒΩ : (p : Pos (Slice ((Pb IdMnd (cst obj)))) (Œ≥ _ œÅ Œ¥ Œµ)) ‚Üí
               let ((_ , x) , _ , y) = Typ (Slice ((Pb IdMnd (cst obj)))) (Œ≥ _ œÅ Œ¥ Œµ) p
               in hom (y tt) x)
      ‚Üí mul _ (Œ≥ _ œÅ Œ¥ Œµ) ŒΩ
        == comp-cat (mul _ œÅ (ŒΩ ‚àò (Œ≥-pos-inl (Pb IdMnd (cst obj)) œÅ Œ¥ Œµ)))
                    (mul _ (Œµ tt) (ŒΩ ‚àò (Œ≥-pos-inr _ œÅ Œ¥ Œµ tt)))
    mul-Œ≥ {i} (lf _) Œ¥ Œµ ŒΩ =  ! (unit-l (mul _ (Œµ tt) ŒΩ))
    mul-Œ≥ {_ , _} (nd {i} c Œ¥‚ÇÅ Œµ‚ÇÅ) Œ¥ Œµ ŒΩ =
      let hyp = mul-Œ≥ (Œµ‚ÇÅ tt) Œ¥ Œµ Œª p ‚Üí ŒΩ (inr (tt , p))
      in ap (Œª x ‚Üí comp-cat (ŒΩ (inl tt)) x) hyp ‚àô (! (assoc _ _ _))
      
    mul-assoc : is-assoc {(Slice ((Pb IdMnd (cst obj))))} mul
    mul-assoc .(i , Œ∑ (Pb IdMnd (Œª _ ‚Üí PreCategory.obj (Category.precat X))) i) (lf i) Œ¥ ŒΩ = idp
    mul-assoc .(i , Œº (Pb IdMnd (Œª _ ‚Üí PreCategory.obj (Category.precat X))) {i} c Œ¥‚ÇÅ) (nd {i} c Œ¥‚ÇÅ Œµ) Œ¥ ŒΩ =
      let hyp = mul-assoc _ (Œµ tt) (Œª q ‚Üí Œ¥ (inr (tt , q))) Œª q ‚Üí ŒΩ (Œ≥-pos-inr _ (Œ¥ (inl tt)) Œ¥‚ÇÅ _ tt q)
          
      in mul-Œ≥ (Œ¥ true) Œ¥‚ÇÅ (Œª p ‚Üí Œº‚Çõ _ (Œµ p) (Œª q ‚Üí Œ¥ (inr (p , q)))) ŒΩ
         ‚àô ap (Œª x ‚Üí
                comp-cat (mul (i , c) (Œ¥ true)
                              (ŒΩ ‚àò Œ≥-pos-inl (Pb IdMnd (cst obj)) (Œ¥ true) Œ¥‚ÇÅ
                              (Œª p ‚Üí Œº‚Çõ _ (Œµ p) (Œª q ‚Üí Œ¥ (inr (p , q))))))
                          x)  
              hyp
  
    OC : OpetopicType.OpetopicType IdMnd
    Ob OC _ = obj
    Ob (Hom OC) ((_ , x) , _ , ŒΩ) = hom (ŒΩ tt) x
    Ob (Hom (Hom OC)) ((((_ , x) , _ , ŒΩ) , f) , pd , ŒΩ') = f == mul _ pd ŒΩ'
    Hom (Hom (Hom OC)) = Terminal _

    M = Slice (Pb (Slice (Pb IdMnd (Ob OC))) (Ob (Hom OC)))

    assoc-action : action M (Ob $ Hom $ Hom $ OC)
    assoc-action .(i , Œ∑ (Pb (Slice (Pb IdMnd (Ob OC))) (Ob (Hom OC))) i) (lf i) Œ∫ = ! (unit-r (snd i))
    assoc-action .(_ , Œº (Pb (Slice (Pb IdMnd (Ob OC))) (Ob (Hom OC)))
      {(((i , x) , (j , y)) , f)} (c , ŒΩ) Œ¥)
      (nd {(((i , x) , (j , y)) , f)} (c , ŒΩ) Œ¥ Œµ) Œ∫ =
        let hyp p = assoc-action (_ , Œ¥ p) (Œµ p) Œª q ‚Üí Œ∫ (inr (p , q))
        in  Œ∫ (inl tt) ‚àô ap (mul ((i , x) , j , y) c) (Œª= hyp) ‚àô ! (mul-assoc _ c (fst ‚àò Œ¥) _)

    OC-is-fibrant : is-fibrant (Hom OC)
    base-fibrant OC-is-fibrant f œÉ ŒΩ = pathto-is-contr (mul f œÉ ŒΩ)
    base-fibrant (hom-fibrant OC-is-fibrant) ((((tt , x) , _ , y) , f) , pd , Œ∫) œÉ ŒΩ =
      inhab-prop-is-contr (assoc-action _ œÉ ŒΩ , tt) ‚¶É Œ£-level (has-level-apply (hom-sets _ _) _ _) Œª _ ‚Üí Unit-level ‚¶Ñ
    hom-fibrant (hom-fibrant OC-is-fibrant) = Terminal-is-fibrant _

    OC-hom-sets : (i : Idx‚Çõ (Pb IdMnd (Ob OC))) ‚Üí is-set (Ob (Hom OC) i)
    OC-hom-sets ((tt , y) , tt , x) = hom-sets (x tt) y

    OC-cat : 1-category
    OC-cat = (OC , OC-is-fibrant) , OC-hom-sets

    id=id' : (x : obj) ‚Üí id OC-cat x == id' x
    id=id' x = fst= (contr-path (base-fibrant OC-is-fibrant ((tt , x) , tt , cst x) (lf (_ , x)) Œª ()) _)

    lem3 : {x y z : obj} (g : hom y z) (f : hom x y)
      ‚Üí comp2 OC-cat g f , fill2 OC-cat g f 
        == (comp-cat g f) , ! (unit-r (comp-cat g f)) ‚àô assoc _ _ _
    lem3 g f = contr-has-all-paths ‚¶É pathto-is-contr (comp-cat g (comp-cat f (id' _))) ‚¶Ñ _ _

    comp=‚óè : {x y z : obj} (g : hom y z) (f : hom x y)
      ‚Üí comp2 OC-cat g f == comp-cat g f
    comp=‚óè g f = fst= (lem3 g f)

    lem : (x : obj) ‚Üí id OC-cat x == id' x
    lem x = ! (unit-l (id OC-cat x))
            ‚àô ! (comp=‚óè (id' x) (id OC-cat x))
            ‚àô unit-r2 OC-cat (id' x)
            
    to-from-cat : precat OC-cat == C
    to-from-cat =
      let obj= = idp
          hom= = idp
          id= = Œª= lem
          comp= =
            let yo = Œª= Œª x ‚Üí Œª= Œª y ‚Üí Œª= Œª z ‚Üí
                       Œª= Œª g ‚Üí Œª= Œª f ‚Üí
                         comp=‚óè {x} {y} {z} g f
            in ap (Œª f ‚Üí Œª {x} {y} {z} ‚Üí f x y z) yo
      in PreCategory=' obj= hom= comp= id= _ _ _ _ _ _ _ _

    cat-‚àûcat-eq' : {x y : obj} {f : hom x y}
      ‚Üí is-iso {P = C} f ‚âÉ is-‚àûiso OC-cat f
    cat-‚àûcat-eq' {x} {y} {f} = h , is-eq h i h-i i-h
      where h : is-iso f
                ‚Üí is-‚àûiso OC-cat f
            is-‚àûiso.g (h (mk-iso g f-g g-f)) = g
            is-‚àûiso.f-g (h (mk-iso g f-g g-f)) =
              let s : Simplex OC f g (comp-cat g f) 
                  s = ! (unit-r (comp-cat g f)) ‚àô assoc _ _ _
              in transport (Simplex OC f g) (g-f ‚àô ! (id=id' x)) s
            is-‚àûiso.g-f (h (mk-iso g f-g g-f)) =
              let s : Simplex OC g f (comp-cat f g) 
                  s = ! (unit-r (comp-cat f g)) ‚àô assoc _ _ _
              in transport (Simplex OC g f) (f-g ‚àô ! (id=id' y)) s

            i : is-‚àûiso OC-cat f
                ‚Üí is-iso f
            is-iso.g (i (mk-‚àûiso g f-g g-f)) = g
            is-iso.f-g (i (mk-‚àûiso g f-g g-f)) =
              ! (comp=‚óè _ _) ‚àô (! (unit-r _)) ‚àô {!assoc _ _ _ ‚àô ?!} -- fst= (comp-has-all-paths {!OC-cat!} (fill2 {!!} f g) g-f) --fst= (comp-has-all-paths {!OC-cat!} (fill2 {!!} f g) g-f)
            is-iso.g-f (i (mk-‚àûiso g f-g g-f)) =
              {!!} -- fst= (comp-has-all-paths {!OC-cat!} (fill2 {!!} g f) f-g)

            i-h : i ‚àò h ‚àº idf _
            i-h e = is-iso= idp
              (prop-has-all-paths ‚¶É has-level-apply (hom-sets _ _) _ _ ‚¶Ñ _ _)
              (prop-has-all-paths ‚¶É has-level-apply (hom-sets _ _) _ _ ‚¶Ñ _ _)

            h-i : h ‚àò i ‚àº idf _
            h-i e = is-‚àûiso= OC-cat idp
              (prop-has-all-paths ‚¶É Simplex-is-prop OC-cat _ _ _ ‚¶Ñ _ _)
              (prop-has-all-paths ‚¶É Simplex-is-prop OC-cat _ _ _ ‚¶Ñ _ _)

    ‚àû-iso-elim' : {x y : obj} {f : ‚àûiso OC-cat x y}
      ‚Üí (P : {z : obj} (g : ‚àûiso OC-cat x z) ‚Üí (Œ£ (‚àûiso OC-cat y z) Œª h ‚Üí Simplex OC (fst f) (fst h) (fst g)) ‚Üí Set)
      ‚Üí (d : P f ((id OC-cat _ , id-is-‚àûiso OC-cat _) , degen‚ÇÅ OC-cat _) )
      ‚Üí {z : obj} {g : ‚àûiso OC-cat x z}
      ‚Üí (e : Œ£ (‚àûiso OC-cat y z) Œª h ‚Üí Simplex OC (fst f) (fst h) (fst g))
      ‚Üí P g e
    ‚àû-iso-elim' {x} {y} {f} P d {z} {g} e =
      let
          foo5 : f == comp-‚àûiso OC-cat (id' y , ‚Äì> cat-‚àûcat-eq' (id-is-iso y)) f
          foo5 = ‚àûiso= OC-cat (! (unit-l _) ‚àô ! (comp=‚óè _ _))

          foo6 : ((id OC-cat y , id-is-‚àûiso OC-cat y) , degen‚ÇÅ OC-cat (fst f)) == (id' y , ‚Äì> cat-‚àûcat-eq' (id-is-iso y)) , fill2 OC-cat (id' y) (fst f) [ (Œª g ‚Üí Œ£ (‚àûiso OC-cat y y) Œª h ‚Üí Simplex OC (fst f) (fst h) (fst g) ) ‚Üì foo5  ]
          foo6 = ‚Üì-Œ£-in (‚Üì-cst-in (‚àûiso= OC-cat (id=id' _))) (prop-has-all-paths-‚Üì ‚¶É Simplex-is-prop OC-cat _ _ _ ‚¶Ñ )
    
          d' : P (comp-‚àûiso OC-cat (id' y , ‚Äì> cat-‚àûcat-eq' (id-is-iso y)) f) ((id' y , ‚Äì> cat-‚àûcat-eq' (id-is-iso y)) , fill2 OC-cat (id' y) (fst f))
          d' = transport (Œª { (g , e) ‚Üí P g e }) (pair= foo5 foo6)  d

          foo : P (comp-‚àûiso OC-cat (fst (fst e) , ‚Äì> cat-‚àûcat-eq' (<‚Äì cat-‚àûcat-eq' (snd (fst e)))) f)
                  ((fst (fst e) , ‚Äì> cat-‚àûcat-eq' (<‚Äì cat-‚àûcat-eq' (snd (fst e)))) , fill2 OC-cat (fst (fst e)) (fst f))
          foo = ‚âä-elim X (Œª {z} e ‚Üí P {z} (comp-‚àûiso OC-cat (fst e , ‚Äì> cat-‚àûcat-eq' (snd e)) f) ((fst e , ‚Äì> cat-‚àûcat-eq' (snd e)) , fill2 OC-cat _ _)) d' (fst (fst e) , <‚Äì cat-‚àûcat-eq' (snd (fst e)))
                  
          foo7 : fst g == comp-cat (fst (fst e)) (fst f) 
          foo7 = snd e ‚àô (! (assoc _ _ _)) ‚àô unit-r _

          foo3 : comp-‚àûiso OC-cat (fst (fst e) , ‚Äì> cat-‚àûcat-eq' (<‚Äì cat-‚àûcat-eq' (snd (fst e)))) f
                       == g 
          foo3 = ‚àûiso= OC-cat (comp=‚óè _ _ ‚àô ! foo7)

          foo4 : ((fst (fst e) , ‚Äì> cat-‚àûcat-eq' (<‚Äì cat-‚àûcat-eq' (snd (fst e)))) , fill2 OC-cat (fst (fst e)) (fst f)) == e [ (Œª g ‚Üí Œ£ (‚àûiso OC-cat y z) (Œª h ‚Üí Simplex OC (fst f) (fst h) (fst g))) ‚Üì foo3 ]
          foo4 = ‚Üì-Œ£-in (‚Üì-cst-in (‚àûiso= OC-cat idp)) (prop-has-all-paths-‚Üì ‚¶É Simplex-is-prop OC-cat _ _ _ ‚¶Ñ)

      in transport (Œª { (g , e) ‚Üí P g e }) (pair= foo3 foo4) foo

    OC-is-complete : is-complete OC-cat
    OC-is-complete {x} {y} {z} (f , f·µ¢) (g , g·µ¢) = is-eq _ k h-k k-h
      where k : {z : obj} {g : ‚àûiso OC-cat x z} ‚Üí Œ£ (‚àûiso OC-cat y z) (Œª h ‚Üí Simplex OC f (fst h) (fst g)) ‚Üí y , f , f·µ¢ == z , g
            k {z} {(g , g·µ¢)} ((h , h·µ¢) , s) =
              let y‚âäz : y ‚âä z
                  y‚âäz = h , <‚Äì (cat-‚àûcat-eq') h·µ¢

                  y=z : y == z
                  y=z = <‚Äì (_ , univalent y z) y‚âäz

                  p : transport (Arrow OC x) y=z f == comp-cat h f  
                  p = transport-iso-lem X f y‚âäz

                  q : comp-cat h f == g
                  q =
                    let s‚ÇÅ = transport (Simplex OC f h) (comp=‚óè h f) (fill2 OC-cat h f)
                    in fst= $ comp-has-all-paths OC-cat s‚ÇÅ s
 
                  f=g : f == g [ Arrow OC x ‚Üì y=z ]
                  f=g = from-transp (Arrow OC x) y=z (p ‚àô q)

              in pair= y=z (‚Üì-Œ£-in f=g (prop-has-all-paths-‚Üì ‚¶É is-‚àûiso-is-prop OC-cat _ ‚¶Ñ))

            k-h : {z : obj} {g : ‚àûiso OC-cat x z} (p : y , f , f·µ¢ == z , g)
                  ‚Üí k (is-complete-aux OC-cat (f , f·µ¢) g p) == p
            k-h idp =
              let y‚âäz : y ‚âä y
                  y‚âäz = id OC-cat y , <‚Äì (cat-‚àûcat-eq') (id-is-‚àûiso OC-cat y)

                  y=z : y == y
                  y=z = <‚Äì (_ , univalent y y) y‚âäz

                  y‚âäz=ide : y‚âäz == id' y , id-is-iso y
                  y‚âäz=ide = ‚âä= (id=id' _)

                  y=z=idp : y=z == idp
                  y=z=idp = transport (Œª x ‚Üí <‚Äì (_ , univalent y y) x == idp) (! y‚âäz=ide) (<‚Äì-inv-l (_ , univalent y y) idp)

              in pair== y=z=idp (prop-has-all-paths-‚Üì ‚¶É has-level-apply (‚àûiso-is-set OC-cat _ _) _ _ ‚¶Ñ)

            h-k : (e : Œ£ (‚àûiso OC-cat y z) (Œª h‚ÇÅ ‚Üí Simplex OC f (fst h‚ÇÅ) g))
                  ‚Üí is-complete-aux OC-cat (f , f·µ¢) (g , g·µ¢) (k e) == e 
            h-k e =
              let p = ap (is-complete-aux OC-cat (f , f·µ¢) (f , f·µ¢)) (k-h idp)  
              in ‚àû-iso-elim' {f = f , f·µ¢} (Œª g e ‚Üí is-complete-aux OC-cat (f , f·µ¢) g (k e) == e) p e

    UniCat : 1-ucategory
    UniCat = OC-cat , OC-is-complete
{-
  ODelta : ‚àû-ucategory
  ODelta = UniCat ThirdDef.Delta

  STypes : Set
  STypes = OpetopicTypeOver (IdMnd‚Üì Set) (fst $ fst $ ODelta)
-}
  module _ (C : 1-ucategory) where

    private 
      X = fst (fst (fst C))
      fib = snd (fst (fst C))
      hom-sets = snd (fst C)
      cmpl = snd C

      C-cat : 1-category
      C-cat = (X , fib) , hom-sets
 
    cat : Category lzero lzero
    Category.precat cat = precat C-cat
    Category.univalent cat x y =
      transport! is-equiv (Œª= aux)
                 (Œ£-isemap-r (Œª _ ‚Üí is-equiv-inverse (snd (cat-‚àûcat-eq C-cat)))
                 ‚àòise (complete-is-univalent C-cat cmpl))
      where aux : {x y : Obj X} (p : x == y)
                 ‚Üí id-to-iso p == let (f , iso) = id-to-‚àûiso C-cat p in (f , <‚Äì (cat-‚àûcat-eq C-cat) iso) 
            aux idp = ‚âä= idp

 


    
