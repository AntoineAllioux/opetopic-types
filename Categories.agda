{-# OPTIONS --without-K --rewriting --type-in-type #-}

open import Monad
open import MonadOver
open import UniCat
open import Delta
open import OpetopicType
open import IdentityMonad
open import Pb
open import HoTT
open import IdentityMonadOver
open import MonadEqv

module Categories where

  postulate
    Œ∑-pos-typ‚Çõ : (M : ùïÑ) (i : Idx‚Çõ M)
      ‚Üí (p : Pos‚Çõ M (Œ∑‚Çõ M i))
      ‚Üí Typ‚Çõ M {i = i} (Œ∑‚Çõ M i) p ‚Ü¶ i
    {-# REWRITE Œ∑-pos-typ‚Çõ #-}

    Œ∑-pos-typ‚Çõ‚Çö : let M  = IdMnd in (A : Idx M ‚Üí Set) (i : Idx‚Çõ (Pb M A))
      ‚Üí (p : Pos‚Çõ (Pb M A) (Œ∑‚Çõ (Pb M A) i))
      ‚Üí Typ‚Çõ (Pb M A) {i = i} (Œ∑‚Çõ (Pb M A) i) p ‚Ü¶ i
    {-# REWRITE Œ∑-pos-typ‚Çõ‚Çö #-}

    Œº-pos-typ‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M (Œº‚Çõ M c Œ¥))
      ‚Üí Typ‚Çõ M (Œº‚Çõ M c Œ¥) p ‚Ü¶ Typ‚Çõ M (Œ¥ (Œº-pos-fst‚Çõ M c Œ¥ p)) (Œº-pos-snd‚Çõ M c Œ¥ p)
    {-# REWRITE Œº-pos-typ‚Çõ #-}

    Œº-pos-fst-Œ≤‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M c) (q : Pos‚Çõ M (Œ¥ p))
      ‚Üí Œº-pos-fst‚Çõ M c Œ¥ (Œº-pos‚Çõ M c Œ¥ p q) ‚Ü¶ p
    {-# REWRITE Œº-pos-fst-Œ≤‚Çõ #-}

    Œº-pos-snd-Œ≤‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M c) (q : Pos‚Çõ M (Œ¥ p))
      ‚Üí Œº-pos-snd‚Çõ M c Œ¥ (Œº-pos‚Çõ M c Œ¥ p q) ‚Ü¶ q
    {-# REWRITE Œº-pos-snd-Œ≤‚Çõ #-}

    Œº-pos-Œ∑‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (p : Pos‚Çõ M (Œº‚Çõ M c Œ¥))
      ‚Üí Œº-pos‚Çõ M c Œ¥ (Œº-pos-fst‚Çõ M c Œ¥ p) (Œº-pos-snd‚Çõ M c Œ¥ p) ‚Ü¶ p
    {-# REWRITE Œº-pos-Œ∑‚Çõ #-}
    
    -- Œº laws
    Œº-unit-right‚Çõ : (M : ùïÑ) (i : Idx‚Çõ M)
      ‚Üí (c : Cns‚Çõ M i)
      ‚Üí Œº‚Çõ M c (Œª p ‚Üí Œ∑‚Çõ M (Typ‚Çõ M c p)) ‚Ü¶ c
    {-# REWRITE Œº-unit-right‚Çõ #-}

    Œº-unit-left‚Çõ : (M : ùïÑ) (i : Idx‚Çõ M) 
      ‚Üí (Œ¥ : (p : Pos‚Çõ M (Œ∑‚Çõ M i)) ‚Üí Cns‚Çõ M i)
      ‚Üí Œº‚Çõ M (Œ∑‚Çõ M i) Œ¥ ‚Ü¶ Œ¥ (Œ∑-pos‚Çõ M i)
    --{-# REWRITE Œº-unit-left‚Çõ #-}

    Œº-assoc‚Çõ : (M : ùïÑ) {i : Idx‚Çõ M} (c : Cns‚Çõ M i)
      ‚Üí (Œ¥ : (p : Pos‚Çõ M c) ‚Üí Cns‚Çõ M (Typ‚Çõ M c p))
      ‚Üí (Œµ : (p : Pos‚Çõ M (Œº‚Çõ M c Œ¥)) ‚Üí Cns‚Çõ M (Typ‚Çõ M (Œº‚Çõ M c Œ¥) p))
      ‚Üí Œº‚Çõ M (Œº‚Çõ M c Œ¥) Œµ ‚Ü¶ Œº‚Çõ M c (Œª p ‚Üí Œº‚Çõ M (Œ¥ p) (Œª q ‚Üí Œµ (Œº-pos‚Çõ M c Œ¥ p q)))
    {-# REWRITE Œº-assoc‚Çõ #-}

    Œ≥-assoc : (M : ùïÑ) {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
      ‚Üí (Œµ : (p : Pos M c) ‚Üí Cns‚Çõ M (Typ M c p , Œ¥ p))
      ‚Üí (Œ¥‚ÇÅ : (p : Pos M (Œº M c Œ¥)) ‚Üí Cns M (Typ M (Œº M c Œ¥) p))
      ‚Üí (Œµ‚ÇÅ : (p : Pos M (Œº M c Œ¥)) ‚Üí Cns‚Çõ M (Typ M (Œº M c Œ¥) p , Œ¥‚ÇÅ p))
      ‚Üí Œ≥ M (Œ≥ M œÅ Œ¥ Œµ) Œ¥‚ÇÅ Œµ‚ÇÅ ‚Ü¶ Œ≥ M œÅ (Œª p ‚Üí Œº M (Œ¥ p) (Œ¥‚ÇÅ ‚àò Œº-pos M c Œ¥ p)) Œª p ‚Üí Œ≥ M (Œµ p) (Œ¥‚ÇÅ ‚àò Œº-pos M c Œ¥ p) (Œµ‚ÇÅ ‚àò Œº-pos M c Œ¥ p)
    {-# REWRITE Œ≥-assoc #-}

    Œ≥-unit-r : (M : ùïÑ) {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M c) ‚Üí Cns M (Typ M c p))
      ‚Üí (Œµ : (p : Pos M c) ‚Üí Cns‚Çõ M (Typ M c p , Œ¥ p))
      ‚Üí Œ≥ M œÅ (Œª p ‚Üí Œ∑ M (Typ M c p)) (Œª p ‚Üí lf (Typ M c p)) ‚Ü¶ œÅ
    {-# REWRITE Œ≥-unit-r #-}

    typ-Œ≥-pos-inr : (A : ‚ä§ ‚Üí Set) ‚Üí let M = Pb IdMnd A in {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M {i} c) ‚Üí Cns M (Typ M {i} c p))
      ‚Üí (Œµ : (p : Pos M {i} c) ‚Üí Cns‚Çõ M (Typ M {i} c p , Œ¥ p))
      ‚Üí (p : Pos M {i} c) (q : Pos‚Çõ M (Œµ p))
      ‚Üí Typ‚Çõ M (Œ≥ M œÅ Œ¥ Œµ) (Œ≥-pos-inr M œÅ Œ¥ Œµ p q) ‚Ü¶ Typ‚Çõ M (Œµ p) q
    {-# REWRITE typ-Œ≥-pos-inr #-}

    typ-Œ≥-pos-inl : (A : ‚ä§ ‚Üí Set) ‚Üí let M = Pb IdMnd A in {i : Idx M} {c : Cns M i} 
      ‚Üí (œÅ : Cns‚Çõ M (i , c))
      ‚Üí (Œ¥ : (p : Pos M {i} c) ‚Üí Cns M (Typ M {i} c p))
      ‚Üí (Œµ : (p : Pos M {i} c) ‚Üí Cns‚Çõ M (Typ M {i} c p , Œ¥ p))
      ‚Üí (p : Pos‚Çõ M œÅ)
      ‚Üí Typ‚Çõ M (Œ≥ M œÅ Œ¥ Œµ) (Œ≥-pos-inl M œÅ Œ¥ Œµ p) ‚Ü¶ Typ‚Çõ M œÅ p
    {-# REWRITE typ-Œ≥-pos-inl #-}

  ‚àû-category : Set (lsucc lzero)
  ‚àû-category = Œ£ (OpetopicType IdMnd) (is-fibrant ‚àò Hom)

  1-category : Set (lsucc lzero)
  1-category = Œ£ ‚àû-category Œª { (X , fib) ‚Üí (i : Idx‚Çõ (Pb IdMnd (Ob X))) ‚Üí is-set (Ob (Hom X) i) } 

  module _ (C : 1-category) where

    private
      X = fst (fst C)
      fib = snd (fst C)
      hom-sets = snd C
{-
    comp-has-all-paths : {x y z : Obj X}
      ‚Üí {f : Arrow X x y} {g : Arrow X y z}
      ‚Üí {h h‚ÇÅ : Arrow X x z}
      ‚Üí (Œ∏ : Simplex X f g h)
      ‚Üí (Œ∏‚ÇÅ : Simplex X f g h‚ÇÅ)
      ‚Üí h , Œ∏ == h‚ÇÅ , Œ∏‚ÇÅ
    comp-has-all-paths {x} {y} {z} {f} {g} Œ∏ Œ∏‚ÇÅ = contr-has-all-paths ‚¶É base-fibrant fib ((tt , z) , tt , cst x) (tr X x y z) (source X g f)  ‚¶Ñ _ _
 -}
    comp-dec : {x y : Obj X}
      ‚Üí (c : Cns‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x))
      ‚Üí (ŒΩ : (p : Pos‚Çõ (Pb IdMnd (Ob X)) c) ‚Üí Ob (Hom X) (Typ‚Çõ (Pb IdMnd (Ob X)) c p))
      ‚Üí Arrow X x y
    comp-dec c ŒΩ = fst $ contr-center (base-fibrant fib _ c ŒΩ)

    fill-dec : {x y : Obj X}
      ‚Üí (c : Cns‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x))
      ‚Üí (ŒΩ : (p : Pos‚Çõ (Pb IdMnd (Ob X)) c) ‚Üí Ob (Hom X) (Typ‚Çõ (Pb IdMnd (Ob X)) c p))
      ‚Üí Ob (Hom (Hom X)) (_ , c , ŒΩ)
    fill-dec c ŒΩ = snd $ contr-center (base-fibrant fib _ c ŒΩ)
    
    id : (x : Obj X) ‚Üí Arrow X x x
    id x = comp-dec (lf (_ , x)) Œª ()

    comp‚Çí : {x y z : Obj X} (g : Arrow X y z) (f : Arrow X x y) ‚Üí Arrow X x z
    comp‚Çí {x} {y} {z} g f = comp-dec (tr X _ _ _) (source X g f)
      
    fill‚Çí : {x y z : Obj X} (g : Arrow X y z) (f : Arrow X x y) ‚Üí Simplex X f g (comp‚Çí g f)
    fill‚Çí {x} {y} {z} g f = fill-dec (tr X _ _ _) (source X g f)
    
    unit-l-cell : {x y : Obj X} (f : Arrow X x y) ‚Üí Ob (Hom (Hom X)) _
    unit-l-cell {x} {y} f =
      let c = nd _
                 (Œª { (inl tt) ‚Üí lf (_ , y) , Œª() ;
                      (inr (tt , inl tt)) ‚Üí  Œ∑‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x) , _  ;
                      (inr (tt , inr ())) })
                 (Œª { (inl tt) ‚Üí Œ∑‚Çõ _ (_ , lf (_ , y) , Œª ()) ;
                      (inr (tt , inl tt)) ‚Üí lf (_ , f) ;
                      (inr (tt , inr (tt , ()))) })
                     
          ŒΩ = Œª { (inl tt) ‚Üí fill‚Çí (id y) f  ;
                  (inr (inl tt , inl tt)) ‚Üí fill-dec (lf (_ , y)) Œª ();
                  (inr (inl tt , inr (() , _))) ;
                  (inr (inr (tt , inl tt) , ())) ;
                  (inr (inr (tt , inr (tt , ())) , _)) }
               
      in fst $ contr-center (base-fibrant (hom-fibrant fib) _ c ŒΩ)

    unit-l‚Çí : {x y : Obj X} (f : Arrow X x y) ‚Üí comp‚Çí (id y) f == f
    unit-l‚Çí {x} {y} f =
      let contr = base-fibrant fib _ (Œ∑‚Çõ (Pb IdMnd (Ob X)) ((tt , y) , tt , cst x)) (cst f)
          unit-l-cell' = transport
            (Œª z ‚Üí Ob (Hom (Hom (fst (fst C)))) ((((tt , y) , tt , cst x) , comp‚Çí (id y) f) , z))
            (pair= idp (Œª= (Œ∑-pos-elim‚Çõ (Pb IdMnd (Ob X)) ((tt , y) , tt , cst x) _ idp)))
            (unit-l-cell f)
          Œ± = fst $ contr-center (base-fibrant (hom-fibrant fib) _ (lf (_ , f)) Œª())
      in fst= (contr-has-all-paths ‚¶É contr ‚¶Ñ
                (comp‚Çí (id y) f , unit-l-cell')
                (f , Œ±))

    unit-r-cell : {x y : Obj X} (f : Arrow X x y) ‚Üí Ob (Hom (Hom X)) _
    unit-r-cell {x} {y} f =
      let c = nd (tr (fst (fst C)) x x y , source (fst (fst C)) f (id x))
                 (Œª { (inl tt) ‚Üí Œ∑‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x) , _  ;
                      (inr (tt , inl tt)) ‚Üí lf (_ , x) , Œª () ;
                      (inr (tt , inr ())) })
                 (Œª { (inl tt) ‚Üí lf (_ , f);
                      (inr (tt , inl tt)) ‚Üí Œ∑‚Çõ _ (_ , lf (_ , x) , Œª ());
                      (inr (tt , inr (tt , ()))) })
                     
          ŒΩ = Œª { (inl tt) ‚Üí fill‚Çí f (id x) ;
                  (inr (inl tt , ())) ;
                  (inr (inr (tt , inl tt) , inl tt)) ‚Üí fill-dec (lf (_ , x)) Œª ()  ;
                  (inr (inr (tt , inl tt) , inr (() , _))) ;
                  (inr (inr (tt , inr (tt , ())) , _)) }
        
      in fst $ contr-center (base-fibrant (hom-fibrant fib) _ c ŒΩ)

    unit-r‚Çí : {x y : Obj X} (f : Arrow X x y) ‚Üí comp‚Çí f (id x) == f
    unit-r‚Çí {x} {y} f =
      let contr = base-fibrant fib _ (Œ∑‚Çõ (Pb IdMnd (Ob X)) ((tt , y) , tt , cst x)) (cst f)
          unit-r-cell' = transport
            (Œª z ‚Üí Ob (Hom (Hom (fst (fst C)))) ((((tt , y) , tt , cst x) , comp‚Çí f (id x)) , z))
            (pair= idp (Œª= (Œ∑-pos-elim‚Çõ (Pb IdMnd (Ob X)) ((tt , y) , tt , cst x) _ idp)))
            (unit-r-cell f)
          Œ± = fst $ contr-center (base-fibrant (hom-fibrant fib) _ (lf (_ , f)) Œª())
      in fst= (contr-has-all-paths ‚¶É contr ‚¶Ñ
                (comp‚Çí f (id x) , unit-r-cell')
                (f , Œ±))

    assoc‚Çí : {x y z t : Obj X}
      ‚Üí (h : Arrow X z t) (g : Arrow X y z) (f : Arrow X x y)
      ‚Üí comp‚Çí (comp‚Çí h g) f == comp‚Çí h (comp‚Çí g f)
    assoc‚Çí h g f = {!!}

    to-precategory : PreCategory lzero lzero
    PreCategory.obj to-precategory = Obj X
    PreCategory.hom to-precategory x y = Arrow X x y
    PreCategory.comp to-precategory = comp‚Çí
    PreCategory.assoc to-precategory = assoc‚Çí
    PreCategory.id to-precategory = id
    PreCategory.unit-l to-precategory = unit-l‚Çí
    PreCategory.unit-r to-precategory = unit-r‚Çí
    PreCategory.hom-sets to-precategory x y = hom-sets ((tt , y) , tt , cst x)

    record is-iso‚Çí {x y : Obj X} (f : Arrow X x y) : Set where
      constructor mk-iso‚Çí
      field
        g   : Arrow X y x
        f-g : comp‚Çí f g == (id y) 
        g-f : comp‚Çí g f == (id x) 

    iso‚Çí : (x y : Ob X tt) ‚Üí Set 
    iso‚Çí x y = Œ£ (Arrow X x y) is-iso‚Çí

    is-iso‚Çí= : {x y : Obj X}
      ‚Üí {f : Arrow X x y} 
      ‚Üí {g g‚ÇÅ : Arrow X y x}
      ‚Üí (g=g‚ÇÅ : g == g‚ÇÅ)
      ‚Üí {f-g : comp‚Çí f g == id y}
      ‚Üí {f-g‚ÇÅ : comp‚Çí f g‚ÇÅ == id y}
      ‚Üí (f-g=f-g‚ÇÅ : f-g == f-g‚ÇÅ [ (Œª g ‚Üí comp‚Çí f g == id y) ‚Üì g=g‚ÇÅ ])
      ‚Üí {g-f : comp‚Çí g f == id x}
      ‚Üí {g-f‚ÇÅ : comp‚Çí g‚ÇÅ f == id x}
      ‚Üí (g-f=g-f‚ÇÅ : g-f == g-f‚ÇÅ [ (Œª g ‚Üí comp‚Çí g f == id x) ‚Üì g=g‚ÇÅ ])
      ‚Üí mk-iso‚Çí g f-g g-f == mk-iso‚Çí g‚ÇÅ f-g‚ÇÅ g-f‚ÇÅ
    is-iso‚Çí= idp idp idp = idp

    is-iso‚Çí-is-prop : {x y : Obj X} (f : Arrow X x y)
      ‚Üí is-prop (is-iso‚Çí f)
    is-iso‚Çí-is-prop f = inhab-to-contr-is-prop {! !}

    iso‚Çí-is-set : (x y : Obj X) ‚Üí is-set (iso‚Çí x y)
    iso‚Çí-is-set x y = Œ£-level (hom-sets _) Œª _¬†‚Üí raise-level _ (is-iso‚Çí-is-prop _)

    iso‚Çí= : {x y : Obj X}
      ‚Üí {f g : iso‚Çí x y}
      ‚Üí fst f == fst g
      ‚Üí f == g
    iso‚Çí= p = pair= p (prop-has-all-paths-‚Üì ‚¶É is-iso‚Çí-is-prop _ ‚¶Ñ )

    id-is-iso‚Çí : (x : Obj X) ‚Üí is-iso‚Çí (id x)
    is-iso‚Çí.g (id-is-iso‚Çí x) = id _
    is-iso‚Çí.f-g (id-is-iso‚Çí x) = unit-r‚Çí _
    is-iso‚Çí.g-f (id-is-iso‚Çí x) = unit-r‚Çí _

    id-to-iso‚Çí : {x y : Obj X}
      ‚Üí x == y
      ‚Üí iso‚Çí x y
    id-to-iso‚Çí {x} idp = id x , id-is-iso‚Çí x 

    is-complete : Set
    is-complete = {x y : Obj X}
      ‚Üí is-equiv (id-to-iso‚Çí {x} {y})

    iso-iso‚Çí-eq : {x y : Obj X} {f : Arrow X x y}
      ‚Üí is-iso {P = to-precategory} f ‚âÉ is-iso‚Çí f
    iso-iso‚Çí-eq {x} {y} {f} = h , is-eq h i h-i i-h
      where h : is-iso {P = to-precategory} f
                ‚Üí is-iso‚Çí f
            is-iso‚Çí.g (h (mk-iso g f-g g-f)) = g
            is-iso‚Çí.f-g (h (mk-iso g f-g g-f)) =
              f-g
            is-iso‚Çí.g-f (h (mk-iso g f-g g-f)) =
              g-f

            i : is-iso‚Çí f
                ‚Üí is-iso {P = to-precategory} f
            is-iso.g (i (mk-iso‚Çí g f-g g-f)) = g
            is-iso.f-g (i (mk-iso‚Çí g f-g g-f)) =
              f-g
            is-iso.g-f (i (mk-iso‚Çí g f-g g-f)) =
              g-f

            i-h : i ‚àò h ‚àº idf _
            i-h e = is-iso= idp
              idp
              idp

            h-i : h ‚àò i ‚àº idf _
            h-i e = is-iso‚Çí= idp
              idp
              idp

    to-category : (cmpl : is-complete) ‚Üí Category lzero lzero
    Category.precat (to-category cmpl) = to-precategory
    Category.univalent (to-category cmpl) x y =
      transport! is-equiv (Œª= aux)
                 (Œ£-isemap-r (Œª _ ‚Üí is-equiv-inverse (snd iso-iso‚Çí-eq))
                 ‚àòise cmpl)
      where aux : {x y : Obj X} (p : x == y)
                  ‚Üí id-to-iso p == let (f , iso) = id-to-iso‚Çí p in (f , <‚Äì iso-iso‚Çí-eq iso) 
            aux idp = ‚âä= idp
            
  1-ucategory : Set (lsucc lzero)
  1-ucategory = Œ£ 1-category is-complete

  module FromCategory (C : Category lzero lzero) where
    open Category C renaming (precat to P ; id to id')

    mul : action (Slice ((Pb IdMnd (cst obj)))) Œª { ((_ , x) , c , y) ‚Üí hom (y tt) x }
    mul _ (lf i) Œ¥ = id' (snd i)
    mul _ (nd {i} c Œ¥‚ÇÅ Œµ) Œ¥ =
      comp (Œ¥ (inl tt))  (mul _ (Œµ tt) Œª p ‚Üí Œ¥ (inr (tt , p)))

    is-assoc : {M : ùïÑ} {A : Idx M ‚Üí Set} (a : action M A) ‚Üí Set
    is-assoc {M} {A} a = (i : Idx M) (œÉ : Cns M i)
      ‚Üí (Œ¥ : (p : Pos M œÉ) ‚Üí Cns M (Typ M œÉ p))
      ‚Üí (ŒΩ : (p : Pos M (Œº M œÉ Œ¥)) ‚Üí A (Typ M (Œº M œÉ Œ¥) p))
      ‚Üí a i (Œº M œÉ Œ¥) ŒΩ == a i œÉ Œª p ‚Üí a _ (Œ¥ p) Œª q ‚Üí ŒΩ (Œº-pos M œÉ Œ¥ p q)

    mul-Œ≥ : {i : Idx (Pb IdMnd (cst obj))} {c : Cns (Pb IdMnd (cst obj)) i}
      ‚Üí (œÅ : Cns‚Çõ (Pb IdMnd (cst obj)) (i , c))
      ‚Üí (Œ¥ : (p : Pos (Pb IdMnd (cst obj)) {i} c)
             ‚Üí Cns (Pb IdMnd (cst obj)) (Typ (Pb IdMnd (cst obj)) {i} c p))
      ‚Üí (Œµ : (p : Pos (Pb IdMnd (cst obj)) {i} c)
             ‚Üí Cns‚Çõ (Pb IdMnd (cst obj)) (Typ (Pb IdMnd (cst obj)) {i} c p , Œ¥ p))
      ‚Üí (ŒΩ : (p : Pos (Slice ((Pb IdMnd (cst obj)))) (Œ≥ _ œÅ Œ¥ Œµ)) ‚Üí
               let ((_ , x) , _ , y) = Typ (Slice ((Pb IdMnd (cst obj)))) (Œ≥ _ œÅ Œ¥ Œµ) p
               in hom (y tt) x)
      ‚Üí mul _ (Œ≥ _ œÅ Œ¥ Œµ) ŒΩ
        == comp (mul _ œÅ (ŒΩ ‚àò (Œ≥-pos-inl (Pb IdMnd (cst obj)) œÅ Œ¥ Œµ)))
                    (mul _ (Œµ tt) (ŒΩ ‚àò (Œ≥-pos-inr _ œÅ Œ¥ Œµ tt)))
    mul-Œ≥ {i} (lf _) Œ¥ Œµ ŒΩ =  ! (unit-l (mul _ (Œµ tt) ŒΩ))
    mul-Œ≥ {_ , _} (nd {i} c Œ¥‚ÇÅ Œµ‚ÇÅ) Œ¥ Œµ ŒΩ =
      let hyp = mul-Œ≥ (Œµ‚ÇÅ tt) Œ¥ Œµ Œª p ‚Üí ŒΩ (inr (tt , p))
      in ap (Œª x ‚Üí comp (ŒΩ (inl tt)) x) hyp ‚àô (! (assoc _ _ _))
      
    mul-assoc : is-assoc {(Slice ((Pb IdMnd (cst obj))))} mul
    mul-assoc .(i , Œ∑ (Pb IdMnd (Œª _ ‚Üí PreCategory.obj (Category.precat C))) i) (lf i) Œ¥ ŒΩ = idp
    mul-assoc .(i , Œº (Pb IdMnd (Œª _ ‚Üí PreCategory.obj (Category.precat C))) {i} c Œ¥‚ÇÅ) (nd {i} c Œ¥‚ÇÅ Œµ) Œ¥ ŒΩ =
      let hyp = mul-assoc _ (Œµ tt) (Œª q ‚Üí Œ¥ (inr (tt , q))) Œª q ‚Üí ŒΩ (Œ≥-pos-inr _ (Œ¥ (inl tt)) Œ¥‚ÇÅ _ tt q)
          
      in mul-Œ≥ (Œ¥ true) Œ¥‚ÇÅ (Œª p ‚Üí Œº‚Çõ _ (Œµ p) (Œª q ‚Üí Œ¥ (inr (p , q)))) ŒΩ
         ‚àô ap (Œª x ‚Üí
                comp (mul (i , c) (Œ¥ true)
                              (ŒΩ ‚àò Œ≥-pos-inl (Pb IdMnd (cst obj)) (Œ¥ true) Œ¥‚ÇÅ
                              (Œª p ‚Üí Œº‚Çõ _ (Œµ p) (Œª q ‚Üí Œ¥ (inr (p , q))))))
                          x)  
              hyp
  
    X : OpetopicType.OpetopicType IdMnd
    Ob X _ = obj
    Ob (Hom X) ((_ , x) , _ , ŒΩ) = hom (ŒΩ tt) x
    Ob (Hom (Hom X)) ((((_ , x) , _ , ŒΩ) , f) , pd , ŒΩ') = f == mul _ pd ŒΩ'
    Hom (Hom (Hom X)) = Terminal _

    M = Slice (Pb (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)))

    assoc-action : action M (Ob $ Hom $ Hom $ X)
    assoc-action .(i , Œ∑ (Pb (Slice (Pb IdMnd (Ob X))) (Ob (Hom X))) i) (lf i) Œ∫ = ! (unit-r (snd i))
    assoc-action .(_ , Œº (Pb (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)))
      {(((i , x) , (j , y)) , f)} (c , ŒΩ) Œ¥)
      (nd {(((i , x) , (j , y)) , f)} (c , ŒΩ) Œ¥ Œµ) Œ∫ =
        let hyp p = assoc-action (_ , Œ¥ p) (Œµ p) Œª q ‚Üí Œ∫ (inr (p , q))
        in  Œ∫ (inl tt) ‚àô ap (mul ((i , x) , j , y) c) (Œª= hyp) ‚àô ! (mul-assoc _ c (fst ‚àò Œ¥) _)

    X-is-fibrant : is-fibrant (Hom X)
    base-fibrant X-is-fibrant f œÉ ŒΩ = pathto-is-contr (mul f œÉ ŒΩ)
    base-fibrant (hom-fibrant X-is-fibrant) ((((tt , x) , _ , y) , f) , pd , Œ∫) œÉ ŒΩ =
      inhab-prop-is-contr (assoc-action _ œÉ ŒΩ , tt) ‚¶É Œ£-level (has-level-apply (hom-sets _ _) _ _) Œª _ ‚Üí Unit-level ‚¶Ñ
    hom-fibrant (hom-fibrant X-is-fibrant) = Terminal-is-fibrant _

    X-hom-sets : (i : Idx‚Çõ (Pb IdMnd (Ob X))) ‚Üí is-set (Ob (Hom X) i)
    X-hom-sets ((tt , y) , tt , x) = hom-sets (x tt) y

    X-cat : 1-category
    X-cat = (X , X-is-fibrant) , X-hom-sets

    id=id' : (x : obj) ‚Üí id X-cat x == id' x
    id=id' x = fst= (contr-path (base-fibrant X-is-fibrant ((tt , x) , tt , cst x) (lf (_ , x)) Œª ()) (id' x , idp))

    lem3 : {x y z : obj} (g : hom y z) (f : hom x y)
      ‚Üí comp‚Çí X-cat g f , fill‚Çí X-cat g f 
        == (comp g f) , ! (unit-r (comp g f)) ‚àô assoc _ _ _
    lem3 g f = contr-has-all-paths ‚¶É pathto-is-contr (comp g (comp f (id' _))) ‚¶Ñ _ _

    comp‚Çí=comp : {x y z : obj} (g : hom y z) (f : hom x y)
      ‚Üí comp‚Çí X-cat g f == comp g f
    comp‚Çí=comp g f = fst= (lem3 g f)

    lem : (x : obj) ‚Üí id X-cat x == id' x
    lem x = ! (unit-l (id X-cat x))
            ‚àô ! (comp‚Çí=comp (id' x) (id X-cat x))
            ‚àô unit-r‚Çí X-cat (id' x)
            
    to-from-cat : to-precategory X-cat == P
    to-from-cat =
      let obj= = idp
          hom= = idp
          id= = Œª= lem
          comp= = {!!} {-
            let yo = Œª= Œª x ‚Üí Œª= Œª y ‚Üí Œª= Œª z ‚Üí
                       Œª= Œª g ‚Üí Œª= Œª f ‚Üí
                         comp‚Çí=comp {x} {y} {z} g f
            in ap (Œª f ‚Üí Œª {x} {y} {z} ‚Üí f x y z) yo -}
      in PreCategory=' obj= hom= comp= id= _ _ _ _ _ _ _ _

    iso-iso‚Çí-eq' : {x y : obj} {f : hom x y}
      ‚Üí is-iso {P = P} f ‚âÉ is-iso‚Çí X-cat f
    iso-iso‚Çí-eq' {x} {y} {f} = h , is-eq h i h-i i-h
      where h : is-iso f
                ‚Üí is-iso‚Çí X-cat f
            is-iso‚Çí.g (h (mk-iso g f-g g-f)) = g
            is-iso‚Çí.f-g (h (mk-iso g f-g g-f)) =
              comp‚Çí=comp _ _ ‚àô f-g ‚àô ! (id=id' y)
            is-iso‚Çí.g-f (h (mk-iso g f-g g-f)) =
              comp‚Çí=comp _ _ ‚àô g-f ‚àô ! (id=id' x)

            i : is-iso‚Çí X-cat f
                ‚Üí is-iso f
            is-iso.g (i (mk-iso‚Çí g f-g g-f)) = g
            is-iso.f-g (i (mk-iso‚Çí g f-g g-f)) =
              ! (comp‚Çí=comp _ _) ‚àô f-g ‚àô id=id' _
            is-iso.g-f (i (mk-iso‚Çí g f-g g-f)) =
              ! (comp‚Çí=comp _ _) ‚àô g-f ‚àô id=id' _

            i-h : i ‚àò h ‚àº idf _
            i-h e = is-iso= idp
              (prop-has-all-paths ‚¶É has-level-apply (hom-sets _ _) _ _ ‚¶Ñ _ _)
              (prop-has-all-paths ‚¶É has-level-apply (hom-sets _ _) _ _ ‚¶Ñ _ _)

            h-i : h ‚àò i ‚àº idf _
            h-i e = is-iso‚Çí= X-cat idp
              (prop-has-all-paths ‚¶É has-level-apply (hom-sets _ _) _ _ ‚¶Ñ _ _)
              (prop-has-all-paths ‚¶É has-level-apply (hom-sets _ _) _ _ ‚¶Ñ _ _)

    X-is-complete : is-complete X-cat
    X-is-complete {x} {y} = transport! is-equiv (Œª= aux) ((Œ£-isemap-r Œª _ ‚Üí snd iso-iso‚Çí-eq') ‚àòise (univalent x y) )
      where aux : {x y : obj} (p : x == y)
                 ‚Üí id-to-iso‚Çí X-cat p == let (f , iso) = id-to-iso p in (f , ‚Äì> (iso-iso‚Çí-eq') iso) 
            aux idp = iso‚Çí= X-cat (id=id' _)
   
    to-1-ucategory : 1-ucategory
    to-1-ucategory = X-cat , X-is-complete

  fundamental-thm : {A : Set} {B : A ‚Üí Set}
    ‚Üí (p : is-contr (Œ£ A B))
    ‚Üí (x : A) ‚Üí B x ‚âÉ (fst (contr-center p) == x)
  fundamental-thm {A} {B} p x = f , is-eq f g f-g g-f
    where f : B x ‚Üí fst (contr-center p) == x
          f u = fst= (contr-path p (x , u))

          g : fst (contr-center p) == x ‚Üí B x
          g q = transport B q (snd (contr-center p))

          f-g : f ‚àò g ‚àº idf _
          f-g idp = ap fst= (contr-has-all-paths ‚¶É =-preserves-level p ‚¶Ñ _ _)

          g-f : g ‚àò f ‚àº idf _
          g-f u = to-transp (snd= (contr-path p (x , u)))

  record has-level‚Çí {M : ùïÑ} (n : ‚Ñï‚Çã‚ÇÇ) (X : OpetopicType M) : Set where
    coinductive
    field
      base-level : (i : Idx M) ‚Üí has-level n (Ob X i)
      hom-level : has-level‚Çí n (Hom X)
  open has-level‚Çí


  unique-action-level : (M : ùïÑ) (A : Idx M ‚Üí Set) (W : Idx (Slice (Pb M A)) ‚Üí Set)
     ‚Üí (act : unique-action M A W)
     ‚Üí {n : ‚Ñï‚Çã‚ÇÇ} (p : (i : Idx M) ‚Üí has-level (S n) (A i))
     ‚Üí (i : Idx (Slice (Pb M A)))
     ‚Üí has-level n (W i)
  unique-action-level M‚ÇÅ A W act p ((i , x) , c  , ŒΩ) =
     equiv-preserves-level ((fundamental-thm {A i} {Œª x ‚Üí W ((i , x) , c  , ŒΩ)} (act i c ŒΩ) x) ‚Åª¬π)
                           ‚¶É has-level-apply (p i) _ _ ‚¶Ñ

  fibrant-opetopic-type-level : {M : ùïÑ}
    ‚Üí (X : OpetopicType M)
    ‚Üí (fib : is-fibrant X)
    ‚Üí (n : ‚Ñï‚Çã‚ÇÇ)
    ‚Üí ((i : Idx M) ‚Üí has-level n (Ob X i))
    ‚Üí has-level‚Çí n X
  base-level (fibrant-opetopic-type-level X fib n p) = p
  hom-level (fibrant-opetopic-type-level {M} X fib n p) =
    fibrant-opetopic-type-level (Hom X) (hom-fibrant fib) n
         (unique-action-level M (Ob X) (Ob (Hom X)) (base-fibrant fib) Œª i ‚Üí raise-level _ (p i))
                                                                              
  contr-types-are-equiv : ‚àÄ {l} {A B : Set l}
    ‚Üí is-contr A
    ‚Üí is-contr B
    ‚Üí A ‚âÉ B
  contr-types-are-equiv cA cB = (Œª _ ‚Üí contr-center cB) , contr-to-contr-is-equiv _ cA cB

  {-# TERMINATING #-}
  contr-opetopic-types-are-equiv : {M N : ùïÑ}
    ‚Üí (e : M ‚âÉ‚Çò N)
    ‚Üí (X : OpetopicType M)
    ‚Üí (Y : OpetopicType N)
    ‚Üí has-level‚Çí ‚ü®-2‚ü© X
    ‚Üí has-level‚Çí ‚ü®-2‚ü© Y
    ‚Üí X ‚âÉ‚Çí Y [ e ]
  _‚âÉ‚Çí_[_].Ob‚âÉ (contr-opetopic-types-are-equiv e X Y cX cY) i = contr-types-are-equiv (base-level cX i) (base-level cY _)
  _‚âÉ‚Çí_[_].Hom‚âÉ (contr-opetopic-types-are-equiv e X Y cX cY) = contr-opetopic-types-are-equiv {!Slice‚âÉ ?!} (Hom X) (Hom Y) (hom-level cX) (hom-level cY)

  postulate
    C : 1-ucategory

  X : OpetopicType IdMnd
  X = fst (fst (fst C))
  X-fib = snd $ fst $ fst C
  X-hom-sets = snd $ fst C

  D = to-category (fst C) (snd C)
  
  C' = FromCategory.to-1-ucategory D
  Y = fst $ fst $ fst C'
  Y-fib = snd $ fst $ fst C'
  Y-hom-sets = snd $ fst C'
  
  comp'=mul : {x y : Obj X}
    ‚Üí (c : Cns‚Çõ (Pb IdMnd (Ob X)) ((_ , y) , _ , cst x))
    ‚Üí (ŒΩ : (p : Pos‚Çõ (Pb IdMnd (Ob X)) c) ‚Üí Ob (Hom X) (Typ‚Çõ (Pb IdMnd (Ob X)) c p))
    ‚Üí comp-dec (fst C) c ŒΩ == FromCategory.mul D _ c ŒΩ
  comp'=mul c ŒΩ = {!!}
 
  to-from-opetopic-types : (fst $ fst $ fst $ FromCategory.to-1-ucategory D) ‚âÉ‚Çí X [ id‚âÉ‚Çò IdMnd ]
  _‚âÉ‚Çí_[_].Ob‚âÉ to-from-opetopic-types _ = ide _
  _‚âÉ‚Çí_[_].Ob‚âÉ (_‚âÉ‚Çí_[_].Hom‚âÉ to-from-opetopic-types) =
    let p : Slice‚âÉ (Pb‚âÉ (id‚âÉ‚Çò IdMnd) {X = Ob X} Œª i ‚Üí ide (Ob X i)) == id‚âÉ‚Çò (Slice (Pb IdMnd (Ob X)))
        p = {! ap (Slice‚âÉ {Pb IdMnd (Ob X)} {Pb IdMnd (Ob X)}) (Pb‚âÉ-id IdMnd (Ob X)) !} ‚àô Slice‚âÉ-id (Pb IdMnd (Ob X))  

    in transport (Œª e ‚Üí Ob (Hom X) ‚âÉ[ e ] Ob (Hom X)) (! (ap Idx‚âÉ p)) Œª _ ‚Üí ide _
  _‚âÉ‚Çí_[_].Ob‚âÉ (_‚âÉ‚Çí_[_].Hom‚âÉ (_‚âÉ‚Çí_[_].Hom‚âÉ to-from-opetopic-types)) ((((i , x) , c , ŒΩ) , f) , pd , Œ∫) =
    let --e : Ob (Hom (Hom (fst $ fst $ fst $ FromCategory.to-1-ucategory D)))
        --       ((((i , x) , c , ŒΩ) , f) , pd , Œ∫)
        --    ‚âÉ Ob (Hom (Hom X)) (‚Äì> (Idx‚âÉ (Slice‚âÉ (Pb‚âÉ (Slice‚âÉ (Pb‚âÉ (id‚âÉ‚Çò IdMnd) (Œª _ ‚Üí ide _))) {!Œª _ ‚Üí ? !} ))) ((((i , x) , c , ŒΩ) , f) , pd , Œ∫))
        e = {!!}

        
        
    in e -- (Œª { idp ‚Üí {!!} }) , {!!}
    where e' : Ob (Hom (Hom (fst $ fst $ fst $ FromCategory.to-1-ucategory D)))
               ((((i , x) , c , ŒΩ) , f) , pd , Œ∫)
            ‚âÉ Ob (Hom (Hom X)) (‚Äì> (Idx‚âÉ (id‚âÉ‚Çò (Slice (Pb (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)))))) ((((i , x) , c , ŒΩ) , f) , pd , Œ∫))
          e' = g , is-eq g h g-h h-g
            where g : Ob (Hom (Hom (fst $ fst $ fst $ FromCategory.to-1-ucategory D))) ((((i , x) , c , ŒΩ) , f) , pd , Œ∫)
                      ‚Üí Ob (Hom (Hom X)) (‚Äì> (ide (Idx‚Çõ (Pb (Slice (Pb IdMnd (Ob X))) (Ob (Hom X))))) ((((i , x) , c , ŒΩ) , f) , pd , Œ∫))
                  g idp =
                    let r : Ob (Hom (Hom X)) ((((i , x) , c , ŒΩ) , comp-dec (fst C) pd Œ∫) , pd , Œ∫)
                        r = fill-dec (fst C) pd Œ∫

                        s : Ob (Hom (Hom X)) ((((i , x) , c , ŒΩ) , FromCategory.mul D _ pd Œ∫) , pd , Œ∫)
                        s = transport (Œª u ‚Üí Ob (Hom (Hom X)) ((((i , x) , c , ŒΩ) , u) , pd , Œ∫)) (comp'=mul pd Œ∫) r
                    in s

                  h : Ob (Hom (Hom X)) (‚Äì> (ide (Idx‚Çõ (Pb (Slice (Pb IdMnd (Ob X))) (Ob (Hom X))))) ((((i , x) , c , ŒΩ) , f) , pd , Œ∫))
                      ‚Üí Ob (Hom (Hom (fst $ fst $ fst $ FromCategory.to-1-ucategory D))) ((((i , x) , c , ŒΩ) , f) , pd , Œ∫)
                  h x =
                    let p : f == FromCategory.mul D ((i , _) , c , ŒΩ) pd Œ∫
                        p = {!!}

                        q : {!!} == {!!}
                        q = {!x!}
                    in p

                  g-h : g ‚àò h ‚àº idf _
                  g-h _ =
                    let x = unique-action-level
                              (Slice (Pb IdMnd (Ob X)))
                              (Ob (Hom X))
                              (Ob (Hom (Hom X)))
                              (base-fibrant X-fib)
                              X-hom-sets _
                    in prop-has-all-paths ‚¶É x ‚¶Ñ _ _

                  h-g : h ‚àò g ‚àº idf _
                  h-g x =
                    let x = unique-action-level
                              (Slice (Pb IdMnd (Ob Y)))
                              (Ob (Hom Y))
                              (Ob (Hom (Hom Y)))
                              (base-fibrant Y-fib)
                              Y-hom-sets
                              ((((i , _) , c , ŒΩ) , f) , pd , Œ∫)
                    in prop-has-all-paths ‚¶É x ‚¶Ñ _ _

  _‚âÉ‚Çí_[_].Hom‚âÉ (_‚âÉ‚Çí_[_].Hom‚âÉ (_‚âÉ‚Çí_[_].Hom‚âÉ to-from-opetopic-types)) =
    contr-opetopic-types-are-equiv _ _ _  (fibrant-opetopic-type-level _ (Terminal-is-fibrant _) _ Œª _ ‚Üí Unit-level)
                (fibrant-opetopic-type-level _ (hom-fibrant $ hom-fibrant $ X-fib) _
                        (unique-action-level (Slice (Pb (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)))) (Ob (Hom (Hom X))) (Ob (Hom (Hom (Hom X)))) (base-fibrant $ hom-fibrant $ X-fib) (unique-action-level (Slice (Pb IdMnd (Ob X))) (Ob (Hom X)) (Ob (Hom (Hom X))) (base-fibrant X-fib) Œª _ ‚Üí X-hom-sets _)))
