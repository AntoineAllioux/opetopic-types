{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver
open import Pb
open import OpetopicType

module Lemmas where

  -- Just going to accumulate random lemmas that clog the typechecker
  -- here so that we can use them in what follows...

  rotate : ∀ {ℓ} {A : Type ℓ} {a₀ a₁ a₂ : A}
    → (p : a₀ == a₁) (q : a₂ == a₁) (r : a₀ == a₂)
    → p ∙ ! q == r
    → p == r ∙ q
  rotate idp idp r s = s ∙ ! (∙-unit-r r)

  pth-alg₀ : ∀ {ℓ} {A : Set ℓ} {a₀ a₁ a₂ : A}
    → (p : a₀ == a₁) (q : a₂ == a₁) 
    → p == (p ∙ ! q) ∙ q 
  pth-alg₀ idp idp = idp

  pth-alg₁ : ∀ {ℓ} {A : Set ℓ} {a₀ a₁ a₂ : A}
    → (p : a₀ == a₂) (q : a₁ == a₀) 
    → p == (! q ∙ idp) ∙ q ∙ p
  pth-alg₁ idp idp = idp 

  -- Lemma about transporting in constructors
  typ-trans-inv : (M : 𝕄) (M↓ : 𝕄↓ M)
    → {i : Idx M} {c : Cns M i}
    → {j j' : Idx↓ M↓ i} (e : j == j')
    → (d : Cns↓ M↓ j c) (p : Pos M c)
    → Typ↓ M↓ (transport (λ x → Cns↓ M↓ x c) e d) p == Typ↓ M↓ d p
  typ-trans-inv M M↓ idp d p = idp

  fst=-comm : ∀ {i j} {A : Type i} {B : A → Type j}
    → {x y z : Σ A B} (p : y == x) (q : y == z)
    → fst= (! p ∙ q) == ! (fst= p) ∙ fst= q
  fst=-comm idp idp = idp

  Σ-fst-triv-lem₀ : ∀ {i j} {A : Type i} {B : A → Type j}
    → {a : A} {b₀ b₁ : B a} (p : Path {A = Σ A B} (a , b₀) (a , b₁))
    → (q : fst= p == idp)
    → b₀ == b₁
  Σ-fst-triv-lem₀ {B = B} {b₀ = b₀} {b₁ = b₁} p q =
    transport (λ x → b₀ == b₁ [ B ↓ x ]) q (snd= p) 
  
  Σ-fst-triv-lem₁ : ∀ {i j k} {A : Type i} {B : A → Type j}
    → {C : Σ A B → Type k}
    → {a : A} {b₀ b₁ : B a} (p : (a , b₀) == (a , b₁))
    → (q : fst= p == idp)
    → {x : C (a , b₀)} {y : C (a , b₁)}
    → x == y [ C ↓ p ]
    → x == y [ (λ b → C (a , b)) ↓ Σ-fst-triv-lem₀ p q ] 
  Σ-fst-triv-lem₁ {B = B} {C = C} {a = a} {b₀ = b₀} {b₁ = b₁} p q {x} {y} r =
    ↓-ap-out C (a ,_) (Σ-fst-triv-lem₀ p q) (transport (λ z → x == y [ C ↓ z ]) pth r)

    where pth : p == pair= idp (Σ-fst-triv-lem₀ p q)
          pth = pair=-η p ∙ (ap (λ z → pair= (fst z) (snd z))
            (pair= q (from-transp (λ z → b₀ == b₁ [ B ↓ z ]) q {u = snd= p} idp)))

  --
  -- Various generic lemmas about indices and so on in the slice
  -- generated by a monad over ....
  --
  
  module SliceOver (M : 𝕄) (M↓ : 𝕄↓ M) where

    Plbk : 𝕄
    Plbk = Pb M (Idx↓ M↓)

    Plbk↓ : 𝕄↓ Plbk
    Plbk↓ = Pb↓ M↓ (Idx↓ M↓) (λ i j k → j == k)
    
    Slc : 𝕄
    Slc = Slice Plbk

    Slc↓ : 𝕄↓ Slc
    Slc↓ = Slice↓ Plbk↓
  
    -- An explicit description of equalities in Idx↓ Slc↓ 
    slc-idx-lem : (i : Idx M) (j : Idx↓ M↓ i)
      → (c : Cns M i) (ν : (p : Pos M c) → Idx↓ M↓ (Typ M c p))
      → {j₀ : Idx↓ M↓ i} {e₀ : j₀ == j}
      → {d₀ : Cns↓ M↓ j₀ c} {α₀ : (p : Pos M c) → Typ↓ M↓ d₀ p == ν p}
      → {j₁ : Idx↓ M↓ i} {e₁ : j₁ == j}
      → {d₁ : Cns↓ M↓ j₁ c} {α₁ : (p : Pos M c) → Typ↓ M↓ d₁ p == ν p}
      → (q : j₀ == j₁) (r : e₀ == q ∙ e₁)
      → (s : transport (λ x → Cns↓ M↓ x c) q d₀ == d₁)
      → (t : (p : Pos M c) → α₀ p == (! (typ-trans-inv M M↓ q d₀ p) ∙ ap (λ x → Typ↓ M↓ x p) s) ∙ α₁ p)
      → Path {A = Idx↓ Slc↓ ((i , j) , c , ν)}
        ((j₀ , e₀) , (d₀ , α₀)) ((j₁ , e₁) , (d₁ , α₁)) 
    slc-idx-lem i j c ν idp idp idp t =
      pair= idp (pair= idp (λ= t))

    slc-idx-lem-coh : (i : Idx M) (j : Idx↓ M↓ i)
      → (c : Cns M i) (ν : (p : Pos M c) → Idx↓ M↓ (Typ M c p))
      → {j₀ : Idx↓ M↓ i} {e₀ : j₀ == j}
      → {d₀ : Cns↓ M↓ j₀ c} {α₀ : (p : Pos M c) → Typ↓ M↓ d₀ p == ν p}
      → {j₁ : Idx↓ M↓ i} {e₁ : j₁ == j}
      → {d₁ : Cns↓ M↓ j₁ c} {α₁ : (p : Pos M c) → Typ↓ M↓ d₁ p == ν p}
      → (q : j₀ == j₁) (r : e₀ == q ∙ e₁)
      → (s : transport (λ x → Cns↓ M↓ x c) q d₀ == d₁)
      → (t : (p : Pos M c) → α₀ p == (! (typ-trans-inv M M↓ q d₀ p) ∙ ap (λ x → Typ↓ M↓ x p) s) ∙ α₁ p)
      → fst= (slc-idx-lem i j c ν q r s t) == pair= q (↓-idf=cst-in r)
    slc-idx-lem-coh i j c ν idp idp idp t = fst=-β idp (pair= idp (λ= t)) 

    module Helpers (i : Idx M) (j : Idx↓ M↓ i)
             (c : Cns M i) (ν : (p : Pos M c) → Idx↓ M↓ (Typ M c p))
             (δ : (p : Pos M c) → Cns Plbk (Typ M c p , ν p))
             (ε : (p : Pos M c) → Cns Slc ((Typ M c p , ν p) , δ p))
             (d : Cns↓ M↓ j c) (typ-d=ν : (p : Pos M c) → Typ↓ M↓ d p == ν p) where

      μf = μ-pos-fst M c (fst ∘ δ)
      μs = μ-pos-snd M c (fst ∘ δ)

      δμ : (pq : Pos M (μ M c (fst ∘ δ)))
        → Idx↓ M↓ (Typ M (fst (δ (μf pq))) (μs pq))
      δμ pq = snd (δ (μf pq)) (μs pq) 

      δ↓μ : (δ↓ : (p : Pos M c) → Cns↓ Plbk↓ (Typ↓ M↓ d p , typ-d=ν p) (δ p))
        → (pq : Pos M (μ M c (fst ∘ δ)))
        → Typ↓ M↓ (fst (δ↓ (μf pq))) (μs pq)
        == snd (δ (μf pq)) (μs pq)
      δ↓μ δ↓ pq = snd (δ↓ (μf pq)) (μs pq) 

      δ-set : Set
      δ-set = (p : Pos M c) → Cns↓ Plbk↓ (Typ↓ M↓ d p , typ-d=ν p) (δ p)

      ε-fib : δ-set → Set
      ε-fib δ↓ = (p : Pos M c) → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , δ↓ p) (ε p)

      Σ-δε : Set 
      Σ-δε = Σ δ-set ε-fib

      Idx↓Slc↓Slc↓ : Set
      Idx↓Slc↓Slc↓ = Σ (Idx↓ Slc↓ ((i , j) , (μ M c (fst ∘ δ) , δμ))) (λ i → Cns↓ Slc↓ i (nd (c , ν) δ ε))

      nd↓-map : Σ-δε → Idx↓Slc↓Slc↓
      nd↓-map (δ↓ , ε↓) = ((j , idp) , (μ↓ M↓ d (fst ∘ δ↓) , δ↓μ δ↓)) , nd↓ (d , typ-d=ν) δ↓ ε↓

      -- Some id-elims on decoration types
      module _ (δ↓₀ δ↓₁ : δ-set) (ε↓₀ : ε-fib δ↓₀) (ε↓₁ : ε-fib δ↓₁) where

        ap-nd↓-map : (p : δ↓₀ == δ↓₁) (q : ε↓₀ == ε↓₁ [ ε-fib ↓ p ])
          → nd↓ (d , typ-d=ν) δ↓₀ ε↓₀ == nd↓ (d , typ-d=ν) δ↓₁ ε↓₁
                [ (λ x → Cns↓ Slc↓ x (nd (c , ν) δ ε)) ↓ ap ((j , idp) ,_) (ap (λ x → μ↓ M↓ d (fst ∘ x) , δ↓μ x) p) ]
        ap-nd↓-map idp idp = idp

        idx-slc-slc-pth : (p : δ↓₀ == δ↓₁) (q : ε↓₀ == ε↓₁ [ ε-fib ↓ p ])
          → nd↓-map (δ↓₀ , ε↓₀) == nd↓-map (δ↓₁ , ε↓₁)
        idx-slc-slc-pth p q = pair= (pair= idp (ap (λ x → μ↓ M↓ d (fst ∘ x) , δ↓μ x) p))
                            (ap-nd↓-map p q) 

        slc-typ-cst : (p : δ↓₀ == δ↓₁) (q : ε↓₀ == ε↓₁ [ ε-fib ↓ p ])
          → Path {A = Path {A = Idx↓ Slc↓ ((i , j) , (c , ν))} ((j , idp) , (d , typ-d=ν)) ((j , idp) , (d , typ-d=ν))}
                 idp (ap (λ x → Typ↓ Slc↓ (snd x) true) (idx-slc-slc-pth p q) ∙ idp)
        slc-typ-cst idp idp = idp

        -- Okay, let's work on the other side. So I think the point is that
        -- isp should be expressible in terms of this slice lemma thing.

    -- -- An explicit description of equalities in Idx↓ Slc↓ 
    -- slc-idx-lem : (i : Idx M) (j : Idx↓ M↓ i)
    --   → (c : Cns M i) (ν : (p : Pos M c) → Idx↓ M↓ (Typ M c p))
    --   → {j₀ : Idx↓ M↓ i} {e₀ : j₀ == j}
    --   → {d₀ : Cns↓ M↓ j₀ c} {α₀ : (p : Pos M c) → Typ↓ M↓ d₀ p == ν p}
    --   → {j₁ : Idx↓ M↓ i} {e₁ : j₁ == j}
    --   → {d₁ : Cns↓ M↓ j₁ c} {α₁ : (p : Pos M c) → Typ↓ M↓ d₁ p == ν p}
    --   → (q : j₀ == j₁) (r : e₀ == q ∙ e₁)
    --   → (s : transport (λ x → Cns↓ M↓ x c) q d₀ == d₁)
    --   → (t : (p : Pos M c) → α₀ p == (! (typ-trans-inv M M↓ q d₀ p) ∙ ap (λ x → Typ↓ M↓ x p) s) ∙ α₁ p)
    --   → Path {A = Idx↓ Slc↓ ((i , j) , c , ν)}
    --     ((j₀ , e₀) , (d₀ , α₀)) ((j₁ , e₁) , (d₁ , α₁)) 
    -- slc-idx-lem i j c ν idp idp idp t =
    --   pair= idp (pair= idp (λ= t))




        module _ (p : Pos M c) (q : Pos Slc (ε p))
                 (r : δ↓₀ == δ↓₁) (s : ε↓₀ == ε↓₁ [ ε-fib ↓ r ])
                 (idx-ih : Idx↓ Slc↓ ((Typ M c p , ν p) , δ p))
                 (cns-ih : Cns↓ Slc↓ idx-ih (ε p))
                 (idx-u-ih : idx-ih == ((Typ↓ M↓ d p , typ-d=ν p) , δ↓₁ p))
                 (cns-u-ih : cns-ih == ε↓₁ p [ (λ x → Cns↓ Slc↓ x (ε p)) ↓ idx-u-ih ])
          where

            δ↓' : δ-set
            δ↓' p = {!!} , {!!}

            okay : Path {A = Path {A = Idx↓ Slc↓ (Typₛ (Pb M (Idx↓ M↓)) (ε p) q)} (Typ↓ Slc↓ (ε↓₀ p) q) (Typ↓ Slc↓ (ε↓₁ p) q)}
              ({!typ-trans-inv Slc Slc↓ ? cns-ih q!} ∙ (ap (λ x → Typ↓ Slc↓ (snd x) q) (pair= idx-u-ih cns-u-ih)))
              (ap (λ x → Typ↓ Slc↓ (snd x) (inr (p , q))) (idx-slc-slc-pth r s))
            okay = {!!}

      -- nd↓-map : Σ-δε → Idx↓Slc↓Slc↓
      -- nd↓-map (δ↓ , ε↓) = ((j , idp) , (μ↓ M↓ d (fst ∘ δ↓) , δ↓μ δ↓)) , nd↓ (d , typ-d=ν) δ↓ ε↓


  -- typ-trans-inv : (M : 𝕄) (M↓ : 𝕄↓ M)
  --   → {i : Idx M} {c : Cns M i}
  --   → {j j' : Idx↓ M↓ i} (e : j == j')
  --   → (d : Cns↓ M↓ j c) (p : Pos M c)
  --   → Typ↓ M↓ (transport (λ x → Cns↓ M↓ x c) e d) p == Typ↓ M↓ d p
  -- typ-trans-inv M M↓ idp d p = idp



          -- we-need : typ-trans-inv Slc Slc↓ {!other!} cns-ih q ∙
          --           ap (λ x → Typ↓ Slc↓ (snd x) q) (pair= idx-u-ih cns-u-ih)
          --           == ap (λ x → Typ↓ Slc↓ (snd x) (inr (p , q))) (idx-slc-slc-pth r s) 
          -- we-need = {!!}

          -- suffices : typ-trans-inv Slc Slc↓ (idx-ih-coh p) (cns-ih p) q ∙ 
          --            ap (λ x → Typ↓ Slc↓ (snd x) q) (pair= (idx-u-ih p) (cns-u-ih p))
          --            == ap (λ x → Typ↓ Slc↓ (snd x) (inr (p , q))) isp


      module _ (δ↓₀ δ↓₁ : δ-set) (δ-eq : (p : Pos M c) → δ↓₀ p == δ↓₁ p) where

        pb-pth : Path {A = Cns↓ Plbk↓ (j , idp) (μ M c (fst ∘ δ) , δμ)}
                    (μ↓ M↓ d (fst ∘ δ↓₀) , δ↓μ δ↓₀)
                    (μ↓ M↓ d (fst ∘ δ↓₁) , δ↓μ δ↓₁)
        pb-pth = ap (λ x → μ↓ M↓ d (fst ∘ x) , δ↓μ x) (λ= δ-eq)

        module _ (ε↓₀ : ε-fib δ↓₀) (ε↓₁ : ε-fib δ↓₁)
                 (ε-eq : (p : Pos M c) → ε↓₀ p == ε↓₁ p [ (λ x → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , x) (ε p)) ↓ δ-eq p ]) where

          ε-eq' : (p : Pos M c) → ε↓₀ p == ε↓₁ p [ (λ x → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , x) (ε p)) ↓ app= (λ= δ-eq) p ]
          ε-eq' p = transport (λ z → ε↓₀ p == ε↓₁ p [ (λ x → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , x) (ε p)) ↓ z ])
                              (! (app=-β δ-eq p)) (ε-eq p)
          
          λ=ε↓ : ε↓₀ == ε↓₁ [ (λ x → (p : Pos M c) → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , x p) (ε p)) ↓ λ= δ-eq ]
          λ=ε↓ = ↓-Π-cst-app-in (λ p →
            ↓-ap-out (λ x → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , x) (ε p)) (λ x → x p)
                     (λ= δ-eq) (ε-eq' p))

          nd↓-pth :  nd↓ {f↓ = j , idp} (d , typ-d=ν) δ↓₀ ε↓₀
                == nd↓ {f↓ = j , idp} (d , typ-d=ν) δ↓₁ ε↓₁
                     [ (λ x → Cns↓ Slc↓ x (nd (c , ν) δ ε)) ↓ ap (λ x → (j , idp) , x) pb-pth ] 
          nd↓-pth = ap-nd↓-map δ↓₀ δ↓₁ ε↓₀ ε↓₁ (λ= δ-eq) λ=ε↓


  
