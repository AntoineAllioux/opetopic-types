{-# OPTIONS --without-K --rewriting #-}

open import HoTT
open import Monad
open import MonadOver
open import Pb
open import OpetopicType

module Lemmas where

  -- Just going to accumulate random lemmas that clog the typechecker
  -- here so that we can use them in what follows...

  rotate : ∀ {ℓ} {A : Type ℓ} {a₀ a₁ a₂ : A}
    → (p : a₀ == a₁) (q : a₂ == a₁) (r : a₀ == a₂)
    → p ∙ ! q == r
    → p == r ∙ q
  rotate idp idp r s = s ∙ ! (∙-unit-r r)

  pth-alg₀ : ∀ {ℓ} {A : Set ℓ} {a₀ a₁ a₂ : A}
    → (p : a₀ == a₁) (q : a₂ == a₁) 
    → p == (p ∙ ! q) ∙ q 
  pth-alg₀ idp idp = idp

  pth-alg₁ : ∀ {ℓ} {A : Set ℓ} {a₀ a₁ a₂ : A}
    → (p : a₀ == a₂) (q : a₁ == a₀) 
    → p == (! q ∙ idp) ∙ q ∙ p
  pth-alg₁ idp idp = idp 

  -- Lemma about transporting in constructors
  typ-trans-inv : (M : 𝕄) (M↓ : 𝕄↓ M)
    → {i : Idx M} {c : Cns M i}
    → {j j' : Idx↓ M↓ i} (e : j == j')
    → (d : Cns↓ M↓ j c) (p : Pos M c)
    → Typ↓ M↓ (transport (λ x → Cns↓ M↓ x c) e d) p == Typ↓ M↓ d p
  typ-trans-inv M M↓ idp d p = idp

  fst=-comm : ∀ {i j} {A : Type i} {B : A → Type j}
    → {x y z : Σ A B} (p : y == x) (q : y == z)
    → fst= (! p ∙ q) == ! (fst= p) ∙ fst= q
  fst=-comm idp idp = idp

  Σ-fst-triv-lem₀ : ∀ {i j} {A : Type i} {B : A → Type j}
    → {a : A} {b₀ b₁ : B a} (p : Path {A = Σ A B} (a , b₀) (a , b₁))
    → (q : fst= p == idp)
    → b₀ == b₁
  Σ-fst-triv-lem₀ {B = B} {b₀ = b₀} {b₁ = b₁} p q =
    transport (λ x → b₀ == b₁ [ B ↓ x ]) q (snd= p) 
  
  Σ-fst-triv-lem₁ : ∀ {i j k} {A : Type i} {B : A → Type j}
    → {C : Σ A B → Type k}
    → {a : A} {b₀ b₁ : B a} (p : (a , b₀) == (a , b₁))
    → (q : fst= p == idp)
    → {x : C (a , b₀)} {y : C (a , b₁)}
    → x == y [ C ↓ p ]
    → x == y [ (λ b → C (a , b)) ↓ Σ-fst-triv-lem₀ p q ] 
  Σ-fst-triv-lem₁ {B = B} {C = C} {a = a} {b₀ = b₀} {b₁ = b₁} p q {x} {y} r =
    ↓-ap-out C (a ,_) (Σ-fst-triv-lem₀ p q) (transport (λ z → x == y [ C ↓ z ]) pth r)

    where pth : p == pair= idp (Σ-fst-triv-lem₀ p q)
          pth = pair=-η p ∙ (ap (λ z → pair= (fst z) (snd z))
            (pair= q (from-transp (λ z → b₀ == b₁ [ B ↓ z ]) q {u = snd= p} idp)))

  --
  -- Various generic lemmas about indices and so on in the slice
  -- generated by a monad over ....
  --
  
  module SliceOver (M : 𝕄) (M↓ : 𝕄↓ M) where

    Plbk : 𝕄
    Plbk = Pb M (Idx↓ M↓)

    Plbk↓ : 𝕄↓ Plbk
    Plbk↓ = Pb↓ M↓ (Idx↓ M↓) (λ i j k → j == k)
    
    Slc : 𝕄
    Slc = Slice Plbk

    Slc↓ : 𝕄↓ Slc
    Slc↓ = Slice↓ Plbk↓
  
    -- An explicit description of equalities in Idx↓ Slc↓ 
    slc-idx-lem : (i : Idx M) (j : Idx↓ M↓ i)
      → (c : Cns M i) (ν : (p : Pos M c) → Idx↓ M↓ (Typ M c p))
      → {j₀ : Idx↓ M↓ i} {e₀ : j₀ == j}
      → {d₀ : Cns↓ M↓ j₀ c} {α₀ : (p : Pos M c) → Typ↓ M↓ d₀ p == ν p}
      → {j₁ : Idx↓ M↓ i} {e₁ : j₁ == j}
      → {d₁ : Cns↓ M↓ j₁ c} {α₁ : (p : Pos M c) → Typ↓ M↓ d₁ p == ν p}
      → (q : j₀ == j₁) (r : e₀ == q ∙ e₁)
      → (s : transport (λ x → Cns↓ M↓ x c) q d₀ == d₁)
      → (t : (p : Pos M c) → α₀ p == (! (typ-trans-inv M M↓ q d₀ p) ∙ ap (λ x → Typ↓ M↓ x p) s) ∙ α₁ p)
      → Path {A = Idx↓ Slc↓ ((i , j) , c , ν)}
        ((j₀ , e₀) , (d₀ , α₀)) ((j₁ , e₁) , (d₁ , α₁)) 
    slc-idx-lem i j c ν idp idp idp t =
      pair= idp (pair= idp (λ= t))

    slc-idx-lem-coh : (i : Idx M) (j : Idx↓ M↓ i)
      → (c : Cns M i) (ν : (p : Pos M c) → Idx↓ M↓ (Typ M c p))
      → {j₀ : Idx↓ M↓ i} {e₀ : j₀ == j}
      → {d₀ : Cns↓ M↓ j₀ c} {α₀ : (p : Pos M c) → Typ↓ M↓ d₀ p == ν p}
      → {j₁ : Idx↓ M↓ i} {e₁ : j₁ == j}
      → {d₁ : Cns↓ M↓ j₁ c} {α₁ : (p : Pos M c) → Typ↓ M↓ d₁ p == ν p}
      → (q : j₀ == j₁) (r : e₀ == q ∙ e₁)
      → (s : transport (λ x → Cns↓ M↓ x c) q d₀ == d₁)
      → (t : (p : Pos M c) → α₀ p == (! (typ-trans-inv M M↓ q d₀ p) ∙ ap (λ x → Typ↓ M↓ x p) s) ∙ α₁ p)
      → fst= (slc-idx-lem i j c ν q r s t) == pair= q (↓-idf=cst-in r)
    slc-idx-lem-coh i j c ν idp idp idp t = fst=-β idp (pair= idp (λ= t)) 

    -- A version with path overs ... could this simplify some things?
    slc-idx-lem↓ : (i : Idx M) (j : Idx↓ M↓ i)
      → (c : Cns M i) (ν : (p : Pos M c) → Idx↓ M↓ (Typ M c p))
      → {j₀ : Idx↓ M↓ i} {e₀ : j₀ == j}
      → {d₀ : Cns↓ M↓ j₀ c} {α₀ : (p : Pos M c) → Typ↓ M↓ d₀ p == ν p}
      → {j₁ : Idx↓ M↓ i} {e₁ : j₁ == j}
      → {d₁ : Cns↓ M↓ j₁ c} {α₁ : (p : Pos M c) → Typ↓ M↓ d₁ p == ν p}
      → (q : j₀ == j₁) (r : e₀ == q ∙ e₁)
      → (s : d₀ == d₁ [ (λ x → Cns↓ M↓ x c) ↓ q ])
      → (t : (p : Pos M c) → α₀ p == ap (λ x → Typ↓ M↓ (snd x) p) (pair= q s) ∙ α₁ p)
      → Path {A = Idx↓ Slc↓ ((i , j) , c , ν)}
        ((j₀ , e₀) , (d₀ , α₀)) ((j₁ , e₁) , (d₁ , α₁)) 
    slc-idx-lem↓ i j c ν {j₀} {e₀} {d₀} {α₀ = α₀} {α₁ = α₁} idp idp idp t =
      ap (λ x → ((j₀ , e₀) , d₀ , x)) (λ= t)

    module Helpers (i : Idx M) (j : Idx↓ M↓ i)
             (c : Cns M i) (ν : (p : Pos M c) → Idx↓ M↓ (Typ M c p))
             (δ : (p : Pos M c) → Cns Plbk (Typ M c p , ν p))
             (ε : (p : Pos M c) → Cns Slc ((Typ M c p , ν p) , δ p))
             (d : Cns↓ M↓ j c) (typ-d=ν : (p : Pos M c) → Typ↓ M↓ d p == ν p) where

      μf = μ-pos-fst M c (fst ∘ δ)
      μs = μ-pos-snd M c (fst ∘ δ)

      δμ : (pq : Pos M (μ M c (fst ∘ δ)))
        → Idx↓ M↓ (Typ M (fst (δ (μf pq))) (μs pq))
      δμ pq = snd (δ (μf pq)) (μs pq) 

      δ↓μ : (δ↓ : (p : Pos M c) → Cns↓ Plbk↓ (Typ↓ M↓ d p , typ-d=ν p) (δ p))
        → (pq : Pos M (μ M c (fst ∘ δ)))
        → Typ↓ M↓ (fst (δ↓ (μf pq))) (μs pq)
        == snd (δ (μf pq)) (μs pq)
      δ↓μ δ↓ pq = snd (δ↓ (μf pq)) (μs pq) 

      module _ (δ↓₀ δ↓₁ : (p : Pos M c) → Cns↓ Plbk↓ (Typ↓ M↓ d p , typ-d=ν p) (δ p))
               (δ-eq : (p : Pos M c) → δ↓₀ p == δ↓₁ p) where

        -- to-slc-idx-lem-hyp : (pq : Pos M (μ M c (fst ∘ δ)))
        --   → δ↓μ δ↓₀ pq == ap (λ x → Typ↓ M↓ x pq) (ap (λ z → μ↓ M↓ d (fst ∘ z)) (λ= δ-eq)) ∙ δ↓μ δ↓₁ pq
        -- to-slc-idx-lem-hyp pq =
        --   ↓-app=cst-out (↓-Π-cst-app-out (snd= (δ-eq (μf pq))) (μs pq)) ∙
        --   ap (λ z → z ∙ δ↓μ δ↓₁ pq) lem

        --   where lem = ap (λ x → Typ↓ M↓ x (μs pq)) (ap fst (δ-eq (μf pq)))
        --                 =⟨ ! (app=-β δ-eq (μf pq)) |in-ctx (λ z → ap (λ x → Typ↓ M↓ x (μs pq)) (ap fst z)) ⟩ 
        --               ap (λ x → Typ↓ M↓ x (μs pq)) (ap fst (ap (λ x → x (μf pq)) (λ= δ-eq)))
        --                 =⟨ ! (ap-∘ fst (λ x → x (μf pq)) (λ= δ-eq)) |in-ctx (λ z → ap (λ x → Typ↓ M↓ x (μs pq)) z) ⟩ 
        --               ap (λ x → Typ↓ M↓ x (μs pq)) (ap (λ x → fst (x (μf pq))) (λ= δ-eq))
        --                 =⟨ ! (ap-∘ (λ x → Typ↓ M↓ x (μs pq)) (λ x → fst (x (μf pq))) (λ= δ-eq)) ⟩ 
        --               ap (λ x → Typ↓ M↓ (fst (x (μf pq))) (μs pq)) (λ= δ-eq)
        --                 =⟨ ap-∘ (λ x → Typ↓ M↓ x pq) (λ x → μ↓ M↓ d (fst ∘ x)) (λ= δ-eq) ⟩
        --               ap (λ x → Typ↓ M↓ x pq) (ap (λ x → μ↓ M↓ d (fst ∘ x)) (λ= δ-eq)) =∎

        -- But here, why do you use something so complicated when you
        -- could simply ap in the first two arguments?

        pb-pth : Path {A = Cns↓ Plbk↓ (j , idp) (μ M c (fst ∘ δ) , δμ)}
                    (μ↓ M↓ d (fst ∘ δ↓₀) , δ↓μ δ↓₀)
                    (μ↓ M↓ d (fst ∘ δ↓₁) , δ↓μ δ↓₁)
        pb-pth = ap (λ x → μ↓ M↓ d (fst ∘ x) , δ↓μ x) (λ= δ-eq)

        module _ (ε↓₀ : (p : Pos M c) → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , δ↓₀ p) (ε p))
                 (ε↓₁ : (p : Pos M c) → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , δ↓₁ p) (ε p))
                 (ε-eq : (p : Pos M c) → ε↓₀ p == ε↓₁ p [ (λ x → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , x) (ε p)) ↓ δ-eq p ]) where

          -- Okay, now we'd like to get this last lemma
          -- claim :  nd↓ {f↓ = j , idp} (d , typ-d=ν) δ↓₀ ε↓₀
          --       == nd↓ {f↓ = j , idp} (d , typ-d=ν) δ↓₁ ε↓₁
          --            [ (λ x → Cns↓ Slc↓ x (nd (c , ν) δ ε)) ↓ idx-pth ]
          -- claim = {!!}


          -- What's the strategy? 


      -- ε-claim : ε↓' p == ε↓ p [ (λ x → Cns↓ Slc↓ ((Typ↓ M↓ d' p , typ-d'=ν p) , x) (ε p)) ↓ δ↓'=δ↓ p ]
      -- ε-claim = Σ-fst-triv-lem₁ {C = λ z → Cns↓ Slc↓ z (ε p)} {a = (Typ↓ M↓ d' p , typ-d'=ν p)}
      --   (idx-pth p) (contr-lemma p) (!ᵈ by-defn ∙ᵈ cns-u-ih)

      -- ↓-nd↓-in : (δ↓₀ δ↓₁ : (p : Pos M c) → Cns↓ Plbk↓ (Typ↓ M↓ d p , typ-d=ν p) (δ p))
      --   → (δ-eq : δ↓₀ == δ↓₁)
      --   → (ε↓₀ : (p : Pos M c) → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , δ↓₀ p) (ε p))
      --   → (ε↓₁ : (p : Pos M c) → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , δ↓₁ p) (ε p))
      --   → (ε-eq : (p : Pos M c) → ε↓₀ p == ε↓₁ p [ (λ x → Cns↓ Slc↓ ((Typ↓ M↓ d p , typ-d=ν p) , x) (ε p)) ↓ app= δ-eq p ])
      --   →  nd↓ {f↓ = j , idp} (d , typ-d=ν) δ↓₀ ε↓₀
      --   == nd↓ {f↓ = j , idp} (d , typ-d=ν) δ↓₁ ε↓₁
      --         [ (λ x → Cns↓ Slc↓ x (nd (c , ν) δ ε)) ↓ to-idx δ↓₀ δ↓₁ δ-eq ]
      -- ↓-nd↓-in δ↓₀ .δ↓₀ idp ε↓₀ ε↓₁ ε-eq = {!!}
    
    -- goal : (nd↓ {f↓ = j , idp} (d' , typ-d'=ν) (λ p → δ↓' p , λ q → typ-δ↓'=ν' p q) ε↓')  
    --        == (nd↓ {f↓ = j , idp} (d' , typ-d'=ν) δ↓ ε↓) [ (λ x → Cns↓ Slc↓ x (nd (c , ν) δ ε)) ↓
    --             slc-idx-lem i j (μ M c (fst ∘ δ)) δμ idp idp
    --             (ap (μ↓ M↓ d') (λ= (λ p → fst= (δ↓'=δ↓ p)))) finally ]
    -- goal = {!!} 
